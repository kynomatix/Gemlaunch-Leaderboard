{
  "address": "0x7f05B40F764d4b029FB783BA242A32Be63545E53",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Purachsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "RewardsCalimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "UpdateEndTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "UpdateReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "UpdateTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extented",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalsellTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMaxLimit",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalizeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAffiliate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "affiliateReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadFairLaunch.FairLaunchDetails",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "locker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAdded",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadFairLaunch.LiquidityDetails",
          "name": "_liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isBuyback",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "buyBackPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBuyBackAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boughtBackAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountPerBuyback",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastBuyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadFairLaunch.BuybackDetails",
          "name": "_buyBack",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_fundToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPrivateMode",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "__GempadFairLaunch_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "__ServicePayer_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isBuyback",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "buyBackPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBuyBackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boughtBackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPerBuyback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBuyTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUserRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStatus",
      "outputs": [
        {
          "internalType": "enum GempadFairLaunch.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "enablePublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fairlaunch",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalsellTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMaxLimit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxBuyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalizeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publicSaleTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAffiliate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "affiliateReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundByTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundToken",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInvestors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllReferrers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMode",
      "outputs": [
        {
          "internalType": "enum GempadFairLaunch.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSatus",
      "outputs": [
        {
          "internalType": "enum GempadFairLaunch.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingBuybackAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referralInvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "setAffiliation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userInvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userCalimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43e3d1cd149ccbd68d11bd368aeb7d2bfcc296133d413fa5b18d0c09a8edb4ea",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0x7f05B40F764d4b029FB783BA242A32Be63545E53",
    "transactionIndex": 1,
    "gasUsed": "3726405",
    "logsBloom": "0x
    "blockHash": "0xa94207b7dbc9950acf1bd8bc1da60d199560b24f5630ce735c1707e1172ea3b2",
    "transactionHash": "0x43e3d1cd149ccbd68d11bd368aeb7d2bfcc296133d413fa5b18d0c09a8edb4ea",
    "logs": [],
    "blockNumber": 5476855,
    "cumulativeGasUsed": "4109879",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19bc0a812d989bd2b38ed640ae41bece",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Purachsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"RewardsCalimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"UpdateEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalsellTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaxLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAffiliate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"affiliateReward\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadFairLaunch.FairLaunchDetails\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadFairLaunch.LiquidityDetails\",\"name\":\"_liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuyback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buyBackPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerBuyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadFairLaunch.BuybackDetails\",\"name\":\"_buyBack\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_fundToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPrivateMode\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"__GempadFairLaunch_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"__ServicePayer_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBuyback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buyBackPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerBuyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUserRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enum GempadFairLaunch.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"enablePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fairlaunch\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalsellTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaxLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAffiliate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"affiliateReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundByTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReferrers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"enum GempadFairLaunch.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSatus\",\"outputs\":[{\"internalType\":\"enum GempadFairLaunch.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingBuybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setAffiliation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCalimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"__GempadFairLaunch_init(uint256,(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,bool,address,address)\":{\"params\":{\"_buyBack\":\"buyback terms\",\"_feeReceiver\":\"protocol fee receiver\",\"_fundToken\":\"currency for purchase\",\"_id\":\".\",\"_isPrivateMode\":\"mode of sale public or private\",\"_liquidity\":\"adding liquidity terms\",\"_owner\":\".\",\"info\":\".\"}},\"addWhitelist(address[])\":{\"params\":{\"_participants\":\"user addreses\"}},\"buyToken(uint256,address)\":{\"params\":{\"_amount\":\"in terms of buying currency\",\"_referrer\":\"address of referrer for this sale\"}},\"enablePublicSale(uint256)\":{\"details\":\"set public sale start time equal to sale end time if you want to activate private mode\",\"params\":{\"_startTime\":\".\"}},\"getAllInvestors()\":{\"returns\":{\"_0\":\"address[]  return array of investors\"}},\"getAllReferrers()\":{\"returns\":{\"_0\":\"address[]  returns array of referrers\"}},\"getCurrentMode()\":{\"returns\":{\"mode\":\" of the current sale  (public or private)\"}},\"getCurrentSatus()\":{\"returns\":{\"status\":\" of the current sale\"}},\"getUserTokens(address)\":{\"params\":{\"_user\":\"address of usr\"},\"returns\":{\"tokens\":\" amount of user tokens\"}},\"isWhitelisted(address)\":{\"params\":{\"_address\":\".\"},\"returns\":{\"_0\":\"bool   return the whitelist status of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remainingBuybackAmount()\":{\"returns\":{\"_0\":\"uint256  it returns the remaing amunt to buy back out of total\"}},\"removeWhitelist(address[])\":{\"params\":{\"_participants\":\"user addreses\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAffiliation(uint256)\":{\"params\":{\"_reward\":\"percentage in bips\"}},\"setEndTime(uint256)\":{\"params\":{\"_endTime\":\".\"}},\"setTime(uint256,uint256)\":{\"params\":{\"_endTime\":\".\",\"_startTime\":\".\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__GempadFairLaunch_init(uint256,(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,bool,address,address)\":{\"notice\":\"initialzie the core params of fairluanch\"},\"addWhitelist(address[])\":{\"notice\":\"add users to whitelist\"},\"buyBackTokens()\":{\"notice\":\"anyone call this function to buyback tokens from dex and burn them\"},\"buyToken(uint256,address)\":{\"notice\":\"for user to buy Tokens\"},\"cancel()\":{\"notice\":\"cancel the sale and update status\"},\"claimReward()\":{\"notice\":\"called by the referrers to claim referral reward.\"},\"claimTokens()\":{\"notice\":\"called by the investros to claim tokens againt their investment\"},\"claimUserRefund()\":{\"notice\":\"called by investor to withdraw funds if sale fails to reach softcap or cancelled by owner.\"},\"enablePublicSale(uint256)\":{\"notice\":\"set public sale activation time.\"},\"finalize()\":{\"notice\":\"finalize the sale an dtransfer funds to owner.\"},\"remainingBuybackAmount()\":{\"notice\":\"In every sale specific amount is allocated or buy back purpose\"},\"removeWhitelist(address[])\":{\"notice\":\"remove users from whitelist\"},\"setAffiliation(uint256)\":{\"notice\":\"set affliation percentage in bips(3)\"},\"setEndTime(uint256)\":{\"notice\":\"let owner update end time even after sale start\"},\"setTime(uint256,uint256)\":{\"notice\":\"update start and end time before sale start\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/fairlaunch/contracts/GempadFairLaunch.sol\":\"GempadFairLaunch\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/fairlaunch/contracts/GempadFairLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport './interfaces/IERC20Extented.sol';\\r\\nimport './interfaces/IUniswapV2Factory.sol';\\r\\nimport './interfaces/IUniswapV2Pair.sol';\\r\\nimport './interfaces/IUniswapV2Router02.sol';\\r\\nimport './interfaces/IGempadVestingLock.sol';\\r\\nimport './GempadWhitelist.sol';\\r\\nimport 'hardhat/console.sol';\\r\\n\\r\\ncontract GempadFairLaunch is ServicePayer, GempadWhitelist, ReentrancyGuardUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    bool public isInitialized;\\r\\n    uint256 public Id;\\r\\n\\r\\n    FairLaunchDetails public fairlaunch;\\r\\n    LiquidityDetails public liquidity;\\r\\n    BuybackDetails public buyBack;\\r\\n    Status public currentStatus;\\r\\n    IERC20Extented public fundToken;\\r\\n    bool public fundByTokens;\\r\\n\\r\\n    bool private isPrivateMode;\\r\\n\\r\\n    address private feeReceiver;\\r\\n    uint256 private tokenFee;\\r\\n\\r\\n    uint256 public totalRaised;\\r\\n    uint256 public totalClaimed;\\r\\n    uint256 private totalReferralInvest;\\r\\n    uint256 private tokenToReceive;\\r\\n    uint256 private totalReward = 0;\\r\\n\\r\\n    uint256 public currentPrice;\\r\\n\\r\\n    address[] private investors;\\r\\n    address[] private referrers;\\r\\n\\r\\n    mapping(address => UserDetails) public userInfo;\\r\\n    mapping(address => RewardDetails) public rewardInfo;\\r\\n\\r\\n    struct FairLaunchDetails {\\r\\n        IERC20Extented token;\\r\\n        uint256 totalsellTokens;\\r\\n        uint256 softCap;\\r\\n        bool isMaxLimit;\\r\\n        uint256 maxBuyLimit;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 finalizeTime;\\r\\n        uint256 publicSaleTime;\\r\\n        bool isAffiliate;\\r\\n        uint256 affiliateReward;\\r\\n    }\\r\\n    struct LiquidityDetails {\\r\\n        IUniswapV2Router02 router;\\r\\n        uint256 liquidityPercent;\\r\\n        uint256 lockTime;\\r\\n        address locker;\\r\\n        uint256 liquidityAdded;\\r\\n    }\\r\\n\\r\\n    struct BuybackDetails {\\r\\n        bool isBuyback;\\r\\n        uint256 buyBackPercent;\\r\\n        uint256 totalBuyBackAmount;\\r\\n        uint256 boughtBackAmount;\\r\\n        uint256 amountPerBuyback;\\r\\n        uint256 minDelay;\\r\\n        uint256 maxDelay;\\r\\n        uint256 lastBuyTime;\\r\\n    }\\r\\n\\r\\n    struct UserDetails {\\r\\n        uint256 userInvest;\\r\\n        uint256 userCalimed;\\r\\n    }\\r\\n    struct RewardDetails {\\r\\n        uint256 referralInvest;\\r\\n        uint256 rewardShare;\\r\\n    }\\r\\n\\r\\n    enum Status {\\r\\n        INCOMMING,\\r\\n        ACTIVE,\\r\\n        CANCELLED,\\r\\n        CLOSED\\r\\n    }\\r\\n    enum Mode {\\r\\n        PENDING,\\r\\n        PRIVATE,\\r\\n        PUBLIC\\r\\n    }\\r\\n\\r\\n    event Purachsed(uint256 id, address sender, uint256 _amount);\\r\\n    event PublicSaleEnabled(uint256 id, uint256 time);\\r\\n    event liquidityAdded(uint256 id, address pair, uint256 liquidity);\\r\\n    event UpdateReward(uint256 id, uint256 reward, address sender);\\r\\n    event UpdateTime(uint256 id, uint256 start, uint256 end);\\r\\n    event UpdateEndTime(uint256 id, uint256 timeNow, uint256 end);\\r\\n    event RewardsCalimed(uint256 id, address receiver, uint256 share);\\r\\n\\r\\n    /**\\r\\n     * @notice  initialzie the core params of fairluanch\\r\\n     * @param   _id  .\\r\\n     * @param   info  .\\r\\n     * @param   _liquidity  adding liquidity terms\\r\\n     * @param   _buyBack   buyback terms\\r\\n     * @param   _fundToken  currency for purchase\\r\\n     * @param   _isPrivateMode  mode of sale public or private\\r\\n     * @param   _feeReceiver  protocol fee receiver\\r\\n     * @param   _owner  .\\r\\n     */\\r\\n    function __GempadFairLaunch_init(\\r\\n        uint256 _id,\\r\\n        FairLaunchDetails memory info,\\r\\n        LiquidityDetails memory _liquidity,\\r\\n        BuybackDetails memory _buyBack,\\r\\n        address _fundToken,\\r\\n        bool _isPrivateMode,\\r\\n        address payable _feeReceiver,\\r\\n        address _owner\\r\\n    ) public payable initializer {\\r\\n        require(!isInitialized, 'Err: Already initialized');\\r\\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadFairLaunch');\\r\\n\\r\\n        Id = _id;\\r\\n        //set custom Investment Token\\r\\n        fundByTokens = _fundToken != address(0);\\r\\n        if (fundByTokens) {\\r\\n            fundToken = IERC20Extented(_fundToken);\\r\\n        }\\r\\n\\r\\n        if (info.isAffiliate) require(info.affiliateReward <= 5e3, 'MAX reward limit exceeded');\\r\\n\\r\\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\\r\\n        require((info.endTime - info.startTime) <= 604800, 'Invalid duration');\\r\\n\\r\\n        if (_buyBack.isBuyback) {\\r\\n            require(\\r\\n                _liquidity.liquidityPercent >= 30e3 && _liquidity.liquidityPercent <= 100e3,\\r\\n                'Invalid liquidity percentage'\\r\\n            );\\r\\n            require(\\r\\n                _liquidity.liquidityPercent + _buyBack.buyBackPercent > 50e3 &&\\r\\n                    _liquidity.liquidityPercent + _buyBack.buyBackPercent <= 100e3,\\r\\n                'Liquidity + Buyback must be greater than 50% and equal to 100%'\\r\\n            );\\r\\n\\r\\n            require(_buyBack.minDelay >= 60, 'Minimum delay is atleast 1 minute');\\r\\n\\r\\n            require(_buyBack.maxDelay <= 300, 'Maximum delay restiricted to 5 minutes');\\r\\n\\r\\n            _buyBack.totalBuyBackAmount = (info.softCap * _buyBack.buyBackPercent) / 100e3;\\r\\n\\r\\n            buyBack = _buyBack;\\r\\n        } else {\\r\\n            require(\\r\\n                _liquidity.liquidityPercent > 50e3 && _liquidity.liquidityPercent <= 100e3,\\r\\n                'Invalid liquidity percentage'\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(_liquidity.lockTime >= 300, \\\"Lock time can't be less than 5 minuts\\\");\\r\\n\\r\\n        liquidity = _liquidity;\\r\\n\\r\\n        fairlaunch = info;\\r\\n\\r\\n        // Initialize the public sale start time;\\r\\n        fairlaunch.publicSaleTime = (_isPrivateMode) ? info.endTime : info.startTime;\\r\\n\\r\\n        //whitelisting feature status\\r\\n        isPrivateMode = _isPrivateMode;\\r\\n\\r\\n        // Initialize fee and refund type\\r\\n        feeReceiver = _feeReceiver;\\r\\n        tokenFee = IPayable(feeReceiver).getFee('GempadFairLaunch');\\r\\n\\r\\n        uint256 fee = (info.totalsellTokens * tokenFee) / 100e3;\\r\\n        tokenToReceive =\\r\\n            info.totalsellTokens +\\r\\n            (((info.totalsellTokens - fee) * _liquidity.liquidityPercent) / 100e3);\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n        isInitialized = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  for user to buy Tokens\\r\\n     * @param   _amount  in terms of buying currency\\r\\n     * @param   _referrer  address of referrer for this sale\\r\\n     */\\r\\n    function buyToken(uint256 _amount, address _referrer) external payable nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(\\r\\n            block.timestamp >= fairlaunch.startTime && block.timestamp <= fairlaunch.endTime,\\r\\n            'Sale is not active'\\r\\n        );\\r\\n\\r\\n        if (block.timestamp < fairlaunch.publicSaleTime) {\\r\\n            require(_whitelist[msg.sender], 'User is not whitelisted');\\r\\n        }\\r\\n\\r\\n        if (fairlaunch.isMaxLimit) {\\r\\n            require(user.userInvest + _amount <= fairlaunch.maxBuyLimit, 'Maximum buy limit reached');\\r\\n        }\\r\\n\\r\\n        if (user.userInvest <= 0) investors.push(msg.sender);\\r\\n        user.userInvest += _amount;\\r\\n\\r\\n        // Update the total sale amount\\r\\n        totalRaised += _amount;\\r\\n\\r\\n        currentPrice = fundByTokens\\r\\n            ? (fairlaunch.totalsellTokens * (10 ** fundToken.decimals())) / totalRaised\\r\\n            : (fairlaunch.totalsellTokens * 1e18) / totalRaised;\\r\\n\\r\\n        if (fairlaunch.isAffiliate) {\\r\\n            if (_referrer != address(0)) {\\r\\n                RewardDetails storage reward = rewardInfo[_referrer];\\r\\n                if (reward.referralInvest <= 0) referrers.push(_referrer);\\r\\n\\r\\n                totalReferralInvest += _amount;\\r\\n                reward.referralInvest += _amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        } else {\\r\\n            // Ensure that the sender has sent enough Ether\\r\\n            require(msg.value == _amount, 'Insufficient funds sent');\\r\\n        }\\r\\n        emit Purachsed(Id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  set public sale activation time.\\r\\n     * @dev     set public sale start time equal to sale end time if you want to activate private mode\\r\\n     * @param   _startTime  .\\r\\n     */\\r\\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\\r\\n        // require(_startTime >= block.timestamp, 'Start time must be greater than current time');\\r\\n        fairlaunch.publicSaleTime = _startTime;\\r\\n\\r\\n        emit PublicSaleEnabled(Id, fairlaunch.publicSaleTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  cancel the sale and update status\\r\\n     */\\r\\n    function cancel() external onlyOwner {\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\\r\\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\\r\\n\\r\\n        currentStatus = Status.CANCELLED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  finalize the sale an dtransfer funds to owner.\\r\\n     */\\r\\n    function finalize() external onlyOwner {\\r\\n        require(\\r\\n            (block.timestamp > fairlaunch.endTime && totalRaised >= fairlaunch.softCap) ||\\r\\n                totalRaised >= fairlaunch.softCap,\\r\\n            'Sale End Time or cap not reached'\\r\\n        );\\r\\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\\r\\n\\r\\n        currentStatus = Status.CLOSED;\\r\\n        fairlaunch.finalizeTime = block.timestamp;\\r\\n\\r\\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        if (fairlaunch.isAffiliate && totalReferralInvest > 0) {\\r\\n            totalReward = ((totalRaised - feeAmount) * fairlaunch.affiliateReward) / 100e3;\\r\\n            distributeRewards();\\r\\n        }\\r\\n\\r\\n        if (buyBack.isBuyback) {\\r\\n            buyBack.totalBuyBackAmount =\\r\\n                ((totalRaised - (feeAmount + totalReward)) * buyBack.buyBackPercent) /\\r\\n                100e3;\\r\\n        }\\r\\n\\r\\n        addLiquidity();\\r\\n\\r\\n        withdrawFunds();\\r\\n\\r\\n        // transfer token fee;\\r\\n        _transferFunds(feeReceiver, feeAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  transfer raised funds to owner account\\r\\n     */\\r\\n    function withdrawFunds() internal onlyOwner {\\r\\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        uint256 withdrawable = totalRaised - (fee + totalReward + liquidity.liquidityAdded);\\r\\n\\r\\n        if (buyBack.isBuyback) {\\r\\n            withdrawable = withdrawable - buyBack.totalBuyBackAmount;\\r\\n        }\\r\\n\\r\\n        _transferFunds(msg.sender, withdrawable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  distribute total referral reward among referrers as per their contribution\\r\\n     */\\r\\n    function distributeRewards() internal {\\r\\n        uint256 length = referrers.length;\\r\\n\\r\\n        if (length > 0) {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                RewardDetails storage reward = rewardInfo[referrers[i]];\\r\\n\\r\\n                uint256 share = (totalReward * reward.referralInvest) / totalReferralInvest;\\r\\n\\r\\n                reward.rewardShare = share;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by the referrers to claim referral reward.\\r\\n     */\\r\\n    function claimReward() external {\\r\\n        RewardDetails storage reward = rewardInfo[msg.sender];\\r\\n\\r\\n        require(currentStatus == Status.CLOSED, 'Sale is not closed');\\r\\n        require(reward.rewardShare > 0, 'User is not referrer');\\r\\n\\r\\n        uint256 share = reward.rewardShare;\\r\\n        reward.rewardShare = 0;\\r\\n\\r\\n        _transferFunds(msg.sender, share);\\r\\n\\r\\n        emit RewardsCalimed(Id, msg.sender, share);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by the investros to claim tokens againt their investment\\r\\n     */\\r\\n    function claimTokens() external nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n        uint256 userShare = getUserTokens(msg.sender);\\r\\n\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\\r\\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\\r\\n\\r\\n        require((user.userCalimed + userShare) <= userShare, 'All tokens claimed');\\r\\n\\r\\n        user.userCalimed = userShare;\\r\\n\\r\\n        totalClaimed += userShare;\\r\\n\\r\\n        fairlaunch.token.transfer(msg.sender, userShare);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by investor to withdraw funds if sale fails to reach softcap or cancelled by owner.\\r\\n     */\\r\\n    function claimUserRefund() external {\\r\\n        UserDetails storage info = userInfo[msg.sender];\\r\\n        require(\\r\\n            (block.timestamp >= fairlaunch.endTime && totalRaised < fairlaunch.softCap) ||\\r\\n                currentStatus == Status.CANCELLED,\\r\\n            'Refund is not allowed'\\r\\n        );\\r\\n        require(info.userInvest > 0, 'User has not invested');\\r\\n\\r\\n        uint256 refund = info.userInvest;\\r\\n        info.userInvest = 0;\\r\\n        _transferFunds(msg.sender, refund);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  anyone call this function to buyback tokens from dex and burn them\\r\\n     */\\r\\n    function buyBackTokens() public {\\r\\n        require(currentStatus == Status.CLOSED, 'Sale has not ended');\\r\\n        require(block.timestamp - fairlaunch.finalizeTime >= buyBack.maxDelay, 'Buyback not initailzed');\\r\\n        require(block.timestamp - buyBack.lastBuyTime >= buyBack.minDelay, 'Buyback delay not reached');\\r\\n        require(buyBack.boughtBackAmount < buyBack.totalBuyBackAmount, 'Insuffcient funds');\\r\\n\\r\\n        address[] memory path = getPathForTokens();\\r\\n\\r\\n        // swap eth to token\\r\\n        uint256[] memory data;\\r\\n\\r\\n        uint256 buyAmount = buyBack.amountPerBuyback;\\r\\n\\r\\n        buyAmount = ((buyBack.totalBuyBackAmount - buyBack.boughtBackAmount) < buyBack.amountPerBuyback)\\r\\n            ? (buyBack.totalBuyBackAmount - buyBack.boughtBackAmount)\\r\\n            : buyBack.amountPerBuyback;\\r\\n\\r\\n        buyBack.boughtBackAmount += buyAmount;\\r\\n        buyBack.lastBuyTime = block.timestamp;\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            fundToken.approve(address(liquidity.router), buyAmount);\\r\\n\\r\\n            data = liquidity.router.swapExactTokensForTokens(\\r\\n                buyAmount,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1800\\r\\n            );\\r\\n        } else {\\r\\n            data = liquidity.router.swapExactETHForTokens{ value: buyAmount }(\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1800\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // burn token\\r\\n        fairlaunch.token.transfer(address(0x000000000000000000000000000000000000dEaD), data[1]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  set affliation percentage in bips(3)\\r\\n     * @param   _reward  percentage in bips\\r\\n     */\\r\\n    function setAffiliation(uint256 _reward) external onlyOwner {\\r\\n        require(_reward <= 5e3, \\\"Reward can't be greater than 5%\\\");\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale is cancelled');\\r\\n        require(currentStatus != Status.CLOSED, 'Sale is not active');\\r\\n        fairlaunch.affiliateReward = _reward;\\r\\n\\r\\n        emit UpdateReward(Id, _reward, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  update start and end time before sale start\\r\\n     * @param   _startTime  .\\r\\n     * @param   _endTime  .\\r\\n     */\\r\\n    function setTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        require(block.timestamp < fairlaunch.startTime, 'Sale already started');\\r\\n        require(_startTime > block.timestamp && _startTime < _endTime, 'Invalid start time');\\r\\n\\r\\n        fairlaunch.startTime = _startTime;\\r\\n        fairlaunch.endTime = _endTime;\\r\\n\\r\\n        emit UpdateTime(Id, _startTime, _endTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  let owner update end time even after sale start\\r\\n     * @param   _endTime  .\\r\\n     */\\r\\n    function setEndTime(uint256 _endTime) external onlyOwner {\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale is cancelled');\\r\\n        require(currentStatus != Status.CLOSED, 'Sale is closed');\\r\\n        require(_endTime > fairlaunch.startTime, 'Invalid end time');\\r\\n\\r\\n        fairlaunch.endTime = _endTime;\\r\\n\\r\\n        emit UpdateEndTime(Id, block.timestamp, _endTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  mode  of the current sale  (public or private)\\r\\n     */\\r\\n    function getCurrentMode() public view returns (Mode mode) {\\r\\n        mode = (block.timestamp < fairlaunch.startTime)\\r\\n            ? Mode.PENDING //pending\\r\\n            : (block.timestamp >= fairlaunch.startTime && block.timestamp < fairlaunch.publicSaleTime)\\r\\n            ? Mode.PRIVATE //private\\r\\n            : Mode.PUBLIC; //public\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  status  of the current sale\\r\\n     */\\r\\n    function getCurrentSatus() public view returns (Status status) {\\r\\n        status = (block.timestamp < fairlaunch.startTime && currentStatus != Status.CANCELLED)\\r\\n            ? Status.INCOMMING\\r\\n            : (currentStatus != Status.CANCELLED &&\\r\\n                currentStatus != Status.CLOSED &&\\r\\n                block.timestamp > fairlaunch.startTime)\\r\\n            ? Status.ACTIVE\\r\\n            : currentStatus;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param   _user  address of usr\\r\\n     * @return  tokens  amount of user tokens\\r\\n     */\\r\\n    function getUserTokens(address _user) public returns (uint256 tokens) {\\r\\n        require(currentStatus == Status.CLOSED, 'Token will be allocated after finalize sale');\\r\\n\\r\\n        UserDetails memory user = userInfo[_user];\\r\\n\\r\\n        tokens = fundByTokens\\r\\n            ? (user.userInvest * currentPrice) / (10 ** fundToken.decimals())\\r\\n            : (user.userInvest * currentPrice) / 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  address[]  returns array of referrers\\r\\n     */\\r\\n    function getAllReferrers() public view returns (address[] memory) {\\r\\n        return referrers;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  address[]  return array of investors\\r\\n     */\\r\\n    function getAllInvestors() public view returns (address[] memory) {\\r\\n        return investors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  In every sale specific amount is allocated or buy back purpose\\r\\n     * @return  uint256  it returns the remaing amunt to buy back out of total\\r\\n     */\\r\\n    function remainingBuybackAmount() public view returns (uint256) {\\r\\n        return buyBack.totalBuyBackAmount - buyBack.boughtBackAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice sell tokens and purchase currency pair\\r\\n     * @return  pairAddress  .\\r\\n     */\\r\\n    function getTokenPair() internal view returns (address pairAddress) {\\r\\n        if (fundByTokens) {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                address(fundToken),\\r\\n                address(fairlaunch.token)\\r\\n            );\\r\\n        } else {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                liquidity.router.WETH(),\\r\\n                address(fairlaunch.token)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  return sell tokens and purchase currency share to add liquidity\\r\\n     * @return  share  purchase currency\\r\\n     * @return  tokens  sell token\\r\\n     */\\r\\n    function getTokenShare() internal view returns (uint256 share, uint256 tokens) {\\r\\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        uint256 funds = totalRaised - (fee + totalReward);\\r\\n\\r\\n        share = (funds * liquidity.liquidityPercent) / 100e3;\\r\\n\\r\\n        tokens = tokenToReceive - fairlaunch.totalsellTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  adds the liquidity of sell token and purchase currency pair and locks the received LP tokens\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     */\\r\\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\\r\\n        if (totalRaised > 0) {\\r\\n            uint256 amountToken;\\r\\n            uint256 amountETH;\\r\\n            uint256 _liquidity;\\r\\n\\r\\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\\r\\n\\r\\n            fairlaunch.token.approve(address(liquidity.router), sellTokenShare);\\r\\n\\r\\n            if (!fundByTokens) {\\r\\n                // Create a DEX pair for this token\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\\r\\n                    value: fundTokenShare\\r\\n                }(\\r\\n                    address(fairlaunch.token),\\r\\n                    sellTokenShare,\\r\\n                    0, // slippage is unavoidable\\r\\n                    0, // slippage is unavoidable\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            } else {\\r\\n                fundToken.approve(address(liquidity.router), fundTokenShare);\\r\\n                // Create a DEX pair for this token\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\\r\\n                    address(fairlaunch.token),\\r\\n                    address(fundToken),\\r\\n                    sellTokenShare,\\r\\n                    fundTokenShare,\\r\\n                    0, // slippage is unavoidable\\r\\n                    0, // slippage is unavoidable\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            }\\r\\n\\r\\n            liquidity.liquidityAdded = fundTokenShare;\\r\\n            address pairAddress = getTokenPair();\\r\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n            uint256 pairBalance = pair.balanceOf(address(this));\\r\\n\\r\\n            pair.approve(liquidity.locker, pairBalance);\\r\\n\\r\\n            IGempadVestingLock(liquidity.locker).lock(\\r\\n                owner(),\\r\\n                pairAddress,\\r\\n                true,\\r\\n                pairBalance,\\r\\n                (block.timestamp + liquidity.lockTime),\\r\\n                'Gempad-FairLaunch'\\r\\n            );\\r\\n\\r\\n            return (amountToken, amountETH, _liquidity);\\r\\n        }\\r\\n\\r\\n        return (0, 0, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  transfer funds\\r\\n     * @dev     .\\r\\n     * @param   _to  .\\r\\n     * @param   _amount  .\\r\\n     */\\r\\n    function _transferFunds(address _to, uint256 _amount) private {\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transfer(_to, _amount);\\r\\n        } else {\\r\\n            payable(_to).transfer(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n     * @return  address[]  .returns path for liquidity tokens\\r\\n     */\\r\\n    function getPathForTokens() internal view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n\\r\\n        path[0] = (fundByTokens) ? address(fundToken) : liquidity.router.WETH();\\r\\n\\r\\n        path[1] = address(fairlaunch.token);\\r\\n\\r\\n        return path;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0db1a557419cd07c3f7fe339c2624b777229db8c51febc12d86b4c8e9b657dd4\",\"license\":\"UNLICENSED\"},\"@gempad/fairlaunch/contracts/GempadWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\n\\r\\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\\r\\n    mapping(address => bool) internal _whitelist;\\r\\n\\r\\n    event WhitelistUpdated(address[] account, address sender);\\r\\n\\r\\n    /**\\r\\n     * @notice  add users to whitelist\\r\\n     * @param   _participants  user addreses\\r\\n     */\\r\\n    function addWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\\r\\n            _whitelist[_participants[i]] = true;\\r\\n        }\\r\\n        emit WhitelistUpdated(_participants, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  remove users from whitelist\\r\\n     * @param   _participants  user addreses\\r\\n     */\\r\\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\\r\\n            _whitelist[_participants[i]] = false;\\r\\n        }\\r\\n        emit WhitelistUpdated(_participants, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param   _address  .\\r\\n     * @return  bool   return the whitelist status of user\\r\\n     */\\r\\n    function isWhitelisted(address _address) public view returns (bool) {\\r\\n        return _whitelist[_address];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0de1673fa6c58dabab9203f49a9e5c20ced520b4d18cab2a3bc8f091f5fec998\",\"license\":\"UNLICENSED\"},\"@gempad/fairlaunch/contracts/interfaces/IERC20Extented.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IERC20Extented is IERC20 {\\r\\n\\r\\n    function decimals() external returns (uint8);\\r\\n}\",\"keccak256\":\"0x6d01f18f7aa17c3bb0456f69b5ea1e9ede804f51c438b3641961dc7b83b13d0f\",\"license\":\"MIT\"},\"@gempad/fairlaunch/contracts/interfaces/IGempadVestingLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IGempadVestingLock {\\r\\n\\r\\n  function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external  payable returns (uint256 id);\\r\\n\\r\\n  function unlock(uint256 lockId) external;\\r\\n\\r\\n  function editLock(\\r\\n    uint256 lockId,\\r\\n    uint256 newAmount,\\r\\n    uint256 newUnlockDate\\r\\n  ) external payable;\\r\\n}\",\"keccak256\":\"0x89dd109edc8e9dfd87897dbd7bce5b35605896e7ee1ad31dcdd91f7a26a68df9\",\"license\":\"MIT\"},\"@gempad/fairlaunch/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n\\r\\n//IUniswapV2Factory.sol\\r\\ninterface IUniswapV2Factory {\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2524e635cce09d03725e1f1d98ea49609fd772d1b7793228d78ceae5cc147145\",\"license\":\"UNLICENSED\"},\"@gempad/fairlaunch/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n//IUniswapV2Pair.sol\\r\\ninterface IUniswapV2Pair {\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x8e27575eeabd09d2904855e02f799a8c1f8980d785d1ee5bb9b2f6b4a3fe45ee\",\"license\":\"UNLICENSED\"},\"@gempad/fairlaunch/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n//IUnisapV2Router02.sol\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x1928cfc4634ac13769345c5f4edac6fa36f667178572790543944e0e263be1e4\",\"license\":\"MIT\"},\"@gempad/services/contracts/ServicePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\n\\r\\ninterface IPayable {\\r\\n    function pay(string memory serviceName) external payable;\\r\\n\\r\\n    function getFee(string memory serviceName) external returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ServicePayer\\r\\n * @dev Implementation of the ServicePayer\\r\\n */\\r\\nabstract contract ServicePayer is Initializable {\\r\\n    function __ServicePayer_init(\\r\\n        address payable receiver,\\r\\n        string memory serviceName\\r\\n    ) public payable onlyInitializing {\\r\\n        IPayable(receiver).pay{ value: msg.value }(serviceName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd4167fa676ef90885db6c3e159cfdf1f4784085d1a587989a41eeb74339f169\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060b95534801561001557600080fd5b50614292806100256000396000f3fe6080604052600436106102845760003560e01c80639d1b464a11610153578063cbecf6b5116100cb578063d54ad2a11161007f578063edac985b11610064578063edac985b146107f8578063ef8a923514610818578063f2fde38b1461083257600080fd5b8063d54ad2a1146107cd578063ea8a1af0146107e357600080fd5b8063cfed032a116100b0578063cfed032a14610783578063d0a2f2c4146107a3578063d506d3fe146107b857600080fd5b8063cbecf6b51461072f578063ccb98ffc1461076357600080fd5b8063acdf4f1811610122578063b9a9f73911610107578063b9a9f739146106d5578063c5c4744c146106f7578063c979b61d1461070d57600080fd5b8063acdf4f181461064d578063b88a802f146106c057600080fd5b80639d1b464a146105ef578063a0355eca14610605578063a35e3aec14610625578063a7e993eb1461063857600080fd5b806348c54b9d11610201578063715018a6116101b55780638da5cb5b1161019a5780638da5cb5b146105115780639134709e1461052f578063944eef421461054257600080fd5b8063715018a6146104dc578063824f3473146104f157600080fd5b806350adcdb7116101e657806350adcdb71461046a578063519dc8d2146104a75780635a5a89e7146104c757600080fd5b806348c54b9d146104405780634bb278f31461045557600080fd5b806323245216116102585780633998c2481161023d5780633998c248146103d057806339a090c9146103e35780633af32abf1461040757600080fd5b80632324521614610394578063392e53cd146103b657600080fd5b8062fed7001461028957806315370598146102bf5780631959a002146102e15780631a6865021461032a575b600080fd5b34801561029557600080fd5b5060b2546102aa90600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b3480156102cb57600080fd5b506102d4610852565b6040516102b69190613937565b3480156102ed57600080fd5b506103156102fc366004613976565b60bd602052600090815260409020805460019091015482565b604080519283526020830191909152016102b6565b34801561033657600080fd5b5060a55460a65460a75460a85460a95461035d946001600160a01b03908116949392169085565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a0016102b6565b3480156103a057600080fd5b506103b46103af366004613a28565b610889565b005b3480156103c257600080fd5b506098546102aa9060ff1681565b6103b46103de366004613bfe565b610a41565b3480156103ef57600080fd5b506103f960995481565b6040519081526020016102b6565b34801561041357600080fd5b506102aa610422366004613976565b6001600160a01b031660009081526065602052604090205460ff1690565b34801561044c57600080fd5b506103b461137e565b34801561046157600080fd5b506103b4611570565b34801561047657600080fd5b5060b25461048f9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102b6565b3480156104b357600080fd5b506103f96104c2366004613976565b611746565b3480156104d357600080fd5b506103f96118e0565b3480156104e857600080fd5b506103b46118f2565b3480156104fd57600080fd5b506103b461050c366004613d2d565b611904565b34801561051d57600080fd5b506033546001600160a01b031661048f565b6103b461053d366004613d46565b611a76565b34801561054e57600080fd5b50609a54609b54609c54609d54609e54609f5460a05460a15460a25460a35460a4546105909a6001600160a01b031699989760ff90811697969594939216908b565b604080516001600160a01b03909c168c5260208c019a909a52988a01979097529415156060890152608088019390935260a087019190915260c086015260e08501526101008401521515610120830152610140820152610160016102b6565b3480156105fb57600080fd5b506103f960ba5481565b34801561061157600080fd5b506103b4610620366004613d76565b611f19565b6103b4610633366004613d98565b612016565b34801561064457600080fd5b506103b4612110565b34801561065957600080fd5b5060aa5460ab5460ac5460ad5460ae5460af5460b05460b1546106839760ff169695949392919088565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016102b6565b3480156106cc57600080fd5b506103b46121ff565b3480156106e157600080fd5b506106ea61231c565b6040516102b69190613e84565b34801561070357600080fd5b506103f960b55481565b34801561071957600080fd5b5061072261237e565b6040516102b69190613e97565b34801561073b57600080fd5b5061031561074a366004613976565b60be602052600090815260409020805460019091015482565b34801561076f57600080fd5b506103b461077e366004613d2d565b612406565b34801561078f57600080fd5b506103b461079e366004613d2d565b61256f565b3480156107af57600080fd5b506106ea6125b5565b3480156107c457600080fd5b506103b4612615565b3480156107d957600080fd5b506103f960b65481565b3480156107ef57600080fd5b506103b4612a47565b34801561080457600080fd5b506103b4610813366004613a28565b612b50565b34801561082457600080fd5b5060b2546107229060ff1681565b34801561083e57600080fd5b506103b461084d366004613976565b612cec565b609f54600090421061088157609f544210801590610871575060a25442105b61087b5750600290565b50600190565b60005b905090565b610891612d79565b805160005b81811015610a035760006001600160a01b03168382815181106108bb576108bb613eab565b60200260200101516001600160a01b03160361091e5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061093457610934613eab565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166109a75760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c697374656400006044820152606401610915565b6000606560008584815181106109bf576109bf613eab565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806109fb81613ed7565b915050610896565b507f0c5a12c037597c1d2258bba4cf82c514e4e02fa76d7af223e59064e1d87e26aa8233604051610a35929190613ef0565b60405180910390a15050565b600054610100900460ff1615808015610a615750600054600160ff909116105b80610a7b5750303b158015610a7b575060005460ff166001145b610aed5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610915565b6000805460ff191660011790558015610b10576000805461ff0019166101001790555b60985460ff1615610b635760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920696e697469616c697a656400000000000000006044820152606401610915565b610ba2836040518060400160405280601081526020017f47656d706164466169724c61756e636800000000000000000000000000000000815250612016565b609989905560b280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff166001600160a01b0387161515600160a81b908102919091179182905560ff91041615610c2b5760b280547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038816021790555b87610120015115610c8d576113888861014001511115610c8d5760405162461bcd60e51b815260206004820152601960248201527f4d415820726577617264206c696d6974206578636565646564000000000000006044820152606401610915565b428860a00151118015610ca757508760c001518860a00151105b610cf35760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610915565b62093a808860a001518960c00151610d0b9190613f1b565b1115610d595760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206475726174696f6e000000000000000000000000000000006044820152606401610915565b855115610fe057617530876020015110158015610d7d5750620186a0876020015111155b610dc95760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610915565b61c35086602001518860200151610de09190613f34565b118015610e035750620186a086602001518860200151610e009190613f34565b11155b610e755760405162461bcd60e51b815260206004820152603e60248201527f4c6971756964697479202b204275796261636b206d757374206265206772656160448201527f746572207468616e2035302520616e6420657175616c20746f203130302500006064820152608401610915565b603c8660a001511015610ef05760405162461bcd60e51b815260206004820152602160248201527f4d696e696d756d2064656c61792069732061746c656173742031206d696e757460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610915565b61012c8660c001511115610f6c5760405162461bcd60e51b815260206004820152602660248201527f4d6178696d756d2064656c617920726573746972696374656420746f2035206d60448201527f696e7574657300000000000000000000000000000000000000000000000000006064820152608401610915565b620186a086602001518960400151610f849190613f47565b610f8e9190613f5e565b60408701819052865160aa805460ff1916911515919091179055602087015160ab5560ac55606086015160ad55608086015160ae5560a086015160af5560c086015160b05560e086015160b155611048565b61c3508760200151118015610ffc5750620186a0876020015111155b6110485760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610915565b61012c876040015110156110c45760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d652063616e2774206265206c657373207468616e2035206d60448201527f696e7574730000000000000000000000000000000000000000000000000000006064820152608401610915565b865160a580546001600160a01b03199081166001600160a01b03938416179091556020808a015160a6556040808b015160a7556060808c015160a8805486169187169190911790556080808d015160a9558d51609a8054909616961695909517909355908b0151609b558a0151609c55890151609d805460ff1990811692151592909217905590890151609e5560a0808a0151609f5560c08a0151905560e089015160a15561010089015160a25561012089015160a3805490921690151517905561014088015160a4558361119d578760a001516111a3565b8760c001515b60a25560b280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000008615150217905560b380546001600160a01b0319166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f47656d706164466169724c61756e636800000000000000000000000000000000604482015263ed1eee68906064016020604051808303816000875af115801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190613f80565b60b48190556020890151600091620186a0916112cb9190613f47565b6112d59190613f5e565b9050620186a08860200151828b602001516112f09190613f1b565b6112fa9190613f47565b6113049190613f5e565b89602001516113139190613f34565b60b85561131f83612dd3565b506098805460ff191660011790558015611373576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611386612e25565b33600081815260bd602052604081209161139f90611746565b9050600260b25460ff1660038111156113ba576113ba613921565b036114075760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff16600381111561142057611420613921565b1461146d5760405162461bcd60e51b815260206004820152601560248201527f53616c65206973206e6f742066696e616c697a656400000000000000000000006044820152606401610915565b8081836001015461147e9190613f34565b11156114cc5760405162461bcd60e51b815260206004820152601260248201527f416c6c20746f6b656e7320636c61696d656400000000000000000000000000006044820152606401610915565b8082600101819055508060b660008282546114e79190613f34565b9091555050609a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190613f99565b50505061156e6001606655565b565b611578612d79565b60a0544211801561158d5750609c5460b55410155b8061159c5750609c5460b55410155b6115e85760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610915565b600360b25460ff16600381111561160157611601613921565b0361164e5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a6564000000000000000000006044820152606401610915565b60b2805460ff191660031790554260a15560b45460b554600091620186a0916116779190613f47565b6116819190613f5e565b60a35490915060ff1680156116985750600060b754115b156116d457620186a0609a600a01548260b5546116b59190613f1b565b6116bf9190613f47565b6116c99190613f5e565b60b9556116d4612e7e565b60aa5460ff161561171a5760ab5460b954620186a091906116f59084613f34565b60b5546117029190613f1b565b61170c9190613f47565b6117169190613f5e565b60ac555b611722612f0c565b50505061172d6133fb565b60b354611743906001600160a01b031682613474565b50565b6000600360b25460ff16600381111561176157611761613921565b146117d45760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e2077696c6c20626520616c6c6f636174656420616674657220666960448201527f6e616c697a652073616c650000000000000000000000000000000000000000006064820152608401610915565b6001600160a01b038216600090815260bd6020908152604091829020825180840190935280548352600101549082015260b254600160a81b900460ff1661183c5760ba548151670de0b6b3a76400009161182d91613f47565b6118379190613f5e565b6118d9565b60b260019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190613fb6565b6118c090600a6140bd565b60ba5482516118cf9190613f47565b6118d99190613f5e565b9392505050565b60ad5460ac5460009161088491613f1b565b6118fa612d79565b61156e6000612dd3565b61190c612d79565b61138881111561195e5760405162461bcd60e51b815260206004820152601f60248201527f5265776172642063616e27742062652067726561746572207468616e203525006044820152606401610915565b600260b25460ff16600381111561197757611977613921565b036119c45760405162461bcd60e51b815260206004820152601160248201527f53616c652069732063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff1660038111156119dd576119dd613921565b03611a2a5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610915565b60a4819055609954604080519182526020820183905233908201527f181e51c2c4be39960ada2859bc82909bc6fee249cd66de0de5b41126ef606dfa906060015b60405180910390a150565b611a7e612e25565b33600090815260bd60205260409020609f544210801590611aa1575060a0544211155b611aed5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610915565b60a254421015611b56573360009081526065602052604090205460ff16611b565760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610915565b609d5460ff1615611bbf57609e548154611b71908590613f34565b1115611bbf5760405162461bcd60e51b815260206004820152601960248201527f4d6178696d756d20627579206c696d69742072656163686564000000000000006044820152606401610915565b8054611c085760bb80546001810182556000919091527f28afdd85196b637a3c64ff1f53af1ad8de145cf652297ede1b38f2cbd6a4b4bf0180546001600160a01b031916331790555b82816000016000828254611c1c9190613f34565b925050819055508260b56000828254611c359190613f34565b909155505060b254600160a81b900460ff16611c725760b554609b54611c6390670de0b6b3a7640000613f47565b611c6d9190613f5e565b611d10565b60b55460b260019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cee9190613fb6565b611cf990600a6140bd565b609b54611d069190613f47565b611d109190613f5e565b60ba5560a35460ff1615611dc9576001600160a01b03821615611dc9576001600160a01b038216600090815260be602052604090208054611d975760bc80546001810182556000919091527f6f1f0041084f67ced174808484bd05851de94443d775585e9d86d4c2589dba590180546001600160a01b0319166001600160a01b0385161790555b8360b76000828254611da99190613f34565b9091555050805484908290600090611dc2908490613f34565b9091555050505b60b254600160a81b900460ff1615611e795760b2546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e739190613f99565b50611ec8565b823414611ec85760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610915565b6099546040805191825233602083015281018490527f988c30a8baeec0ea77c156f23bb177d68f0e44bef8b9b62ff0acf0b687568a1e9060600160405180910390a150611f156001606655565b5050565b611f21612d79565b609f544210611f725760405162461bcd60e51b815260206004820152601460248201527f53616c6520616c726561647920737461727465640000000000000000000000006044820152606401610915565b4282118015611f8057508082105b611fcc5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610915565b609f82905560a0819055609954604080519182526020820184905281018290527fe42616d35e911a9bddf11a60118c262326e1ba63e75cec829e684104d35e1fa690606001610a35565b600054610100900460ff166120935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610915565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e9034906120da9085906004016140cc565b6000604051808303818588803b1580156120f357600080fd5b505af1158015612107573d6000803e3d6000fd5b50505050505050565b33600090815260bd6020526040902060a05442108015906121345750609c5460b554105b806121555750600260b25460ff16600381111561215357612153613921565b145b6121a15760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f77656400000000000000000000006044820152606401610915565b80546121ef5760405162461bcd60e51b815260206004820152601560248201527f5573657220686173206e6f7420696e76657374656400000000000000000000006044820152606401610915565b805460008255611f153382613474565b33600090815260be60205260409020600360b25460ff16600381111561222757612227613921565b146122745760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f7420636c6f73656400000000000000000000000000006044820152606401610915565b60008160010154116122c85760405162461bcd60e51b815260206004820152601460248201527f55736572206973206e6f742072656665727265720000000000000000000000006044820152606401610915565b60018101805460009091556122dd3382613474565b6099546040805191825233602083015281018290527f555dadf6d4bd8ef8ef65bbcb124e420f010637bb1b9ad324ddb46d36447c044090606001610a35565b606060bc80548060200260200160405190810160405280929190818152602001828054801561237457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612356575b5050505050905090565b609f54600090421080156123a95750600260b25460ff1660038111156123a6576123a6613921565b14155b61088157600260b25460ff1660038111156123c6576123c6613921565b141580156123eb5750600360b25460ff1660038111156123e8576123e8613921565b14155b80156123f85750609f5442115b61087b575060b25460ff1690565b61240e612d79565b600260b25460ff16600381111561242757612427613921565b036124745760405162461bcd60e51b815260206004820152601160248201527f53616c652069732063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff16600381111561248d5761248d613921565b036124da5760405162461bcd60e51b815260206004820152600e60248201527f53616c6520697320636c6f7365640000000000000000000000000000000000006044820152606401610915565b609f54811161252b5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606401610915565b60a08190556099546040805191825242602083015281018290527f3928cf6151ddddc3f9d7c3f47bfb70974af99567660feb5ebc57b660d4e0119a90606001611a6b565b612577612d79565b60a281905560995460408051918252602082018390527f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c19101611a6b565b606060bb805480602002602001604051908101604052809291908181526020018280548015612374576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311612356575050505050905090565b600360b25460ff16600381111561262e5761262e613921565b1461267b5760405162461bcd60e51b815260206004820152601260248201527f53616c6520686173206e6f7420656e64656400000000000000000000000000006044820152606401610915565b60b05460a15461268b9042613f1b565b10156126d95760405162461bcd60e51b815260206004820152601660248201527f4275796261636b206e6f7420696e697461696c7a6564000000000000000000006044820152606401610915565b60af5460b1546126e99042613f1b565b10156127375760405162461bcd60e51b815260206004820152601960248201527f4275796261636b2064656c6179206e6f742072656163686564000000000000006044820152606401610915565b60ac5460ad541061278a5760405162461bcd60e51b815260206004820152601160248201527f496e737566666369656e742066756e64730000000000000000000000000000006044820152606401610915565b600061279461353e565b60ae5460ad5460ac5492935060609282916127ae91613f1b565b106127bb5760ae546127cb565b60ad5460ac546127cb9190613f1b565b90508060aa60030160008282546127e29190613f34565b90915550504260b15560b254600160a81b900460ff161561290c5760b25460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052610100909204169063095ea7b3906044016020604051808303816000875af1158015612857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287b9190613f99565b5060a5546001600160a01b03166338ed1739826000863061289e42610708613f34565b6040518663ffffffff1660e01b81526004016128be95949392919061411a565b6000604051808303816000875af11580156128dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129059190810190614156565b9150612997565b60a5546001600160a01b0316637ff36ab5826000863061292e42610708613f34565b6040518663ffffffff1660e01b815260040161294d94939291906141dc565b60006040518083038185885af115801561296b573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526129949190810190614156565b91505b609a5482516001600160a01b039091169063a9059cbb9061dead90859060019081106129c5576129c5613eab565b60200260200101516040518363ffffffff1660e01b81526004016129fe9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a419190613f99565b50505050565b612a4f612d79565b600260b25460ff166003811115612a6857612a68613921565b03612ab55760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792063616e63656c6c6564000000000000000000006044820152606401610915565b600360b25460ff166003811115612ace57612ace613921565b03612b415760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a65000000000000000000000000000000000000000000000000006064820152608401610915565b60b2805460ff19166002179055565b612b58612d79565b805160005b81811015610a035760006001600160a01b0316838281518110612b8257612b82613eab565b60200260200101516001600160a01b031603612be05760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610915565b60656000848381518110612bf657612bf6613eab565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615612c905760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610915565b600160656000858481518110612ca857612ca8613eab565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612ce481613ed7565b915050612b5d565b612cf4612d79565b6001600160a01b038116612d705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610915565b61174381612dd3565b6033546001600160a01b0316331461156e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610915565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260665403612e775760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610915565b6002606655565b60bc5480156117435760005b81811015611f1557600060be600060bc8481548110612eab57612eab613eab565b60009182526020808320909101546001600160a01b03168352820192909252604001812060b754815460b9549294509091612ee69190613f47565b612ef09190613f5e565b6001909201919091555080612f0481613ed7565b915050612e8a565b60008060008060b55411156133ef576000806000806000612f2b61365b565b609a5460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052939550919350169063095ea7b3906044016020604051808303816000875af1158015612f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa99190613f99565b5060b254600160a81b900460ff166130755760a554609a546040517ff305d7190000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810184905260006044820181905260648201523060848201524260a482015291169063f305d71990849060c40160606040518083038185885af1158015613044573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906130699190614211565b919650945092506131c0565b60b25460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101859052610100909204169063095ea7b3906044016020604051808303816000875af11580156130cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f39190613f99565b5060a554609a5460b2546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015261010090910482166024820152604481018490526064810185905260006084820181905260a48201523060c48201524260e482015291169063e8e3370090610104016060604051808303816000875af1158015613194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b89190614211565b919650945092505b60a982905560006131cf6136d6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132589190613f80565b60a85460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925083169063095ea7b3906044016020604051808303816000875af11580156132ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d19190613f99565b5060a8546001600160a01b031663072793576132f56033546001600160a01b031690565b8560018560a5600201544261330a9190613f34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015290151560448401526064830152608482015260c060a4820152601160c48201527f47656d7061642d466169724c61756e636800000000000000000000000000000060e4820152610104016020604051808303816000875af11580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc9190613f80565b50969a9599509397509395505050505050565b50600092839250829150565b613403612d79565b6000620186a060b45460b5546134199190613f47565b6134239190613f5e565b60a95460b9549192506000916134399084613f34565b6134439190613f34565b60b5546134509190613f1b565b60aa5490915060ff161561346e5760ac5461346b9082613f1b565b90505b611f1533825b60b254600160a81b900460ff16156135085760b25460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af11580156134df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135039190613f99565b505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015613503573d6000803e3d6000fd5b604080516002808252606080830184529260009291906020830190803683370190505060b254909150600160a81b900460ff166135e85760a554604080516315ab88c960e31b815290516001600160a01b039092169163ad5c4648916004808201926020929091908290030181865afa1580156135bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e3919061423f565b6135fa565b60b25461010090046001600160a01b03165b8160008151811061360d5761360d613eab565b6001600160a01b039283166020918202929092010152609a5482519116908290600190811061363e5761363e613eab565b6001600160a01b0390921660209283029190910190910152919050565b6000806000620186a060b45460b5546136749190613f47565b61367e9190613f5e565b9050600060b954826136909190613f34565b60b55461369d9190613f1b565b60a654909150620186a0906136b29083613f47565b6136bc9190613f5e565b609b5460b8549195506136ce91613f1b565b925050509091565b60b254600090600160a81b900460ff16156137f05760a5546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa158015613735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613759919061423f565b60b254609a546040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0361010090930483166004820152908216602482015291169063e6a43905906044015b602060405180830381865afa1580156137cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061423f565b60a5546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa15801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e919061423f565b60a554604080516315ab88c960e31b815290516001600160a01b039384169363e6a4390593169163ad5c46489160048083019260209291908290030181865afa1580156138af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d3919061423f565b609a5460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039283166004820152911660248201526044016137af565b634e487b7160e01b600052602160045260246000fd5b602081016003831061394b5761394b613921565b91905290565b6001600160a01b038116811461174357600080fd5b803561397181613951565b919050565b60006020828403121561398857600080fd5b81356118d981613951565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156139cd576139cd613993565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156139fc576139fc613993565b604052919050565b600067ffffffffffffffff821115613a1e57613a1e613993565b5060051b60200190565b60006020808385031215613a3b57600080fd5b823567ffffffffffffffff811115613a5257600080fd5b8301601f81018513613a6357600080fd5b8035613a76613a7182613a04565b6139d3565b81815260059190911b82018301908381019087831115613a9557600080fd5b928401925b82841015613abc578335613aad81613951565b82529284019290840190613a9a565b979650505050505050565b801515811461174357600080fd5b803561397181613ac7565b600060a08284031215613af257600080fd5b60405160a0810181811067ffffffffffffffff82111715613b1557613b15613993565b6040529050808235613b2681613951565b8082525060208301356020820152604083013560408201526060830135613b4c81613951565b6060820152608092830135920191909152919050565b6000610100808385031215613b7657600080fd5b6040519081019067ffffffffffffffff82118183101715613b9957613b99613993565b8160405280925083359150613bad82613ac7565b8181526020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152505092915050565b600080600080600080600080888a036103a0811215613c1c57600080fd5b8935985061016080601f1983011215613c3457600080fd5b613c3c6139a9565b9150613c4a60208c01613966565b825260408b0135602083015260608b01356040830152613c6c60808c01613ad5565b606083015260a08b0135608083015260c08b013560a083015260e08b013560c0830152610100808c013560e0840152610120808d0135828501526101409150613cb6828e01613ad5565b90840152908b0135908201529650613cd28a6101808b01613ae0565b9550613ce28a6102208b01613b62565b9450613cf16103208a01613966565b9350613d006103408a01613ad5565b9250613d0f6103608a01613966565b9150613d1e6103808a01613966565b90509295985092959890939650565b600060208284031215613d3f57600080fd5b5035919050565b60008060408385031215613d5957600080fd5b823591506020830135613d6b81613951565b809150509250929050565b60008060408385031215613d8957600080fd5b50508035926020909101359150565b60008060408385031215613dab57600080fd5b8235613db681613951565b915060208381013567ffffffffffffffff80821115613dd457600080fd5b818601915086601f830112613de857600080fd5b813581811115613dfa57613dfa613993565b613e0c601f8201601f191685016139d3565b91508082528784828501011115613e2257600080fd5b80848401858401376000848284010152508093505050509250929050565b600081518084526020808501945080840160005b83811015613e795781516001600160a01b031687529582019590820190600101613e54565b509495945050505050565b6020815260006118d96020830184613e40565b602081016004831061394b5761394b613921565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613ee957613ee9613ec1565b5060010190565b604081526000613f036040830185613e40565b90506001600160a01b03831660208301529392505050565b81810381811115613f2e57613f2e613ec1565b92915050565b80820180821115613f2e57613f2e613ec1565b8082028115828204841417613f2e57613f2e613ec1565b600082613f7b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613f9257600080fd5b5051919050565b600060208284031215613fab57600080fd5b81516118d981613ac7565b600060208284031215613fc857600080fd5b815160ff811681146118d957600080fd5b600181815b80851115614014578160001904821115613ffa57613ffa613ec1565b8085161561400757918102915b93841c9390800290613fde565b509250929050565b60008261402b57506001613f2e565b8161403857506000613f2e565b816001811461404e576002811461405857614074565b6001915050613f2e565b60ff84111561406957614069613ec1565b50506001821b613f2e565b5060208310610133831016604e8410600b8410161715614097575081810a613f2e565b6140a18383613fd9565b80600019048211156140b5576140b5613ec1565b029392505050565b60006118d960ff84168361401c565b600060208083528351808285015260005b818110156140f9578581018301518582016040015282016140dd565b506000604082860101526040601f19601f8301168501019250505092915050565b85815284602082015260a06040820152600061413960a0830186613e40565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561416957600080fd5b825167ffffffffffffffff81111561418057600080fd5b8301601f8101851361419157600080fd5b805161419f613a7182613a04565b81815260059190911b820183019083810190878311156141be57600080fd5b928401925b82841015613abc578351825292840192908401906141c3565b8481526080602082015260006141f56080830186613e40565b6001600160a01b03949094166040830152506060015292915050565b60008060006060848603121561422657600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561425157600080fd5b81516118d98161395156fea2646970667358221220f470b208a2ce350c19054d94b9efc17eee897f2c602961602cad086f4a7d7ced64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102845760003560e01c80639d1b464a11610153578063cbecf6b5116100cb578063d54ad2a11161007f578063edac985b11610064578063edac985b146107f8578063ef8a923514610818578063f2fde38b1461083257600080fd5b8063d54ad2a1146107cd578063ea8a1af0146107e357600080fd5b8063cfed032a116100b0578063cfed032a14610783578063d0a2f2c4146107a3578063d506d3fe146107b857600080fd5b8063cbecf6b51461072f578063ccb98ffc1461076357600080fd5b8063acdf4f1811610122578063b9a9f73911610107578063b9a9f739146106d5578063c5c4744c146106f7578063c979b61d1461070d57600080fd5b8063acdf4f181461064d578063b88a802f146106c057600080fd5b80639d1b464a146105ef578063a0355eca14610605578063a35e3aec14610625578063a7e993eb1461063857600080fd5b806348c54b9d11610201578063715018a6116101b55780638da5cb5b1161019a5780638da5cb5b146105115780639134709e1461052f578063944eef421461054257600080fd5b8063715018a6146104dc578063824f3473146104f157600080fd5b806350adcdb7116101e657806350adcdb71461046a578063519dc8d2146104a75780635a5a89e7146104c757600080fd5b806348c54b9d146104405780634bb278f31461045557600080fd5b806323245216116102585780633998c2481161023d5780633998c248146103d057806339a090c9146103e35780633af32abf1461040757600080fd5b80632324521614610394578063392e53cd146103b657600080fd5b8062fed7001461028957806315370598146102bf5780631959a002146102e15780631a6865021461032a575b600080fd5b34801561029557600080fd5b5060b2546102aa90600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b3480156102cb57600080fd5b506102d4610852565b6040516102b69190613937565b3480156102ed57600080fd5b506103156102fc366004613976565b60bd602052600090815260409020805460019091015482565b604080519283526020830191909152016102b6565b34801561033657600080fd5b5060a55460a65460a75460a85460a95461035d946001600160a01b03908116949392169085565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a0016102b6565b3480156103a057600080fd5b506103b46103af366004613a28565b610889565b005b3480156103c257600080fd5b506098546102aa9060ff1681565b6103b46103de366004613bfe565b610a41565b3480156103ef57600080fd5b506103f960995481565b6040519081526020016102b6565b34801561041357600080fd5b506102aa610422366004613976565b6001600160a01b031660009081526065602052604090205460ff1690565b34801561044c57600080fd5b506103b461137e565b34801561046157600080fd5b506103b4611570565b34801561047657600080fd5b5060b25461048f9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102b6565b3480156104b357600080fd5b506103f96104c2366004613976565b611746565b3480156104d357600080fd5b506103f96118e0565b3480156104e857600080fd5b506103b46118f2565b3480156104fd57600080fd5b506103b461050c366004613d2d565b611904565b34801561051d57600080fd5b506033546001600160a01b031661048f565b6103b461053d366004613d46565b611a76565b34801561054e57600080fd5b50609a54609b54609c54609d54609e54609f5460a05460a15460a25460a35460a4546105909a6001600160a01b031699989760ff90811697969594939216908b565b604080516001600160a01b03909c168c5260208c019a909a52988a01979097529415156060890152608088019390935260a087019190915260c086015260e08501526101008401521515610120830152610140820152610160016102b6565b3480156105fb57600080fd5b506103f960ba5481565b34801561061157600080fd5b506103b4610620366004613d76565b611f19565b6103b4610633366004613d98565b612016565b34801561064457600080fd5b506103b4612110565b34801561065957600080fd5b5060aa5460ab5460ac5460ad5460ae5460af5460b05460b1546106839760ff169695949392919088565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016102b6565b3480156106cc57600080fd5b506103b46121ff565b3480156106e157600080fd5b506106ea61231c565b6040516102b69190613e84565b34801561070357600080fd5b506103f960b55481565b34801561071957600080fd5b5061072261237e565b6040516102b69190613e97565b34801561073b57600080fd5b5061031561074a366004613976565b60be602052600090815260409020805460019091015482565b34801561076f57600080fd5b506103b461077e366004613d2d565b612406565b34801561078f57600080fd5b506103b461079e366004613d2d565b61256f565b3480156107af57600080fd5b506106ea6125b5565b3480156107c457600080fd5b506103b4612615565b3480156107d957600080fd5b506103f960b65481565b3480156107ef57600080fd5b506103b4612a47565b34801561080457600080fd5b506103b4610813366004613a28565b612b50565b34801561082457600080fd5b5060b2546107229060ff1681565b34801561083e57600080fd5b506103b461084d366004613976565b612cec565b609f54600090421061088157609f544210801590610871575060a25442105b61087b5750600290565b50600190565b60005b905090565b610891612d79565b805160005b81811015610a035760006001600160a01b03168382815181106108bb576108bb613eab565b60200260200101516001600160a01b03160361091e5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061093457610934613eab565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166109a75760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c697374656400006044820152606401610915565b6000606560008584815181106109bf576109bf613eab565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806109fb81613ed7565b915050610896565b507f0c5a12c037597c1d2258bba4cf82c514e4e02fa76d7af223e59064e1d87e26aa8233604051610a35929190613ef0565b60405180910390a15050565b600054610100900460ff1615808015610a615750600054600160ff909116105b80610a7b5750303b158015610a7b575060005460ff166001145b610aed5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610915565b6000805460ff191660011790558015610b10576000805461ff0019166101001790555b60985460ff1615610b635760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920696e697469616c697a656400000000000000006044820152606401610915565b610ba2836040518060400160405280601081526020017f47656d706164466169724c61756e636800000000000000000000000000000000815250612016565b609989905560b280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff166001600160a01b0387161515600160a81b908102919091179182905560ff91041615610c2b5760b280547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038816021790555b87610120015115610c8d576113888861014001511115610c8d5760405162461bcd60e51b815260206004820152601960248201527f4d415820726577617264206c696d6974206578636565646564000000000000006044820152606401610915565b428860a00151118015610ca757508760c001518860a00151105b610cf35760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610915565b62093a808860a001518960c00151610d0b9190613f1b565b1115610d595760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206475726174696f6e000000000000000000000000000000006044820152606401610915565b855115610fe057617530876020015110158015610d7d5750620186a0876020015111155b610dc95760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610915565b61c35086602001518860200151610de09190613f34565b118015610e035750620186a086602001518860200151610e009190613f34565b11155b610e755760405162461bcd60e51b815260206004820152603e60248201527f4c6971756964697479202b204275796261636b206d757374206265206772656160448201527f746572207468616e2035302520616e6420657175616c20746f203130302500006064820152608401610915565b603c8660a001511015610ef05760405162461bcd60e51b815260206004820152602160248201527f4d696e696d756d2064656c61792069732061746c656173742031206d696e757460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610915565b61012c8660c001511115610f6c5760405162461bcd60e51b815260206004820152602660248201527f4d6178696d756d2064656c617920726573746972696374656420746f2035206d60448201527f696e7574657300000000000000000000000000000000000000000000000000006064820152608401610915565b620186a086602001518960400151610f849190613f47565b610f8e9190613f5e565b60408701819052865160aa805460ff1916911515919091179055602087015160ab5560ac55606086015160ad55608086015160ae5560a086015160af5560c086015160b05560e086015160b155611048565b61c3508760200151118015610ffc5750620186a0876020015111155b6110485760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610915565b61012c876040015110156110c45760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d652063616e2774206265206c657373207468616e2035206d60448201527f696e7574730000000000000000000000000000000000000000000000000000006064820152608401610915565b865160a580546001600160a01b03199081166001600160a01b03938416179091556020808a015160a6556040808b015160a7556060808c015160a8805486169187169190911790556080808d015160a9558d51609a8054909616961695909517909355908b0151609b558a0151609c55890151609d805460ff1990811692151592909217905590890151609e5560a0808a0151609f5560c08a0151905560e089015160a15561010089015160a25561012089015160a3805490921690151517905561014088015160a4558361119d578760a001516111a3565b8760c001515b60a25560b280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000008615150217905560b380546001600160a01b0319166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f47656d706164466169724c61756e636800000000000000000000000000000000604482015263ed1eee68906064016020604051808303816000875af115801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190613f80565b60b48190556020890151600091620186a0916112cb9190613f47565b6112d59190613f5e565b9050620186a08860200151828b602001516112f09190613f1b565b6112fa9190613f47565b6113049190613f5e565b89602001516113139190613f34565b60b85561131f83612dd3565b506098805460ff191660011790558015611373576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611386612e25565b33600081815260bd602052604081209161139f90611746565b9050600260b25460ff1660038111156113ba576113ba613921565b036114075760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff16600381111561142057611420613921565b1461146d5760405162461bcd60e51b815260206004820152601560248201527f53616c65206973206e6f742066696e616c697a656400000000000000000000006044820152606401610915565b8081836001015461147e9190613f34565b11156114cc5760405162461bcd60e51b815260206004820152601260248201527f416c6c20746f6b656e7320636c61696d656400000000000000000000000000006044820152606401610915565b8082600101819055508060b660008282546114e79190613f34565b9091555050609a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190613f99565b50505061156e6001606655565b565b611578612d79565b60a0544211801561158d5750609c5460b55410155b8061159c5750609c5460b55410155b6115e85760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610915565b600360b25460ff16600381111561160157611601613921565b0361164e5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a6564000000000000000000006044820152606401610915565b60b2805460ff191660031790554260a15560b45460b554600091620186a0916116779190613f47565b6116819190613f5e565b60a35490915060ff1680156116985750600060b754115b156116d457620186a0609a600a01548260b5546116b59190613f1b565b6116bf9190613f47565b6116c99190613f5e565b60b9556116d4612e7e565b60aa5460ff161561171a5760ab5460b954620186a091906116f59084613f34565b60b5546117029190613f1b565b61170c9190613f47565b6117169190613f5e565b60ac555b611722612f0c565b50505061172d6133fb565b60b354611743906001600160a01b031682613474565b50565b6000600360b25460ff16600381111561176157611761613921565b146117d45760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e2077696c6c20626520616c6c6f636174656420616674657220666960448201527f6e616c697a652073616c650000000000000000000000000000000000000000006064820152608401610915565b6001600160a01b038216600090815260bd6020908152604091829020825180840190935280548352600101549082015260b254600160a81b900460ff1661183c5760ba548151670de0b6b3a76400009161182d91613f47565b6118379190613f5e565b6118d9565b60b260019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190613fb6565b6118c090600a6140bd565b60ba5482516118cf9190613f47565b6118d99190613f5e565b9392505050565b60ad5460ac5460009161088491613f1b565b6118fa612d79565b61156e6000612dd3565b61190c612d79565b61138881111561195e5760405162461bcd60e51b815260206004820152601f60248201527f5265776172642063616e27742062652067726561746572207468616e203525006044820152606401610915565b600260b25460ff16600381111561197757611977613921565b036119c45760405162461bcd60e51b815260206004820152601160248201527f53616c652069732063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff1660038111156119dd576119dd613921565b03611a2a5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610915565b60a4819055609954604080519182526020820183905233908201527f181e51c2c4be39960ada2859bc82909bc6fee249cd66de0de5b41126ef606dfa906060015b60405180910390a150565b611a7e612e25565b33600090815260bd60205260409020609f544210801590611aa1575060a0544211155b611aed5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610915565b60a254421015611b56573360009081526065602052604090205460ff16611b565760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610915565b609d5460ff1615611bbf57609e548154611b71908590613f34565b1115611bbf5760405162461bcd60e51b815260206004820152601960248201527f4d6178696d756d20627579206c696d69742072656163686564000000000000006044820152606401610915565b8054611c085760bb80546001810182556000919091527f28afdd85196b637a3c64ff1f53af1ad8de145cf652297ede1b38f2cbd6a4b4bf0180546001600160a01b031916331790555b82816000016000828254611c1c9190613f34565b925050819055508260b56000828254611c359190613f34565b909155505060b254600160a81b900460ff16611c725760b554609b54611c6390670de0b6b3a7640000613f47565b611c6d9190613f5e565b611d10565b60b55460b260019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cee9190613fb6565b611cf990600a6140bd565b609b54611d069190613f47565b611d109190613f5e565b60ba5560a35460ff1615611dc9576001600160a01b03821615611dc9576001600160a01b038216600090815260be602052604090208054611d975760bc80546001810182556000919091527f6f1f0041084f67ced174808484bd05851de94443d775585e9d86d4c2589dba590180546001600160a01b0319166001600160a01b0385161790555b8360b76000828254611da99190613f34565b9091555050805484908290600090611dc2908490613f34565b9091555050505b60b254600160a81b900460ff1615611e795760b2546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e739190613f99565b50611ec8565b823414611ec85760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610915565b6099546040805191825233602083015281018490527f988c30a8baeec0ea77c156f23bb177d68f0e44bef8b9b62ff0acf0b687568a1e9060600160405180910390a150611f156001606655565b5050565b611f21612d79565b609f544210611f725760405162461bcd60e51b815260206004820152601460248201527f53616c6520616c726561647920737461727465640000000000000000000000006044820152606401610915565b4282118015611f8057508082105b611fcc5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610915565b609f82905560a0819055609954604080519182526020820184905281018290527fe42616d35e911a9bddf11a60118c262326e1ba63e75cec829e684104d35e1fa690606001610a35565b600054610100900460ff166120935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610915565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e9034906120da9085906004016140cc565b6000604051808303818588803b1580156120f357600080fd5b505af1158015612107573d6000803e3d6000fd5b50505050505050565b33600090815260bd6020526040902060a05442108015906121345750609c5460b554105b806121555750600260b25460ff16600381111561215357612153613921565b145b6121a15760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f77656400000000000000000000006044820152606401610915565b80546121ef5760405162461bcd60e51b815260206004820152601560248201527f5573657220686173206e6f7420696e76657374656400000000000000000000006044820152606401610915565b805460008255611f153382613474565b33600090815260be60205260409020600360b25460ff16600381111561222757612227613921565b146122745760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f7420636c6f73656400000000000000000000000000006044820152606401610915565b60008160010154116122c85760405162461bcd60e51b815260206004820152601460248201527f55736572206973206e6f742072656665727265720000000000000000000000006044820152606401610915565b60018101805460009091556122dd3382613474565b6099546040805191825233602083015281018290527f555dadf6d4bd8ef8ef65bbcb124e420f010637bb1b9ad324ddb46d36447c044090606001610a35565b606060bc80548060200260200160405190810160405280929190818152602001828054801561237457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612356575b5050505050905090565b609f54600090421080156123a95750600260b25460ff1660038111156123a6576123a6613921565b14155b61088157600260b25460ff1660038111156123c6576123c6613921565b141580156123eb5750600360b25460ff1660038111156123e8576123e8613921565b14155b80156123f85750609f5442115b61087b575060b25460ff1690565b61240e612d79565b600260b25460ff16600381111561242757612427613921565b036124745760405162461bcd60e51b815260206004820152601160248201527f53616c652069732063616e63656c6c65640000000000000000000000000000006044820152606401610915565b600360b25460ff16600381111561248d5761248d613921565b036124da5760405162461bcd60e51b815260206004820152600e60248201527f53616c6520697320636c6f7365640000000000000000000000000000000000006044820152606401610915565b609f54811161252b5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606401610915565b60a08190556099546040805191825242602083015281018290527f3928cf6151ddddc3f9d7c3f47bfb70974af99567660feb5ebc57b660d4e0119a90606001611a6b565b612577612d79565b60a281905560995460408051918252602082018390527f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c19101611a6b565b606060bb805480602002602001604051908101604052809291908181526020018280548015612374576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311612356575050505050905090565b600360b25460ff16600381111561262e5761262e613921565b1461267b5760405162461bcd60e51b815260206004820152601260248201527f53616c6520686173206e6f7420656e64656400000000000000000000000000006044820152606401610915565b60b05460a15461268b9042613f1b565b10156126d95760405162461bcd60e51b815260206004820152601660248201527f4275796261636b206e6f7420696e697461696c7a6564000000000000000000006044820152606401610915565b60af5460b1546126e99042613f1b565b10156127375760405162461bcd60e51b815260206004820152601960248201527f4275796261636b2064656c6179206e6f742072656163686564000000000000006044820152606401610915565b60ac5460ad541061278a5760405162461bcd60e51b815260206004820152601160248201527f496e737566666369656e742066756e64730000000000000000000000000000006044820152606401610915565b600061279461353e565b60ae5460ad5460ac5492935060609282916127ae91613f1b565b106127bb5760ae546127cb565b60ad5460ac546127cb9190613f1b565b90508060aa60030160008282546127e29190613f34565b90915550504260b15560b254600160a81b900460ff161561290c5760b25460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052610100909204169063095ea7b3906044016020604051808303816000875af1158015612857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287b9190613f99565b5060a5546001600160a01b03166338ed1739826000863061289e42610708613f34565b6040518663ffffffff1660e01b81526004016128be95949392919061411a565b6000604051808303816000875af11580156128dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129059190810190614156565b9150612997565b60a5546001600160a01b0316637ff36ab5826000863061292e42610708613f34565b6040518663ffffffff1660e01b815260040161294d94939291906141dc565b60006040518083038185885af115801561296b573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526129949190810190614156565b91505b609a5482516001600160a01b039091169063a9059cbb9061dead90859060019081106129c5576129c5613eab565b60200260200101516040518363ffffffff1660e01b81526004016129fe9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a419190613f99565b50505050565b612a4f612d79565b600260b25460ff166003811115612a6857612a68613921565b03612ab55760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792063616e63656c6c6564000000000000000000006044820152606401610915565b600360b25460ff166003811115612ace57612ace613921565b03612b415760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a65000000000000000000000000000000000000000000000000006064820152608401610915565b60b2805460ff19166002179055565b612b58612d79565b805160005b81811015610a035760006001600160a01b0316838281518110612b8257612b82613eab565b60200260200101516001600160a01b031603612be05760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610915565b60656000848381518110612bf657612bf6613eab565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615612c905760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610915565b600160656000858481518110612ca857612ca8613eab565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612ce481613ed7565b915050612b5d565b612cf4612d79565b6001600160a01b038116612d705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610915565b61174381612dd3565b6033546001600160a01b0316331461156e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610915565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260665403612e775760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610915565b6002606655565b60bc5480156117435760005b81811015611f1557600060be600060bc8481548110612eab57612eab613eab565b60009182526020808320909101546001600160a01b03168352820192909252604001812060b754815460b9549294509091612ee69190613f47565b612ef09190613f5e565b6001909201919091555080612f0481613ed7565b915050612e8a565b60008060008060b55411156133ef576000806000806000612f2b61365b565b609a5460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052939550919350169063095ea7b3906044016020604051808303816000875af1158015612f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa99190613f99565b5060b254600160a81b900460ff166130755760a554609a546040517ff305d7190000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810184905260006044820181905260648201523060848201524260a482015291169063f305d71990849060c40160606040518083038185885af1158015613044573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906130699190614211565b919650945092506131c0565b60b25460a55460405163095ea7b360e01b81526001600160a01b03918216600482015260248101859052610100909204169063095ea7b3906044016020604051808303816000875af11580156130cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f39190613f99565b5060a554609a5460b2546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015261010090910482166024820152604481018490526064810185905260006084820181905260a48201523060c48201524260e482015291169063e8e3370090610104016060604051808303816000875af1158015613194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b89190614211565b919650945092505b60a982905560006131cf6136d6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132589190613f80565b60a85460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925083169063095ea7b3906044016020604051808303816000875af11580156132ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d19190613f99565b5060a8546001600160a01b031663072793576132f56033546001600160a01b031690565b8560018560a5600201544261330a9190613f34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015290151560448401526064830152608482015260c060a4820152601160c48201527f47656d7061642d466169724c61756e636800000000000000000000000000000060e4820152610104016020604051808303816000875af11580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc9190613f80565b50969a9599509397509395505050505050565b50600092839250829150565b613403612d79565b6000620186a060b45460b5546134199190613f47565b6134239190613f5e565b60a95460b9549192506000916134399084613f34565b6134439190613f34565b60b5546134509190613f1b565b60aa5490915060ff161561346e5760ac5461346b9082613f1b565b90505b611f1533825b60b254600160a81b900460ff16156135085760b25460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af11580156134df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135039190613f99565b505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015613503573d6000803e3d6000fd5b604080516002808252606080830184529260009291906020830190803683370190505060b254909150600160a81b900460ff166135e85760a554604080516315ab88c960e31b815290516001600160a01b039092169163ad5c4648916004808201926020929091908290030181865afa1580156135bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e3919061423f565b6135fa565b60b25461010090046001600160a01b03165b8160008151811061360d5761360d613eab565b6001600160a01b039283166020918202929092010152609a5482519116908290600190811061363e5761363e613eab565b6001600160a01b0390921660209283029190910190910152919050565b6000806000620186a060b45460b5546136749190613f47565b61367e9190613f5e565b9050600060b954826136909190613f34565b60b55461369d9190613f1b565b60a654909150620186a0906136b29083613f47565b6136bc9190613f5e565b609b5460b8549195506136ce91613f1b565b925050509091565b60b254600090600160a81b900460ff16156137f05760a5546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa158015613735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613759919061423f565b60b254609a546040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0361010090930483166004820152908216602482015291169063e6a43905906044015b602060405180830381865afa1580156137cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061423f565b60a5546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa15801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e919061423f565b60a554604080516315ab88c960e31b815290516001600160a01b039384169363e6a4390593169163ad5c46489160048083019260209291908290030181865afa1580156138af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d3919061423f565b609a5460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039283166004820152911660248201526044016137af565b634e487b7160e01b600052602160045260246000fd5b602081016003831061394b5761394b613921565b91905290565b6001600160a01b038116811461174357600080fd5b803561397181613951565b919050565b60006020828403121561398857600080fd5b81356118d981613951565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156139cd576139cd613993565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156139fc576139fc613993565b604052919050565b600067ffffffffffffffff821115613a1e57613a1e613993565b5060051b60200190565b60006020808385031215613a3b57600080fd5b823567ffffffffffffffff811115613a5257600080fd5b8301601f81018513613a6357600080fd5b8035613a76613a7182613a04565b6139d3565b81815260059190911b82018301908381019087831115613a9557600080fd5b928401925b82841015613abc578335613aad81613951565b82529284019290840190613a9a565b979650505050505050565b801515811461174357600080fd5b803561397181613ac7565b600060a08284031215613af257600080fd5b60405160a0810181811067ffffffffffffffff82111715613b1557613b15613993565b6040529050808235613b2681613951565b8082525060208301356020820152604083013560408201526060830135613b4c81613951565b6060820152608092830135920191909152919050565b6000610100808385031215613b7657600080fd5b6040519081019067ffffffffffffffff82118183101715613b9957613b99613993565b8160405280925083359150613bad82613ac7565b8181526020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152505092915050565b600080600080600080600080888a036103a0811215613c1c57600080fd5b8935985061016080601f1983011215613c3457600080fd5b613c3c6139a9565b9150613c4a60208c01613966565b825260408b0135602083015260608b01356040830152613c6c60808c01613ad5565b606083015260a08b0135608083015260c08b013560a083015260e08b013560c0830152610100808c013560e0840152610120808d0135828501526101409150613cb6828e01613ad5565b90840152908b0135908201529650613cd28a6101808b01613ae0565b9550613ce28a6102208b01613b62565b9450613cf16103208a01613966565b9350613d006103408a01613ad5565b9250613d0f6103608a01613966565b9150613d1e6103808a01613966565b90509295985092959890939650565b600060208284031215613d3f57600080fd5b5035919050565b60008060408385031215613d5957600080fd5b823591506020830135613d6b81613951565b809150509250929050565b60008060408385031215613d8957600080fd5b50508035926020909101359150565b60008060408385031215613dab57600080fd5b8235613db681613951565b915060208381013567ffffffffffffffff80821115613dd457600080fd5b818601915086601f830112613de857600080fd5b813581811115613dfa57613dfa613993565b613e0c601f8201601f191685016139d3565b91508082528784828501011115613e2257600080fd5b80848401858401376000848284010152508093505050509250929050565b600081518084526020808501945080840160005b83811015613e795781516001600160a01b031687529582019590820190600101613e54565b509495945050505050565b6020815260006118d96020830184613e40565b602081016004831061394b5761394b613921565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613ee957613ee9613ec1565b5060010190565b604081526000613f036040830185613e40565b90506001600160a01b03831660208301529392505050565b81810381811115613f2e57613f2e613ec1565b92915050565b80820180821115613f2e57613f2e613ec1565b8082028115828204841417613f2e57613f2e613ec1565b600082613f7b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613f9257600080fd5b5051919050565b600060208284031215613fab57600080fd5b81516118d981613ac7565b600060208284031215613fc857600080fd5b815160ff811681146118d957600080fd5b600181815b80851115614014578160001904821115613ffa57613ffa613ec1565b8085161561400757918102915b93841c9390800290613fde565b509250929050565b60008261402b57506001613f2e565b8161403857506000613f2e565b816001811461404e576002811461405857614074565b6001915050613f2e565b60ff84111561406957614069613ec1565b50506001821b613f2e565b5060208310610133831016604e8410600b8410161715614097575081810a613f2e565b6140a18383613fd9565b80600019048211156140b5576140b5613ec1565b029392505050565b60006118d960ff84168361401c565b600060208083528351808285015260005b818110156140f9578581018301518582016040015282016140dd565b506000604082860101526040601f19601f8301168501019250505092915050565b85815284602082015260a06040820152600061413960a0830186613e40565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561416957600080fd5b825167ffffffffffffffff81111561418057600080fd5b8301601f8101851361419157600080fd5b805161419f613a7182613a04565b81815260059190911b820183019083810190878311156141be57600080fd5b928401925b82841015613abc578351825292840192908401906141c3565b8481526080602082015260006141f56080830186613e40565b6001600160a01b03949094166040830152506060015292915050565b60008060006060848603121561422657600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561425157600080fd5b81516118d98161395156fea2646970667358221220f470b208a2ce350c19054d94b9efc17eee897f2c602961602cad086f4a7d7ced64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "__GempadFairLaunch_init(uint256,(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,bool,address,address)": {
        "params": {
          "_buyBack": "buyback terms",
          "_feeReceiver": "protocol fee receiver",
          "_fundToken": "currency for purchase",
          "_id": ".",
          "_isPrivateMode": "mode of sale public or private",
          "_liquidity": "adding liquidity terms",
          "_owner": ".",
          "info": "."
        }
      },
      "addWhitelist(address[])": {
        "params": {
          "_participants": "user addreses"
        }
      },
      "buyToken(uint256,address)": {
        "params": {
          "_amount": "in terms of buying currency",
          "_referrer": "address of referrer for this sale"
        }
      },
      "enablePublicSale(uint256)": {
        "details": "set public sale start time equal to sale end time if you want to activate private mode",
        "params": {
          "_startTime": "."
        }
      },
      "getAllInvestors()": {
        "returns": {
          "_0": "address[]  return array of investors"
        }
      },
      "getAllReferrers()": {
        "returns": {
          "_0": "address[]  returns array of referrers"
        }
      },
      "getCurrentMode()": {
        "returns": {
          "mode": " of the current sale  (public or private)"
        }
      },
      "getCurrentSatus()": {
        "returns": {
          "status": " of the current sale"
        }
      },
      "getUserTokens(address)": {
        "params": {
          "_user": "address of usr"
        },
        "returns": {
          "tokens": " amount of user tokens"
        }
      },
      "isWhitelisted(address)": {
        "params": {
          "_address": "."
        },
        "returns": {
          "_0": "bool   return the whitelist status of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remainingBuybackAmount()": {
        "returns": {
          "_0": "uint256  it returns the remaing amunt to buy back out of total"
        }
      },
      "removeWhitelist(address[])": {
        "params": {
          "_participants": "user addreses"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAffiliation(uint256)": {
        "params": {
          "_reward": "percentage in bips"
        }
      },
      "setEndTime(uint256)": {
        "params": {
          "_endTime": "."
        }
      },
      "setTime(uint256,uint256)": {
        "params": {
          "_endTime": ".",
          "_startTime": "."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__GempadFairLaunch_init(uint256,(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,bool,address,address)": {
        "notice": "initialzie the core params of fairluanch"
      },
      "addWhitelist(address[])": {
        "notice": "add users to whitelist"
      },
      "buyBackTokens()": {
        "notice": "anyone call this function to buyback tokens from dex and burn them"
      },
      "buyToken(uint256,address)": {
        "notice": "for user to buy Tokens"
      },
      "cancel()": {
        "notice": "cancel the sale and update status"
      },
      "claimReward()": {
        "notice": "called by the referrers to claim referral reward."
      },
      "claimTokens()": {
        "notice": "called by the investros to claim tokens againt their investment"
      },
      "claimUserRefund()": {
        "notice": "called by investor to withdraw funds if sale fails to reach softcap or cancelled by owner."
      },
      "enablePublicSale(uint256)": {
        "notice": "set public sale activation time."
      },
      "finalize()": {
        "notice": "finalize the sale an dtransfer funds to owner."
      },
      "remainingBuybackAmount()": {
        "notice": "In every sale specific amount is allocated or buy back purpose"
      },
      "removeWhitelist(address[])": {
        "notice": "remove users from whitelist"
      },
      "setAffiliation(uint256)": {
        "notice": "set affliation percentage in bips(3)"
      },
      "setEndTime(uint256)": {
        "notice": "let owner update end time even after sale start"
      },
      "setTime(uint256,uint256)": {
        "notice": "update start and end time before sale start"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23634,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 23637,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24966,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23506,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 23626,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6399,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "_whitelist",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23810,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 23879,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4502,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "isInitialized",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 4504,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "Id",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 4507,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "fairlaunch",
        "offset": 0,
        "slot": "154",
        "type": "t_struct(FairLaunchDetails)4580_storage"
      },
      {
        "astId": 4510,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "liquidity",
        "offset": 0,
        "slot": "165",
        "type": "t_struct(LiquidityDetails)4592_storage"
      },
      {
        "astId": 4513,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "buyBack",
        "offset": 0,
        "slot": "170",
        "type": "t_struct(BuybackDetails)4609_storage"
      },
      {
        "astId": 4516,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "currentStatus",
        "offset": 0,
        "slot": "178",
        "type": "t_enum(Status)4624"
      },
      {
        "astId": 4519,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "fundToken",
        "offset": 1,
        "slot": "178",
        "type": "t_contract(IERC20Extented)6958"
      },
      {
        "astId": 4521,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "fundByTokens",
        "offset": 21,
        "slot": "178",
        "type": "t_bool"
      },
      {
        "astId": 4523,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "isPrivateMode",
        "offset": 22,
        "slot": "178",
        "type": "t_bool"
      },
      {
        "astId": 4525,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "179",
        "type": "t_address"
      },
      {
        "astId": 4527,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "tokenFee",
        "offset": 0,
        "slot": "180",
        "type": "t_uint256"
      },
      {
        "astId": 4529,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "totalRaised",
        "offset": 0,
        "slot": "181",
        "type": "t_uint256"
      },
      {
        "astId": 4531,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "182",
        "type": "t_uint256"
      },
      {
        "astId": 4533,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "totalReferralInvest",
        "offset": 0,
        "slot": "183",
        "type": "t_uint256"
      },
      {
        "astId": 4535,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "tokenToReceive",
        "offset": 0,
        "slot": "184",
        "type": "t_uint256"
      },
      {
        "astId": 4538,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "totalReward",
        "offset": 0,
        "slot": "185",
        "type": "t_uint256"
      },
      {
        "astId": 4540,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "currentPrice",
        "offset": 0,
        "slot": "186",
        "type": "t_uint256"
      },
      {
        "astId": 4543,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "investors",
        "offset": 0,
        "slot": "187",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4546,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "referrers",
        "offset": 0,
        "slot": "188",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4551,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "userInfo",
        "offset": 0,
        "slot": "189",
        "type": "t_mapping(t_address,t_struct(UserDetails)4614_storage)"
      },
      {
        "astId": 4556,
        "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
        "label": "rewardInfo",
        "offset": 0,
        "slot": "190",
        "type": "t_mapping(t_address,t_struct(RewardDetails)4619_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Extented)6958": {
        "encoding": "inplace",
        "label": "contract IERC20Extented",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)7425": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(Status)4624": {
        "encoding": "inplace",
        "label": "enum GempadFairLaunch.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(RewardDetails)4619_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GempadFairLaunch.RewardDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardDetails)4619_storage"
      },
      "t_mapping(t_address,t_struct(UserDetails)4614_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GempadFairLaunch.UserDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDetails)4614_storage"
      },
      "t_struct(BuybackDetails)4609_storage": {
        "encoding": "inplace",
        "label": "struct GempadFairLaunch.BuybackDetails",
        "members": [
          {
            "astId": 4594,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "isBuyback",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4596,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "buyBackPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4598,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "totalBuyBackAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4600,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "boughtBackAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4602,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "amountPerBuyback",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4604,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "minDelay",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4606,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "maxDelay",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4608,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "lastBuyTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(FairLaunchDetails)4580_storage": {
        "encoding": "inplace",
        "label": "struct GempadFairLaunch.FairLaunchDetails",
        "members": [
          {
            "astId": 4559,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Extented)6958"
          },
          {
            "astId": 4561,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "totalsellTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4563,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "softCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4565,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "isMaxLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4567,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "maxBuyLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4569,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4571,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4573,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "finalizeTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4575,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "publicSaleTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4577,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "isAffiliate",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 4579,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "affiliateReward",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(LiquidityDetails)4592_storage": {
        "encoding": "inplace",
        "label": "struct GempadFairLaunch.LiquidityDetails",
        "members": [
          {
            "astId": 4583,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IUniswapV2Router02)7425"
          },
          {
            "astId": 4585,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "liquidityPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4587,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "lockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4589,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "locker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4591,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "liquidityAdded",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardDetails)4619_storage": {
        "encoding": "inplace",
        "label": "struct GempadFairLaunch.RewardDetails",
        "members": [
          {
            "astId": 4616,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "referralInvest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4618,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "rewardShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserDetails)4614_storage": {
        "encoding": "inplace",
        "label": "struct GempadFairLaunch.UserDetails",
        "members": [
          {
            "astId": 4611,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "userInvest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4613,
            "contract": "@gempad/fairlaunch/contracts/GempadFairLaunch.sol:GempadFairLaunch",
            "label": "userCalimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}