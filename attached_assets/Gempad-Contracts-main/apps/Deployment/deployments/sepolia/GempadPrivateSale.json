{
  "address": "0xCCed340C8f6C28599609dc79d1Cb013326b450Af",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GempadPrivateSale.Mode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AntibotInfoAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GempadPrivateSale.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalizeTime",
          "type": "uint256"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalizeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadPrivateSale.PrivateSaleInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialRelease",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cyclePercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadPrivateSale.VestingInfo",
          "name": "_vesting",
          "type": "tuple"
        },
        {
          "internalType": "enum GempadPrivateSale.Mode",
          "name": "_mode",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundToken",
          "type": "address"
        }
      ],
      "name": "__GempadPrivateSale_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "__ServicePayer_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "antibotToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enableAntibotMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "enablePublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundByTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInvestors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMode",
      "outputs": [
        {
          "internalType": "enum GempadPrivateSale.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentStatus",
      "outputs": [
        {
          "internalType": "enum GempadPrivateSale.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "investFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalizeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publicSaleTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initialRelease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cyclePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8aa8743d7775539234edcaedeff501874d82c6db341011f330d2353c0b679ed",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0xCCed340C8f6C28599609dc79d1Cb013326b450Af",
    "transactionIndex": 43,
    "gasUsed": "2569256",
    "logsBloom": "0x
    "blockHash": "0xec6fbc9382da0a2adf9238be7a53ad985a3cee893a9749c3f6b822e1fab657ff",
    "transactionHash": "0xf8aa8743d7775539234edcaedeff501874d82c6db341011f330d2353c0b679ed",
    "logs": [],
    "blockNumber": 5476862,
    "cumulativeGasUsed": "6524831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19bc0a812d989bd2b38ed640ae41bece",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GempadPrivateSale.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AntibotInfoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GempadPrivateSale.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadPrivateSale.PrivateSaleInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cyclePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadPrivateSale.VestingInfo\",\"name\":\"_vesting\",\"type\":\"tuple\"},{\"internalType\":\"enum GempadPrivateSale.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundToken\",\"type\":\"address\"}],\"name\":\"__GempadPrivateSale_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"__ServicePayer_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enableAntibotMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"enablePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundByTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"enum GempadPrivateSale.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStatus\",\"outputs\":[{\"internalType\":\"enum GempadPrivateSale.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cyclePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"__GempadPrivateSale_init(uint256,address,(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint8,address,address)\":{\"params\":{\"_feeReceiver\":\".\",\"_fundToken\":\"to receive as payment\",\"_id\":\".\",\"_mode\":\"mode of sale\",\"_owner\":\".\",\"_vesting\":\"claim data\",\"info\":\"structure info\"}},\"addWhitelist(address[])\":{\"details\":\"being used in private sale mode\",\"params\":{\"_participants\":\"users to add.\"}},\"claimableTokens()\":{\"returns\":{\"_0\":\"uint256   the amount of toekns user can withdraw as per vesting terms\"}},\"enableAntibotMode(address,uint256)\":{\"params\":{\"_amount\":\"balance fo antibiot token required\",\"_token\":\"token require to have if user want to buy selling token\"}},\"enablePublicSale(uint256)\":{\"params\":{\"_startTime\":\"of public sale\"}},\"getAllInvestors()\":{\"returns\":{\"_0\":\"uint256  return the array of all investors\"}},\"getCurrentMode()\":{\"details\":\"time is a key player in role change\",\"returns\":{\"mode\":\"  current sale mode\"}},\"getCurrentStatus()\":{\"returns\":{\"status\":\" the current sale status i,e., public private etc.\"}},\"investFunds(uint256)\":{\"params\":{\"_amount\":\"user wants to spend\"}},\"isWhitelisted(address)\":{\"returns\":{\"_0\":\"bool   return the whitelist status of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelist(address[])\":{\"details\":\"being used in private sale mode\",\"params\":{\"_participants\":\"users to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__GempadPrivateSale_init(uint256,address,(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint8,address,address)\":{\"notice\":\"initialze the core params\"},\"addWhitelist(address[])\":{\"notice\":\"whitelist the users\"},\"cancel()\":{\"notice\":\"cancel teh sale\"},\"claimRefund()\":{\"notice\":\"claim refund if sale cancelled or soft cap not reached\"},\"claimTokens()\":{\"notice\":\"claim Tokens as per vesting rules\"},\"enableAntibotMode(address,uint256)\":{\"notice\":\"Enable the antibot bot mode that requires specific token balance\"},\"enablePublicSale(uint256)\":{\"notice\":\"set the time of public sale, and (sale end Time = private MOde)\"},\"finalize()\":{\"notice\":\"finalize the sale\"},\"getCurrentMode()\":{\"notice\":\"it returns the current mode of sale\"},\"investFunds(uint256)\":{\"notice\":\"user buy Tokens\"},\"removeWhitelist(address[])\":{\"notice\":\"remove the users from whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/privatsale/contracts/GempadPrivateSale.sol\":\"GempadPrivateSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/privatsale/contracts/GempadPrivateSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\r\\nimport './GempadWhitelist.sol';\\r\\nimport 'hardhat/console.sol';\\r\\n\\r\\ncontract GempadPrivateSale is GempadWhitelist, ServicePayer, ReentrancyGuardUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    bool public isInitialized = false;\\r\\n    uint256 public Id;\\r\\n\\r\\n    bool public fundByTokens;\\r\\n    IERC20 public fundToken;\\r\\n\\r\\n    IERC20 public antibotToken;\\r\\n    uint256 private antibotTokenBalance;\\r\\n    bool private isAntibotActive = false;\\r\\n    bool private isPrivate;\\r\\n\\r\\n    uint256 public totalSale;\\r\\n    uint256 public claimedAmount;\\r\\n    uint256 private lastClaimTime;\\r\\n\\r\\n    address private feeReceiver;\\r\\n    uint256 private tokenFee;\\r\\n\\r\\n    PrivateSaleInfo public saleInfo;\\r\\n    VestingInfo public vesting;\\r\\n    Mode private currentMode;\\r\\n    Status private currentStatus;\\r\\n\\r\\n    mapping(address => uint256) public depositOf;\\r\\n    address[] private investors;\\r\\n\\r\\n    struct PrivateSaleInfo {\\r\\n        string name;\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 minBuyLimit;\\r\\n        uint256 maxBuyLimit;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 finalizeTime;\\r\\n        uint256 publicSaleTime;\\r\\n    }\\r\\n    struct VestingInfo {\\r\\n        uint256 initialRelease;\\r\\n        uint256 cyclePercent;\\r\\n        uint256 cycleInterval;\\r\\n    }\\r\\n\\r\\n    enum Mode {\\r\\n        PUBLIC,\\r\\n        WHITELIST,\\r\\n        ANTI_BOT\\r\\n    }\\r\\n    enum Status {\\r\\n        PENDING,\\r\\n        ACTIVE,\\r\\n        CANCELLED,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    event AntibotInfoAdded(uint256 Id, Mode mode, address token, uint256 amount);\\r\\n    event FundsDeposited(uint256 Id, address sender, uint256 amount);\\r\\n    event PublicSaleEnabled(uint256 Id, uint256 saleTime);\\r\\n    event Finalized(uint256 Id, Status status, uint256 finalizeTime);\\r\\n\\r\\n    /**\\r\\n     * @notice  initialze the core params\\r\\n     * @param   _id  .\\r\\n     * @param   _owner  .\\r\\n     * @param   info  structure info\\r\\n     * @param   _vesting  claim data\\r\\n     * @param   _mode  mode of sale\\r\\n     * @param   _feeReceiver  .\\r\\n     * @param   _fundToken to receive as payment\\r\\n     */\\r\\n    function __GempadPrivateSale_init(\\r\\n        uint256 _id,\\r\\n        address _owner,\\r\\n        PrivateSaleInfo memory info,\\r\\n        VestingInfo memory _vesting,\\r\\n        Mode _mode,\\r\\n        address payable _feeReceiver,\\r\\n        address _fundToken\\r\\n    ) public payable initializer {\\r\\n        require(!isInitialized, 'Err: Already Initialized');\\r\\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadPrivateSale');\\r\\n\\r\\n        require(info.softCap <= info.hardCap, 'Soft-Cap should be less than or equal to hardcap');\\r\\n        require(info.softCap >= (info.hardCap / 2), 'Softcap must be greater than or equal 50% of Hardcap');\\r\\n\\r\\n        require(info.minBuyLimit > 0 && info.minBuyLimit < info.maxBuyLimit, 'Invalid min and max buy limit');\\r\\n\\r\\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\\r\\n\\r\\n        require(\\r\\n            _vesting.initialRelease > 0 && _vesting.initialRelease <= 95e3,\\r\\n            'Invalid Initial Release pecentage'\\r\\n        );\\r\\n\\r\\n        require(_vesting.cyclePercent > 0, 'Cycle pecentage must be greater than zero');\\r\\n\\r\\n        require(_vesting.cycleInterval > 0, 'interval must be greater than zero');\\r\\n\\r\\n        require(\\r\\n            _vesting.initialRelease + _vesting.cyclePercent <= 100e3,\\r\\n            'Sum of TGE bps and cycle should be less than 100'\\r\\n        );\\r\\n\\r\\n        //set custom Investment Token\\r\\n        fundByTokens = _fundToken != address(0);\\r\\n        if (fundByTokens) {\\r\\n            fundToken = IERC20(_fundToken);\\r\\n        }\\r\\n\\r\\n        //whitelisting feature status\\r\\n        require(_mode == Mode.PUBLIC || _mode == Mode.WHITELIST, 'Only public and private modes allowed');\\r\\n        currentMode = _mode;\\r\\n\\r\\n        saleInfo = info;\\r\\n        vesting = _vesting;\\r\\n        Id = _id;\\r\\n\\r\\n        // Initialize the public sale start time;\\r\\n        saleInfo.publicSaleTime = (currentMode == Mode.PUBLIC) ? saleInfo.startTime : saleInfo.endTime;\\r\\n        if (saleInfo.publicSaleTime == saleInfo.endTime) isPrivate = true;\\r\\n        feeReceiver = _feeReceiver;\\r\\n        tokenFee = IPayable(feeReceiver).getFee('GempadPrivateSale');\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n        isInitialized = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice user buy Tokens\\r\\n     * @param _amount user wants to spend\\r\\n     */\\r\\n    function investFunds(uint256 _amount) external payable nonReentrant {\\r\\n        require(\\r\\n            block.timestamp >= saleInfo.startTime && block.timestamp <= saleInfo.endTime,\\r\\n            'Sale is not active'\\r\\n        );\\r\\n\\r\\n        if (block.timestamp < saleInfo.publicSaleTime && isPrivate) {\\r\\n            require(_whitelist[msg.sender], 'User is not whitelisted');\\r\\n        } else if (isAntibotActive && block.timestamp < saleInfo.publicSaleTime) {\\r\\n            require(hasAntibotTokenBalance(), 'Insufficient Token balance');\\r\\n        }\\r\\n\\r\\n        require(_amount >= saleInfo.minBuyLimit, 'Amount is les than min buy limit');\\r\\n        require(depositOf[msg.sender] + _amount <= saleInfo.maxBuyLimit, 'Maximum buy limit reached');\\r\\n        require((totalSale + _amount) <= saleInfo.hardCap, 'Maximum sale limit reached');\\r\\n\\r\\n        if (depositOf[msg.sender] <= 0) investors.push(msg.sender);\\r\\n        depositOf[msg.sender] += _amount;\\r\\n\\r\\n        // Update the total sale amount\\r\\n        totalSale += _amount;\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        } else {\\r\\n            // Ensure that the sender has sent enough Ether\\r\\n            require(msg.value == _amount, 'Insufficient funds sent');\\r\\n        }\\r\\n\\r\\n        emit FundsDeposited(Id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  cancel teh sale\\r\\n     */\\r\\n    function cancel() external onlyOwner {\\r\\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\\r\\n        currentStatus = Status.CANCELLED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice finalize the sale\\r\\n     */\\r\\n    function finalize() external onlyOwner {\\r\\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\\r\\n        require(\\r\\n            (block.timestamp > saleInfo.endTime && totalSale >= saleInfo.softCap) ||\\r\\n                totalSale >= saleInfo.softCap,\\r\\n            'Sale End Time or cap not reached'\\r\\n        );\\r\\n\\r\\n        currentStatus = Status.CLOSED;\\r\\n        saleInfo.finalizeTime = block.timestamp;\\r\\n\\r\\n        emit Finalized(Id, currentStatus, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice claim Tokens as per vesting rules\\r\\n     */\\r\\n    function claimTokens() external onlyOwner nonReentrant {\\r\\n        require(currentStatus == Status.CLOSED, 'Sale in not finalized');\\r\\n\\r\\n        uint256 claimableAmount = _calculateClaimableTokens();\\r\\n\\r\\n        uint256 claimable = claimedAmount + claimableAmount;\\r\\n\\r\\n        require(claimableAmount > 0 && claimable <= totalSale, 'Total funds claimed');\\r\\n\\r\\n        uint256 feeAmount = (claimableAmount * tokenFee) / 100e3;\\r\\n\\r\\n        claimedAmount += claimableAmount;\\r\\n\\r\\n        lastClaimTime = block.timestamp;\\r\\n\\r\\n        _transferFunds(feeReceiver, feeAmount);\\r\\n        _transferFunds(msg.sender, (claimableAmount - feeAmount));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice claim refund if sale cancelled or soft cap not reached\\r\\n     */\\r\\n    function claimRefund() external nonReentrant {\\r\\n        require(\\r\\n            (block.timestamp >= saleInfo.endTime && totalSale < saleInfo.softCap) ||\\r\\n                currentStatus == Status.CANCELLED,\\r\\n            'Refund is not allowed'\\r\\n        );\\r\\n        require(depositOf[msg.sender] > 0, 'User has not invested any funds');\\r\\n\\r\\n        // uint256 funds = depositOf[msg.sender];\\r\\n        uint256 refund = depositOf[msg.sender];\\r\\n        depositOf[msg.sender] = 0;\\r\\n\\r\\n        _transferFunds(msg.sender, refund);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set the time of public sale, and (sale end Time = private MOde)\\r\\n     * @param   _startTime  of public sale\\r\\n     */\\r\\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\\r\\n        saleInfo.publicSaleTime = _startTime;\\r\\n\\r\\n        if (_startTime == saleInfo.endTime) isPrivate = true;\\r\\n        if (_startTime == saleInfo.endTime && isAntibotActive) isAntibotActive = false;\\r\\n\\r\\n        emit PublicSaleEnabled(Id, saleInfo.publicSaleTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enable the antibot bot mode that requires specific token balance\\r\\n     * @param   _token  token require to have if user want to buy selling token\\r\\n     * @param   _amount   balance fo antibiot token required\\r\\n     */\\r\\n    function enableAntibotMode(address _token, uint256 _amount) external onlyOwner {\\r\\n        require(_token != address(0), 'Invalid token address');\\r\\n        require(_amount > 0, 'Amount can not be zero');\\r\\n\\r\\n        antibotToken = IERC20(_token);\\r\\n        antibotTokenBalance = _amount;\\r\\n        currentMode = Mode.ANTI_BOT;\\r\\n        isAntibotActive = true;\\r\\n        if (isPrivate) isPrivate = false;\\r\\n        saleInfo.publicSaleTime = saleInfo.endTime;\\r\\n\\r\\n        emit AntibotInfoAdded(Id, currentMode, _token, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  it returns the current mode of sale\\r\\n     * @dev    time is a key player in role change\\r\\n     * @return  mode   current sale mode\\r\\n     */\\r\\n    function getCurrentMode() public view returns (Mode mode) {\\r\\n        mode = ((block.timestamp < saleInfo.publicSaleTime && isPrivate) &&\\r\\n            (block.timestamp > saleInfo.startTime) || (block.timestamp < saleInfo.startTime))\\r\\n            ? Mode.WHITELIST\\r\\n            : ((isAntibotActive && block.timestamp < saleInfo.publicSaleTime) &&\\r\\n                (block.timestamp > saleInfo.startTime))\\r\\n            ? Mode.ANTI_BOT\\r\\n            : Mode.PUBLIC;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return status  the current sale status i,e., public private etc.\\r\\n     */\\r\\n    function getCurrentStatus() public view returns (Status status) {\\r\\n        if ((block.timestamp < saleInfo.startTime) && currentStatus != Status.CANCELLED) {\\r\\n            status = Status.PENDING;\\r\\n        } else if (\\r\\n            (block.timestamp >= saleInfo.startTime && currentStatus == Status.PENDING) &&\\r\\n            (block.timestamp <= saleInfo.endTime) &&\\r\\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED) \\r\\n        ) {\\r\\n            status = Status.ACTIVE;\\r\\n        } else if (\\r\\n            (block.timestamp >= saleInfo.startTime && currentStatus == Status.PENDING) &&\\r\\n            (block.timestamp > saleInfo.endTime) &&\\r\\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED) \\r\\n        ) {\\r\\n            status = Status.CLOSED;\\r\\n        } else {\\r\\n            status = currentStatus;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  uint256   the amount of toekns user can withdraw as per vesting terms\\r\\n     */\\r\\n    function claimableTokens() external view returns (uint256) {\\r\\n        return _calculateClaimableTokens();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  uint256  return the array of all investors\\r\\n     */\\r\\n    function getAllInvestors() public view returns (address[] memory) {\\r\\n        return investors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  withdrawable : token canbe calimed as per vesting settings\\r\\n     */\\r\\n    function _calculateClaimableTokens() internal view returns (uint256 withdrawable) {\\r\\n        require((block.timestamp - lastClaimTime) >= vesting.cycleInterval, 'Tokens are not unlocked');\\r\\n\\r\\n        uint256 tgeReleaseAmount = (vesting.initialRelease * totalSale) / 100e3;\\r\\n        uint256 cycleReleaseAmount = Math.mulDiv(totalSale, vesting.cyclePercent, 100e3);\\r\\n\\r\\n        uint256 currentTotal = 0;\\r\\n\\r\\n        if (block.timestamp >= saleInfo.finalizeTime) {\\r\\n            currentTotal =\\r\\n                (((block.timestamp - saleInfo.finalizeTime) / vesting.cycleInterval) * cycleReleaseAmount) +\\r\\n                tgeReleaseAmount;\\r\\n        }\\r\\n\\r\\n        if (currentTotal > totalSale) {\\r\\n            withdrawable = totalSale - claimedAmount;\\r\\n        } else {\\r\\n            withdrawable = currentTotal - claimedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer the buying currency to receiver\\r\\n     * @param   _to   receiver\\r\\n     * @param   _amount  .\\r\\n     */\\r\\n    function _transferFunds(address _to, uint256 _amount) private {\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transfer(_to, _amount);\\r\\n        } else {\\r\\n            payable(_to).transfer(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  bool  check the require antibot toen balance\\r\\n     */\\r\\n    function hasAntibotTokenBalance() internal view returns (bool) {\\r\\n        uint256 balance = antibotToken.balanceOf(msg.sender);\\r\\n        return balance >= antibotTokenBalance;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7891e563302864666842c990deff2a398ff9f2f00a84590fb3e32e21725838a8\",\"license\":\"MIT\"},\"@gempad/privatsale/contracts/GempadWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\n\\r\\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\\r\\n    mapping(address => bool) internal _whitelist;\\r\\n\\r\\n    event WhitelistAdded(address[] account, address sender, bool status);\\r\\n    event WhitelistRemoved(address[] account, address sender, bool status);\\r\\n\\r\\n    /**\\r\\n     * @notice  whitelist the users\\r\\n     * @dev     being used in private sale mode\\r\\n     * @param   _participants  users to add.\\r\\n     */\\r\\n    function addWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\\r\\n            _whitelist[_participants[i]] = true;\\r\\n        }\\r\\n        emit WhitelistAdded(_participants, msg.sender, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  remove the users from whitelist\\r\\n     * @dev     being used in private sale mode\\r\\n     * @param   _participants  users to remove.\\r\\n     */\\r\\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\\r\\n            _whitelist[_participants[i]] = false;\\r\\n        }\\r\\n        emit WhitelistRemoved(_participants, msg.sender, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  bool   return the whitelist status of user\\r\\n     */\\r\\n    function isWhitelisted(address _address) public view returns (bool) {\\r\\n        return _whitelist[_address];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f1f35b1557c1791a01420833dc6a7f6b6f88e88f65141510372faacc4ff83bc\",\"license\":\"UNLICENSED\"},\"@gempad/services/contracts/ServicePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\n\\r\\ninterface IPayable {\\r\\n    function pay(string memory serviceName) external payable;\\r\\n\\r\\n    function getFee(string memory serviceName) external returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ServicePayer\\r\\n * @dev Implementation of the ServicePayer\\r\\n */\\r\\nabstract contract ServicePayer is Initializable {\\r\\n    function __ServicePayer_init(\\r\\n        address payable receiver,\\r\\n        string memory serviceName\\r\\n    ) public payable onlyInitializing {\\r\\n        IPayable(receiver).pay{ value: msg.value }(serviceName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd4167fa676ef90885db6c3e159cfdf1f4784085d1a587989a41eeb74339f169\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526098805460ff19908116909155609d8054909116905534801561002657600080fd5b50612d8c806100366000396000f3fe6080604052600436106101c15760003560e01c80638e3695b8116100f7578063c3ee6de811610095578063ea4ce23911610064578063ea4ce239146104f8578063ea8a1af01461050e578063edac985b14610523578063f2fde38b1461054357600080fd5b8063c3ee6de814610483578063cfed032a146104a3578063d0a2f2c4146104c3578063dd4cbcef146104e557600080fd5b8063a35e3aec116100d1578063a35e3aec14610424578063a3dd261914610437578063b5545a3c14610459578063bab8fe401461046e57600080fd5b80638e3695b8146103d15780639668ceb8146103fb5780639d8efc011461041157600080fd5b806344c63eec116101645780634bb278f31161013e5780634bb278f31461034c57806350adcdb714610361578063715018a61461039e5780638da5cb5b146103b357600080fd5b806344c63eec146102dd57806348c54b9d14610317578063496a1bbd1461032c57600080fd5b806323e3fbd5116101a057806323e3fbd514610239578063392e53cd1461027457806339a090c91461028e5780633af32abf146102a457600080fd5b8062fed700146101c657806315370598146101f55780632324521614610217575b600080fd5b3480156101d257600080fd5b50609a546101e09060ff1681565b60405190151581526020015b60405180910390f35b34801561020157600080fd5b5061020a610563565b6040516101ec9190612566565b34801561022357600080fd5b50610237610232366004612610565b6105d3565b005b34801561024557600080fd5b506102666102543660046126c2565b60b06020526000908152604090205481565b6040519081526020016101ec565b34801561028057600080fd5b506098546101e09060ff1681565b34801561029a57600080fd5b5061026660995481565b3480156102b057600080fd5b506101e06102bf3660046126c2565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156102e957600080fd5b5060ac5460ad5460ae546102fc92919083565b604080519384526020840192909252908201526060016101ec565b34801561032357600080fd5b5061023761078e565b34801561033857600080fd5b506102376103473660046126df565b6108f8565b34801561035857600080fd5b50610237610a55565b34801561036d57600080fd5b50609a546103869061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ec565b3480156103aa57600080fd5b50610237610b94565b3480156103bf57600080fd5b506033546001600160a01b0316610386565b3480156103dd57600080fd5b506103e6610ba6565b6040516101ec99989796959493929190612751565b34801561040757600080fd5b50610266609f5481565b61023761041f366004612880565b610c68565b6102376104323660046129a4565b6114c6565b34801561044357600080fd5b5061044c6115c0565b6040516101ec9190612a04565b34801561046557600080fd5b50610237611733565b34801561047a57600080fd5b50610266611848565b34801561048f57600080fd5b50609b54610386906001600160a01b031681565b3480156104af57600080fd5b506102376104be366004612a12565b611852565b3480156104cf57600080fd5b506104d86118e3565b6040516101ec9190612a6f565b6102376104f3366004612a12565b611945565b34801561050457600080fd5b50610266609e5481565b34801561051a57600080fd5b50610237611d9f565b34801561052f57600080fd5b5061023761053e366004612610565b611e49565b34801561054f57600080fd5b5061023761055e3660046126c2565b61201a565b60ab546000904210801561057e5750609d54610100900460ff165b801561058b575060a85442115b80610597575060a85442105b6105cb57609d5460ff1680156105ae575060ab5442105b80156105bb575060a85442115b6105c55750600090565b50600290565b60015b905090565b6105db6120a7565b805160005b8181101561074d5760006001600160a01b031683828151811061060557610605612a82565b60200260200101516001600160a01b0316036106685760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061067e5761067e612a82565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166106f15760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c69737465640000604482015260640161065f565b60006065600085848151811061070957610709612a82565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061074581612aae565b9150506105e0565b507f5f73122530c9d932562efb7c9f756fe263892584da8517a3f959e1852affe85f8233600060405161078293929190612ac7565b60405180910390a15050565b6107966120a7565b61079e612101565b600360af54610100900460ff1660038111156107bc576107bc61253c565b146108095760405162461bcd60e51b815260206004820152601560248201527f53616c6520696e206e6f742066696e616c697a65640000000000000000000000604482015260640161065f565b600061081361215a565b9050600081609f546108259190612afa565b90506000821180156108395750609e548111155b6108855760405162461bcd60e51b815260206004820152601360248201527f546f74616c2066756e647320636c61696d656400000000000000000000000000604482015260640161065f565b6000620186a060a254846108999190612b0d565b6108a39190612b3a565b905082609f60008282546108b79190612afa565b90915550504260a05560a1546108d6906001600160a01b031682612274565b6108e9336108e48386612b5c565b612274565b5050506108f66001606655565b565b6109006120a7565b6001600160a01b0382166109565760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640161065f565b600081116109a65760405162461bcd60e51b815260206004820152601660248201527f416d6f756e742063616e206e6f74206265207a65726f00000000000000000000604482015260640161065f565b609b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055609c81905560af80546002919060ff19166001830217905550609d805460ff191660011790819055610100900460ff1615610a0f57609d805461ff00191690555b60a95460ab5560995460af546040517f9f79b558c48e3206ce26a87c94cb9647069ede691bf7210539ad0277725f4d499261078292909160ff9091169086908690612b6f565b610a5d6120a7565b600360af54610100900460ff166003811115610a7b57610a7b61253c565b03610ac85760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a656400000000000000000000604482015260640161065f565b60a95442118015610add575060a454609e5410155b80610aec575060a454609e5410155b610b385760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f742072656163686564604482015260640161065f565b60af805461ff00191661030017908190554260aa8190556099546040517fa757a7780d9d2b6eb77cea8d062295b54ad43f504fc5e0aaf4d7547a3fcc9d4393610b8a9361010090910460ff1691612b9e565b60405180910390a1565b610b9c6120a7565b6108f66000612350565b60a380548190610bb590612bc0565b80601f0160208091040260200160405190810160405280929190818152602001828054610be190612bc0565b8015610c2e5780601f10610c0357610100808354040283529160200191610c2e565b820191906000526020600020905b815481529060010190602001808311610c1157829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080154905089565b600054610100900460ff1615808015610c885750600054600160ff909116105b80610ca25750303b158015610ca2575060005460ff166001145b610d145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161065f565b6000805460ff191660011790558015610d37576000805461ff0019166101001790555b60985460ff1615610d8a5760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920496e697469616c697a65640000000000000000604482015260640161065f565b610dc9836040518060400160405280601181526020017f47656d7061645072697661746553616c650000000000000000000000000000008152506114c6565b856040015186602001511115610e475760405162461bcd60e51b815260206004820152603060248201527f536f66742d4361702073686f756c64206265206c657373207468616e206f722060448201527f657175616c20746f206861726463617000000000000000000000000000000000606482015260840161065f565b60028660400151610e589190612b3a565b86602001511015610ed15760405162461bcd60e51b815260206004820152603460248201527f536f6674636170206d7573742062652067726561746572207468616e206f722060448201527f657175616c20353025206f662048617264636170000000000000000000000000606482015260840161065f565b60008660600151118015610eec575085608001518660600151105b610f385760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206d696e20616e64206d617820627579206c696d6974000000604482015260640161065f565b428660a00151118015610f5257508560c001518660a00151105b610f9e5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d650000000000000000000000000000604482015260640161065f565b845115801590610fb2575084516201731810155b6110245760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420496e697469616c2052656c6561736520706563656e74616760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b600085602001511161109e5760405162461bcd60e51b815260206004820152602960248201527f4379636c6520706563656e74616765206d75737420626520677265617465722060448201527f7468616e207a65726f0000000000000000000000000000000000000000000000606482015260840161065f565b60008560400151116111185760405162461bcd60e51b815260206004820152602260248201527f696e74657276616c206d7573742062652067726561746572207468616e207a6560448201527f726f000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b60208501518551620186a09161112d91612afa565b11156111a15760405162461bcd60e51b815260206004820152603060248201527f53756d206f66205447452062707320616e64206379636c652073686f756c642060448201527f6265206c657373207468616e2031303000000000000000000000000000000000606482015260840161065f565b609a805460ff19166001600160a01b038416151590811790915560ff16156111fb57609a80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038516021790555b600084600281111561120f5761120f61253c565b148061122c5750600184600281111561122a5761122a61253c565b145b61129e5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207075626c696320616e642070726976617465206d6f64657320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161065f565b60af805485919060ff191660018360028111156112bd576112bd61253c565b02179055508551869060a39081906112d59082612c48565b5060208281015160018301556040808401516002840155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e0840151600784015561010090930151600890920191909155865160ac5586015160ad5585015160ae556099889055600060af5460ff16600281111561135d5761135d61253c565b1461136a5760a95461136e565b60a8545b60ab81905560a954900361138c57609d805461ff0019166101001790555b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f47656d7061645072697661746553616c65000000000000000000000000000000604482015263ed1eee68906064016020604051808303816000875af1158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190612d08565b60a25561146987612350565b6098805460ff1916600117905580156114bc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600054610100900460ff166115435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161065f565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e90349061158a908590600401612d21565b6000604051808303818588803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b50505050505050565b60a854600090421080156115f05750600260af54610100900460ff1660038111156115ed576115ed61253c565b14155b156115fb5750600090565b60a85442108015906116285750600060af54610100900460ff1660038111156116265761162661253c565b145b8015611636575060a9544211155b80156116855750600260af54610100900460ff16600381111561165b5761165b61253c565b141580156116855750600360af54610100900460ff1660038111156116825761168261253c565b14155b156116905750600190565b60a85442108015906116bd5750600060af54610100900460ff1660038111156116bb576116bb61253c565b145b80156116ca575060a95442115b80156117195750600260af54610100900460ff1660038111156116ef576116ef61253c565b141580156117195750600360af54610100900460ff1660038111156117165761171661253c565b14155b156117245750600390565b5060af54610100900460ff1690565b61173b612101565b60a9544210801590611750575060a454609e54105b806117765750600260af54610100900460ff1660038111156117745761177461253c565b145b6117c25760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f7765640000000000000000000000604482015260640161065f565b33600090815260b0602052604090205461181e5760405162461bcd60e51b815260206004820152601f60248201527f5573657220686173206e6f7420696e76657374656420616e792066756e647300604482015260640161065f565b33600081815260b06020526040812080549190559061183d9082612274565b506108f66001606655565b60006105ce61215a565b61185a6120a7565b60ab81905560a954810361187857609d805461ff0019166101001790555b60a9548114801561188b5750609d5460ff165b1561189b57609d805460ff191690555b60995460ab546040517f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c1926118d892908252602082015260400190565b60405180910390a150565b606060b180548060200260200160405190810160405280929190818152602001828054801561193b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161191d575b5050505050905090565b61194d612101565b60a8544210801590611961575060a9544211155b6119ad5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f74206163746976650000000000000000000000000000604482015260640161065f565b60ab54421080156119c55750609d54610100900460ff165b15611a2e573360009081526065602052604090205460ff16611a295760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c6973746564000000000000000000604482015260640161065f565b611a9a565b609d5460ff168015611a41575060ab5442105b15611a9a57611a4e6123af565b611a9a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420546f6b656e2062616c616e6365000000000000604482015260640161065f565b60a654811015611aec5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206973206c6573207468616e206d696e20627579206c696d6974604482015260640161065f565b60a75433600090815260b06020526040902054611b0a908390612afa565b1115611b585760405162461bcd60e51b815260206004820152601960248201527f4d6178696d756d20627579206c696d6974207265616368656400000000000000604482015260640161065f565b60a554609e54611b69908390612afa565b1115611bb75760405162461bcd60e51b815260206004820152601a60248201527f4d6178696d756d2073616c65206c696d69742072656163686564000000000000604482015260640161065f565b33600090815260b06020526040902054611c1b5760b180546001810182556000919091527f04cb44c80b6fbf8ceb1d80af688c9f7c0b2ab5bf4a964cabe37041f23b23f7a801805473ffffffffffffffffffffffffffffffffffffffff1916331790555b33600090815260b0602052604081208054839290611c3a908490612afa565b9250508190555080609e6000828254611c539190612afa565b9091555050609a5460ff1615611d0157609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190612d34565b50611d50565b803414611d505760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e74000000000000000000604482015260640161065f565b6099546040805191825233602083015281018290527fe030e47e27825a2ad1b19e4cf2e70bfbfb3124af275c7727a82b114ba7b29a859060600160405180910390a1611d9c6001606655565b50565b611da76120a7565b600360af54610100900460ff166003811115611dc557611dc561253c565b03611e385760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a6500000000000000000000000000000000000000000000000000606482015260840161065f565b60af805461ff001916610200179055565b611e516120a7565b805160005b81811015611fe55760006001600160a01b0316838281518110611e7b57611e7b612a82565b60200260200101516001600160a01b031603611ed95760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015260640161065f565b60656000848381518110611eef57611eef612a82565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611f895760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b600160656000858481518110611fa157611fa1612a82565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611fdd81612aae565b915050611e56565b507f92b68c43a67d2449c108d21b7c3e8174f313ac035c4a25d4f7e73014a997e1128233600160405161078293929190612ac7565b6120226120a7565b6001600160a01b03811661209e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161065f565b611d9c81612350565b6033546001600160a01b031633146108f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161065f565b6002606654036121535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161065f565b6002606655565b60ae5460a0546000919061216e9042612b5c565b10156121bc5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e7320617265206e6f7420756e6c6f636b6564000000000000000000604482015260640161065f565b6000620186a0609e5460ac600001546121d59190612b0d565b6121df9190612b3a565b905060006121f8609e5460ac60010154620186a0612444565b9050600060a360070154421061223d5760ae5460aa548491849161221c9042612b5c565b6122269190612b3a565b6122309190612b0d565b61223a9190612afa565b90505b609e5481111561225e57609f54609e546122579190612b5c565b935061226e565b609f5461226b9082612b5c565b93505b50505090565b609a5460ff161561231a57609a546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af11580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123159190612d34565b505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612315573d6000803e3d6000fd5b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609b546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124399190612d08565b609c54111592915050565b600080806000198587098587029250828110838203039150508060000361247e5783828161247457612474612b24565b0492505050612535565b8084116124cd5760405162461bcd60e51b815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f770000000000000000000000604482015260640161065f565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b634e487b7160e01b600052602160045260246000fd5b600381106125625761256261253c565b9052565b602081016125748284612552565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156125b4576125b461257a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156125e3576125e361257a565b604052919050565b6001600160a01b0381168114611d9c57600080fd5b803561260b816125eb565b919050565b6000602080838503121561262357600080fd5b823567ffffffffffffffff8082111561263b57600080fd5b818501915085601f83011261264f57600080fd5b8135818111156126615761266161257a565b8060051b91506126728483016125ba565b818152918301840191848101908884111561268c57600080fd5b938501935b838510156126b657843592506126a6836125eb565b8282529385019390850190612691565b98975050505050505050565b6000602082840312156126d457600080fd5b8135612535816125eb565b600080604083850312156126f257600080fd5b82356126fd816125eb565b946020939093013593505050565b6000815180845260005b8181101561273157602081850181015186830182015201612715565b506000602082860101526020601f19601f83011685010191505092915050565b60006101208083526127658184018d61270b565b602084019b909b52505060408101979097526060870195909552608086019390935260a085019190915260c084015260e083015261010090910152919050565b600082601f8301126127b657600080fd5b813567ffffffffffffffff8111156127d0576127d061257a565b6127e3601f8201601f19166020016125ba565b8181528460208386010111156127f857600080fd5b816020850160208301376000918101602001919091529392505050565b60006060828403121561282757600080fd5b6040516060810181811067ffffffffffffffff8211171561284a5761284a61257a565b80604052508091508235815260208301356020820152604083013560408201525092915050565b80356003811061260b57600080fd5b600080600080600080600061012080898b03121561289d57600080fd5b8835975060208901356128af816125eb565b9650604089013567ffffffffffffffff808211156128cc57600080fd5b818b01915082828d0312156128e057600080fd5b6128e8612590565b92508135818111156128f957600080fd5b6129058d8285016127a5565b845250506020810135602083015260408101356040830152606081013560608301526080810135608083015260a081013560a083015260c081013560c083015260e081013560e0830152610100808201358184015282975061296a8c60608d01612815565b965061297860c08c01612871565b955061298660e08c01612600565b9450612993818c01612600565b935050505092959891949750929550565b600080604083850312156129b757600080fd5b82356129c2816125eb565b9150602083013567ffffffffffffffff8111156129de57600080fd5b6129ea858286016127a5565b9150509250929050565b600481106125625761256261253c565b6020810161257482846129f4565b600060208284031215612a2457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612a645781516001600160a01b031687529582019590820190600101612a3f565b509495945050505050565b6020815260006125356020830184612a2b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ac057612ac0612a98565b5060010190565b606081526000612ada6060830186612a2b565b6001600160a01b0394909416602083015250901515604090910152919050565b8082018082111561257457612574612a98565b808202811582820484141761257457612574612a98565b634e487b7160e01b600052601260045260246000fd5b600082612b5757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561257457612574612a98565b84815260808101612b836020830186612552565b6001600160a01b039390931660408201526060015292915050565b83815260608101612bb260208301856129f4565b826040830152949350505050565b600181811c90821680612bd457607f821691505b602082108103612bf457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561231557600081815260208120601f850160051c81016020861015612c215750805b601f850160051c820191505b81811015612c4057828155600101612c2d565b505050505050565b815167ffffffffffffffff811115612c6257612c6261257a565b612c7681612c708454612bc0565b84612bfa565b602080601f831160018114612cab5760008415612c935750858301515b600019600386901b1c1916600185901b178555612c40565b600085815260208120601f198616915b82811015612cda57888601518255948401946001909101908401612cbb565b5085821015612cf85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612d1a57600080fd5b5051919050565b602081526000612535602083018461270b565b600060208284031215612d4657600080fd5b8151801515811461253557600080fdfea264697066735822122052f8b83ed4e4bbc7922093455e574725687db434f8be912ad43d0e113cbb999764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c80638e3695b8116100f7578063c3ee6de811610095578063ea4ce23911610064578063ea4ce239146104f8578063ea8a1af01461050e578063edac985b14610523578063f2fde38b1461054357600080fd5b8063c3ee6de814610483578063cfed032a146104a3578063d0a2f2c4146104c3578063dd4cbcef146104e557600080fd5b8063a35e3aec116100d1578063a35e3aec14610424578063a3dd261914610437578063b5545a3c14610459578063bab8fe401461046e57600080fd5b80638e3695b8146103d15780639668ceb8146103fb5780639d8efc011461041157600080fd5b806344c63eec116101645780634bb278f31161013e5780634bb278f31461034c57806350adcdb714610361578063715018a61461039e5780638da5cb5b146103b357600080fd5b806344c63eec146102dd57806348c54b9d14610317578063496a1bbd1461032c57600080fd5b806323e3fbd5116101a057806323e3fbd514610239578063392e53cd1461027457806339a090c91461028e5780633af32abf146102a457600080fd5b8062fed700146101c657806315370598146101f55780632324521614610217575b600080fd5b3480156101d257600080fd5b50609a546101e09060ff1681565b60405190151581526020015b60405180910390f35b34801561020157600080fd5b5061020a610563565b6040516101ec9190612566565b34801561022357600080fd5b50610237610232366004612610565b6105d3565b005b34801561024557600080fd5b506102666102543660046126c2565b60b06020526000908152604090205481565b6040519081526020016101ec565b34801561028057600080fd5b506098546101e09060ff1681565b34801561029a57600080fd5b5061026660995481565b3480156102b057600080fd5b506101e06102bf3660046126c2565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156102e957600080fd5b5060ac5460ad5460ae546102fc92919083565b604080519384526020840192909252908201526060016101ec565b34801561032357600080fd5b5061023761078e565b34801561033857600080fd5b506102376103473660046126df565b6108f8565b34801561035857600080fd5b50610237610a55565b34801561036d57600080fd5b50609a546103869061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ec565b3480156103aa57600080fd5b50610237610b94565b3480156103bf57600080fd5b506033546001600160a01b0316610386565b3480156103dd57600080fd5b506103e6610ba6565b6040516101ec99989796959493929190612751565b34801561040757600080fd5b50610266609f5481565b61023761041f366004612880565b610c68565b6102376104323660046129a4565b6114c6565b34801561044357600080fd5b5061044c6115c0565b6040516101ec9190612a04565b34801561046557600080fd5b50610237611733565b34801561047a57600080fd5b50610266611848565b34801561048f57600080fd5b50609b54610386906001600160a01b031681565b3480156104af57600080fd5b506102376104be366004612a12565b611852565b3480156104cf57600080fd5b506104d86118e3565b6040516101ec9190612a6f565b6102376104f3366004612a12565b611945565b34801561050457600080fd5b50610266609e5481565b34801561051a57600080fd5b50610237611d9f565b34801561052f57600080fd5b5061023761053e366004612610565b611e49565b34801561054f57600080fd5b5061023761055e3660046126c2565b61201a565b60ab546000904210801561057e5750609d54610100900460ff165b801561058b575060a85442115b80610597575060a85442105b6105cb57609d5460ff1680156105ae575060ab5442105b80156105bb575060a85442115b6105c55750600090565b50600290565b60015b905090565b6105db6120a7565b805160005b8181101561074d5760006001600160a01b031683828151811061060557610605612a82565b60200260200101516001600160a01b0316036106685760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061067e5761067e612a82565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166106f15760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c69737465640000604482015260640161065f565b60006065600085848151811061070957610709612a82565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061074581612aae565b9150506105e0565b507f5f73122530c9d932562efb7c9f756fe263892584da8517a3f959e1852affe85f8233600060405161078293929190612ac7565b60405180910390a15050565b6107966120a7565b61079e612101565b600360af54610100900460ff1660038111156107bc576107bc61253c565b146108095760405162461bcd60e51b815260206004820152601560248201527f53616c6520696e206e6f742066696e616c697a65640000000000000000000000604482015260640161065f565b600061081361215a565b9050600081609f546108259190612afa565b90506000821180156108395750609e548111155b6108855760405162461bcd60e51b815260206004820152601360248201527f546f74616c2066756e647320636c61696d656400000000000000000000000000604482015260640161065f565b6000620186a060a254846108999190612b0d565b6108a39190612b3a565b905082609f60008282546108b79190612afa565b90915550504260a05560a1546108d6906001600160a01b031682612274565b6108e9336108e48386612b5c565b612274565b5050506108f66001606655565b565b6109006120a7565b6001600160a01b0382166109565760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640161065f565b600081116109a65760405162461bcd60e51b815260206004820152601660248201527f416d6f756e742063616e206e6f74206265207a65726f00000000000000000000604482015260640161065f565b609b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055609c81905560af80546002919060ff19166001830217905550609d805460ff191660011790819055610100900460ff1615610a0f57609d805461ff00191690555b60a95460ab5560995460af546040517f9f79b558c48e3206ce26a87c94cb9647069ede691bf7210539ad0277725f4d499261078292909160ff9091169086908690612b6f565b610a5d6120a7565b600360af54610100900460ff166003811115610a7b57610a7b61253c565b03610ac85760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a656400000000000000000000604482015260640161065f565b60a95442118015610add575060a454609e5410155b80610aec575060a454609e5410155b610b385760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f742072656163686564604482015260640161065f565b60af805461ff00191661030017908190554260aa8190556099546040517fa757a7780d9d2b6eb77cea8d062295b54ad43f504fc5e0aaf4d7547a3fcc9d4393610b8a9361010090910460ff1691612b9e565b60405180910390a1565b610b9c6120a7565b6108f66000612350565b60a380548190610bb590612bc0565b80601f0160208091040260200160405190810160405280929190818152602001828054610be190612bc0565b8015610c2e5780601f10610c0357610100808354040283529160200191610c2e565b820191906000526020600020905b815481529060010190602001808311610c1157829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080154905089565b600054610100900460ff1615808015610c885750600054600160ff909116105b80610ca25750303b158015610ca2575060005460ff166001145b610d145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161065f565b6000805460ff191660011790558015610d37576000805461ff0019166101001790555b60985460ff1615610d8a5760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920496e697469616c697a65640000000000000000604482015260640161065f565b610dc9836040518060400160405280601181526020017f47656d7061645072697661746553616c650000000000000000000000000000008152506114c6565b856040015186602001511115610e475760405162461bcd60e51b815260206004820152603060248201527f536f66742d4361702073686f756c64206265206c657373207468616e206f722060448201527f657175616c20746f206861726463617000000000000000000000000000000000606482015260840161065f565b60028660400151610e589190612b3a565b86602001511015610ed15760405162461bcd60e51b815260206004820152603460248201527f536f6674636170206d7573742062652067726561746572207468616e206f722060448201527f657175616c20353025206f662048617264636170000000000000000000000000606482015260840161065f565b60008660600151118015610eec575085608001518660600151105b610f385760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206d696e20616e64206d617820627579206c696d6974000000604482015260640161065f565b428660a00151118015610f5257508560c001518660a00151105b610f9e5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d650000000000000000000000000000604482015260640161065f565b845115801590610fb2575084516201731810155b6110245760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420496e697469616c2052656c6561736520706563656e74616760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b600085602001511161109e5760405162461bcd60e51b815260206004820152602960248201527f4379636c6520706563656e74616765206d75737420626520677265617465722060448201527f7468616e207a65726f0000000000000000000000000000000000000000000000606482015260840161065f565b60008560400151116111185760405162461bcd60e51b815260206004820152602260248201527f696e74657276616c206d7573742062652067726561746572207468616e207a6560448201527f726f000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b60208501518551620186a09161112d91612afa565b11156111a15760405162461bcd60e51b815260206004820152603060248201527f53756d206f66205447452062707320616e64206379636c652073686f756c642060448201527f6265206c657373207468616e2031303000000000000000000000000000000000606482015260840161065f565b609a805460ff19166001600160a01b038416151590811790915560ff16156111fb57609a80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038516021790555b600084600281111561120f5761120f61253c565b148061122c5750600184600281111561122a5761122a61253c565b145b61129e5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207075626c696320616e642070726976617465206d6f64657320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161065f565b60af805485919060ff191660018360028111156112bd576112bd61253c565b02179055508551869060a39081906112d59082612c48565b5060208281015160018301556040808401516002840155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e0840151600784015561010090930151600890920191909155865160ac5586015160ad5585015160ae556099889055600060af5460ff16600281111561135d5761135d61253c565b1461136a5760a95461136e565b60a8545b60ab81905560a954900361138c57609d805461ff0019166101001790555b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f47656d7061645072697661746553616c65000000000000000000000000000000604482015263ed1eee68906064016020604051808303816000875af1158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190612d08565b60a25561146987612350565b6098805460ff1916600117905580156114bc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600054610100900460ff166115435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161065f565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e90349061158a908590600401612d21565b6000604051808303818588803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b50505050505050565b60a854600090421080156115f05750600260af54610100900460ff1660038111156115ed576115ed61253c565b14155b156115fb5750600090565b60a85442108015906116285750600060af54610100900460ff1660038111156116265761162661253c565b145b8015611636575060a9544211155b80156116855750600260af54610100900460ff16600381111561165b5761165b61253c565b141580156116855750600360af54610100900460ff1660038111156116825761168261253c565b14155b156116905750600190565b60a85442108015906116bd5750600060af54610100900460ff1660038111156116bb576116bb61253c565b145b80156116ca575060a95442115b80156117195750600260af54610100900460ff1660038111156116ef576116ef61253c565b141580156117195750600360af54610100900460ff1660038111156117165761171661253c565b14155b156117245750600390565b5060af54610100900460ff1690565b61173b612101565b60a9544210801590611750575060a454609e54105b806117765750600260af54610100900460ff1660038111156117745761177461253c565b145b6117c25760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f7765640000000000000000000000604482015260640161065f565b33600090815260b0602052604090205461181e5760405162461bcd60e51b815260206004820152601f60248201527f5573657220686173206e6f7420696e76657374656420616e792066756e647300604482015260640161065f565b33600081815260b06020526040812080549190559061183d9082612274565b506108f66001606655565b60006105ce61215a565b61185a6120a7565b60ab81905560a954810361187857609d805461ff0019166101001790555b60a9548114801561188b5750609d5460ff165b1561189b57609d805460ff191690555b60995460ab546040517f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c1926118d892908252602082015260400190565b60405180910390a150565b606060b180548060200260200160405190810160405280929190818152602001828054801561193b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161191d575b5050505050905090565b61194d612101565b60a8544210801590611961575060a9544211155b6119ad5760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f74206163746976650000000000000000000000000000604482015260640161065f565b60ab54421080156119c55750609d54610100900460ff165b15611a2e573360009081526065602052604090205460ff16611a295760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c6973746564000000000000000000604482015260640161065f565b611a9a565b609d5460ff168015611a41575060ab5442105b15611a9a57611a4e6123af565b611a9a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420546f6b656e2062616c616e6365000000000000604482015260640161065f565b60a654811015611aec5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206973206c6573207468616e206d696e20627579206c696d6974604482015260640161065f565b60a75433600090815260b06020526040902054611b0a908390612afa565b1115611b585760405162461bcd60e51b815260206004820152601960248201527f4d6178696d756d20627579206c696d6974207265616368656400000000000000604482015260640161065f565b60a554609e54611b69908390612afa565b1115611bb75760405162461bcd60e51b815260206004820152601a60248201527f4d6178696d756d2073616c65206c696d69742072656163686564000000000000604482015260640161065f565b33600090815260b06020526040902054611c1b5760b180546001810182556000919091527f04cb44c80b6fbf8ceb1d80af688c9f7c0b2ab5bf4a964cabe37041f23b23f7a801805473ffffffffffffffffffffffffffffffffffffffff1916331790555b33600090815260b0602052604081208054839290611c3a908490612afa565b9250508190555080609e6000828254611c539190612afa565b9091555050609a5460ff1615611d0157609a546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190612d34565b50611d50565b803414611d505760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e74000000000000000000604482015260640161065f565b6099546040805191825233602083015281018290527fe030e47e27825a2ad1b19e4cf2e70bfbfb3124af275c7727a82b114ba7b29a859060600160405180910390a1611d9c6001606655565b50565b611da76120a7565b600360af54610100900460ff166003811115611dc557611dc561253c565b03611e385760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a6500000000000000000000000000000000000000000000000000606482015260840161065f565b60af805461ff001916610200179055565b611e516120a7565b805160005b81811015611fe55760006001600160a01b0316838281518110611e7b57611e7b612a82565b60200260200101516001600160a01b031603611ed95760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015260640161065f565b60656000848381518110611eef57611eef612a82565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611f895760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161065f565b600160656000858481518110611fa157611fa1612a82565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611fdd81612aae565b915050611e56565b507f92b68c43a67d2449c108d21b7c3e8174f313ac035c4a25d4f7e73014a997e1128233600160405161078293929190612ac7565b6120226120a7565b6001600160a01b03811661209e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161065f565b611d9c81612350565b6033546001600160a01b031633146108f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161065f565b6002606654036121535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161065f565b6002606655565b60ae5460a0546000919061216e9042612b5c565b10156121bc5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e7320617265206e6f7420756e6c6f636b6564000000000000000000604482015260640161065f565b6000620186a0609e5460ac600001546121d59190612b0d565b6121df9190612b3a565b905060006121f8609e5460ac60010154620186a0612444565b9050600060a360070154421061223d5760ae5460aa548491849161221c9042612b5c565b6122269190612b3a565b6122309190612b0d565b61223a9190612afa565b90505b609e5481111561225e57609f54609e546122579190612b5c565b935061226e565b609f5461226b9082612b5c565b93505b50505090565b609a5460ff161561231a57609a546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af11580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123159190612d34565b505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612315573d6000803e3d6000fd5b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609b546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124399190612d08565b609c54111592915050565b600080806000198587098587029250828110838203039150508060000361247e5783828161247457612474612b24565b0492505050612535565b8084116124cd5760405162461bcd60e51b815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f770000000000000000000000604482015260640161065f565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b634e487b7160e01b600052602160045260246000fd5b600381106125625761256261253c565b9052565b602081016125748284612552565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156125b4576125b461257a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156125e3576125e361257a565b604052919050565b6001600160a01b0381168114611d9c57600080fd5b803561260b816125eb565b919050565b6000602080838503121561262357600080fd5b823567ffffffffffffffff8082111561263b57600080fd5b818501915085601f83011261264f57600080fd5b8135818111156126615761266161257a565b8060051b91506126728483016125ba565b818152918301840191848101908884111561268c57600080fd5b938501935b838510156126b657843592506126a6836125eb565b8282529385019390850190612691565b98975050505050505050565b6000602082840312156126d457600080fd5b8135612535816125eb565b600080604083850312156126f257600080fd5b82356126fd816125eb565b946020939093013593505050565b6000815180845260005b8181101561273157602081850181015186830182015201612715565b506000602082860101526020601f19601f83011685010191505092915050565b60006101208083526127658184018d61270b565b602084019b909b52505060408101979097526060870195909552608086019390935260a085019190915260c084015260e083015261010090910152919050565b600082601f8301126127b657600080fd5b813567ffffffffffffffff8111156127d0576127d061257a565b6127e3601f8201601f19166020016125ba565b8181528460208386010111156127f857600080fd5b816020850160208301376000918101602001919091529392505050565b60006060828403121561282757600080fd5b6040516060810181811067ffffffffffffffff8211171561284a5761284a61257a565b80604052508091508235815260208301356020820152604083013560408201525092915050565b80356003811061260b57600080fd5b600080600080600080600061012080898b03121561289d57600080fd5b8835975060208901356128af816125eb565b9650604089013567ffffffffffffffff808211156128cc57600080fd5b818b01915082828d0312156128e057600080fd5b6128e8612590565b92508135818111156128f957600080fd5b6129058d8285016127a5565b845250506020810135602083015260408101356040830152606081013560608301526080810135608083015260a081013560a083015260c081013560c083015260e081013560e0830152610100808201358184015282975061296a8c60608d01612815565b965061297860c08c01612871565b955061298660e08c01612600565b9450612993818c01612600565b935050505092959891949750929550565b600080604083850312156129b757600080fd5b82356129c2816125eb565b9150602083013567ffffffffffffffff8111156129de57600080fd5b6129ea858286016127a5565b9150509250929050565b600481106125625761256261253c565b6020810161257482846129f4565b600060208284031215612a2457600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612a645781516001600160a01b031687529582019590820190600101612a3f565b509495945050505050565b6020815260006125356020830184612a2b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ac057612ac0612a98565b5060010190565b606081526000612ada6060830186612a2b565b6001600160a01b0394909416602083015250901515604090910152919050565b8082018082111561257457612574612a98565b808202811582820484141761257457612574612a98565b634e487b7160e01b600052601260045260246000fd5b600082612b5757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561257457612574612a98565b84815260808101612b836020830186612552565b6001600160a01b039390931660408201526060015292915050565b83815260608101612bb260208301856129f4565b826040830152949350505050565b600181811c90821680612bd457607f821691505b602082108103612bf457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561231557600081815260208120601f850160051c81016020861015612c215750805b601f850160051c820191505b81811015612c4057828155600101612c2d565b505050505050565b815167ffffffffffffffff811115612c6257612c6261257a565b612c7681612c708454612bc0565b84612bfa565b602080601f831160018114612cab5760008415612c935750858301515b600019600386901b1c1916600185901b178555612c40565b600085815260208120601f198616915b82811015612cda57888601518255948401946001909101908401612cbb565b5085821015612cf85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612d1a57600080fd5b5051919050565b602081526000612535602083018461270b565b600060208284031215612d4657600080fd5b8151801515811461253557600080fdfea264697066735822122052f8b83ed4e4bbc7922093455e574725687db434f8be912ad43d0e113cbb999764736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "__GempadPrivateSale_init(uint256,address,(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint8,address,address)": {
        "params": {
          "_feeReceiver": ".",
          "_fundToken": "to receive as payment",
          "_id": ".",
          "_mode": "mode of sale",
          "_owner": ".",
          "_vesting": "claim data",
          "info": "structure info"
        }
      },
      "addWhitelist(address[])": {
        "details": "being used in private sale mode",
        "params": {
          "_participants": "users to add."
        }
      },
      "claimableTokens()": {
        "returns": {
          "_0": "uint256   the amount of toekns user can withdraw as per vesting terms"
        }
      },
      "enableAntibotMode(address,uint256)": {
        "params": {
          "_amount": "balance fo antibiot token required",
          "_token": "token require to have if user want to buy selling token"
        }
      },
      "enablePublicSale(uint256)": {
        "params": {
          "_startTime": "of public sale"
        }
      },
      "getAllInvestors()": {
        "returns": {
          "_0": "uint256  return the array of all investors"
        }
      },
      "getCurrentMode()": {
        "details": "time is a key player in role change",
        "returns": {
          "mode": "  current sale mode"
        }
      },
      "getCurrentStatus()": {
        "returns": {
          "status": " the current sale status i,e., public private etc."
        }
      },
      "investFunds(uint256)": {
        "params": {
          "_amount": "user wants to spend"
        }
      },
      "isWhitelisted(address)": {
        "returns": {
          "_0": "bool   return the whitelist status of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelist(address[])": {
        "details": "being used in private sale mode",
        "params": {
          "_participants": "users to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__GempadPrivateSale_init(uint256,address,(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint8,address,address)": {
        "notice": "initialze the core params"
      },
      "addWhitelist(address[])": {
        "notice": "whitelist the users"
      },
      "cancel()": {
        "notice": "cancel teh sale"
      },
      "claimRefund()": {
        "notice": "claim refund if sale cancelled or soft cap not reached"
      },
      "claimTokens()": {
        "notice": "claim Tokens as per vesting rules"
      },
      "enableAntibotMode(address,uint256)": {
        "notice": "Enable the antibot bot mode that requires specific token balance"
      },
      "enablePublicSale(uint256)": {
        "notice": "set the time of public sale, and (sale end Time = private MOde)"
      },
      "finalize()": {
        "notice": "finalize the sale"
      },
      "getCurrentMode()": {
        "notice": "it returns the current mode of sale"
      },
      "investFunds(uint256)": {
        "notice": "user buy Tokens"
      },
      "removeWhitelist(address[])": {
        "notice": "remove the users from whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23634,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 23637,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24966,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23506,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 23626,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20384,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "_whitelist",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23810,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 23879,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19268,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "isInitialized",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 19270,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "Id",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 19272,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "fundByTokens",
        "offset": 0,
        "slot": "154",
        "type": "t_bool"
      },
      {
        "astId": 19275,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "fundToken",
        "offset": 1,
        "slot": "154",
        "type": "t_contract(IERC20)27237"
      },
      {
        "astId": 19278,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "antibotToken",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IERC20)27237"
      },
      {
        "astId": 19280,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "antibotTokenBalance",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 19283,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "isAntibotActive",
        "offset": 0,
        "slot": "157",
        "type": "t_bool"
      },
      {
        "astId": 19285,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "isPrivate",
        "offset": 1,
        "slot": "157",
        "type": "t_bool"
      },
      {
        "astId": 19287,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "totalSale",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 19289,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "claimedAmount",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 19291,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 19293,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 19295,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "tokenFee",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 19298,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "saleInfo",
        "offset": 0,
        "slot": "163",
        "type": "t_struct(PrivateSaleInfo)19333_storage"
      },
      {
        "astId": 19301,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "vesting",
        "offset": 0,
        "slot": "172",
        "type": "t_struct(VestingInfo)19340_storage"
      },
      {
        "astId": 19304,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "currentMode",
        "offset": 0,
        "slot": "175",
        "type": "t_enum(Mode)19344"
      },
      {
        "astId": 19307,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "currentStatus",
        "offset": 1,
        "slot": "175",
        "type": "t_enum(Status)19349"
      },
      {
        "astId": 19311,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "depositOf",
        "offset": 0,
        "slot": "176",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19314,
        "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
        "label": "investors",
        "offset": 0,
        "slot": "177",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)27237": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Mode)19344": {
        "encoding": "inplace",
        "label": "enum GempadPrivateSale.Mode",
        "numberOfBytes": "1"
      },
      "t_enum(Status)19349": {
        "encoding": "inplace",
        "label": "enum GempadPrivateSale.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PrivateSaleInfo)19333_storage": {
        "encoding": "inplace",
        "label": "struct GempadPrivateSale.PrivateSaleInfo",
        "members": [
          {
            "astId": 19316,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19318,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "softCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19320,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "hardCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19322,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "minBuyLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19324,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "maxBuyLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19326,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19328,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19330,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "finalizeTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 19332,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "publicSaleTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(VestingInfo)19340_storage": {
        "encoding": "inplace",
        "label": "struct GempadPrivateSale.VestingInfo",
        "members": [
          {
            "astId": 19335,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "initialRelease",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19337,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "cyclePercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19339,
            "contract": "@gempad/privatsale/contracts/GempadPrivateSale.sol:GempadPrivateSale",
            "label": "cycleInterval",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}