{
  "language": "Solidity",
  "sources": {
    "@gempad/generatetokens/contracts/AntiBotBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport '@openzeppelin/contracts/proxy/Clones.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\n\r\nimport '../libs/SafeERC20NoRevert.sol';\r\nimport '../interfaces/IUniswapV2Factory.sol';\r\nimport '../interfaces/IUniswapV2Router02.sol';\r\nimport '../interfaces/IGemAntiBot.sol';\r\nimport '../dividends/BabyTokenDividendTracker.sol';\r\nimport './BaseToken.sol';\r\n\r\ncontract AntiBotBabyToken is ERC20, Ownable, BaseToken {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Address for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant VERSION = 6;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping;\r\n\r\n    BabyTokenDividendTracker public dividendTracker;\r\n\r\n    address public rewardToken;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint256 public tokenRewardsFee;\r\n    uint256 public liquidityFee;\r\n    uint256 public marketingFee;\r\n    uint256 public totalFees;\r\n\r\n    address public _marketingWalletAddress;\r\n\r\n    uint256 public gasForProcessing;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    IGemAntiBot public gemAntiBot;\r\n    bool public enableAntiBot;\r\n\r\n    event ExcludeFromFees(address indexed account);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    constructor(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address[5] memory addrs, // reward, router, marketing wallet, dividendTracker, antibot\r\n        uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) payable ERC20(name_, symbol_) {\r\n        rewardToken = addrs[0];\r\n        _marketingWalletAddress = addrs[2];\r\n        require(owner_ != _marketingWalletAddress, 'Owner and marketing wallet cannot be the same');\r\n        require(!_marketingWalletAddress.isContract(), 'Marketing wallet cannot be a contract');\r\n        gemAntiBot = IGemAntiBot(addrs[4]);\r\n        gemAntiBot.setTokenOwner(owner_);\r\n        enableAntiBot = true;\r\n\r\n        tokenRewardsFee = feeSettings[0];\r\n        liquidityFee = feeSettings[1];\r\n        marketingFee = feeSettings[2];\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, 'Total fee is over 25%');\r\n        swapTokensAtAmount = totalSupply_.div(1000); // 0.1%\r\n\r\n        // use by default 300,000 gas to process auto-claiming dividends\r\n        gasForProcessing = 300000;\r\n\r\n        dividendTracker = BabyTokenDividendTracker(payable(Clones.clone(addrs[3])));\r\n        dividendTracker.initialize(rewardToken, minimumTokenBalanceForDividends_);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs[1]);\r\n        // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(owner_);\r\n        dividendTracker.excludeFromDividends(address(0xdead));\r\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n        // exclude from paying fees or having max transaction amount\r\n        _isExcludedFromFees[owner_] = true;\r\n        _isExcludedFromFees[_marketingWalletAddress] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(owner_, totalSupply_);\r\n\r\n        emit TokenCreated(owner_, address(this), TokenType.antiBotBaby, VERSION);\r\n    }\r\n\r\n    function setEnableAntiBot(bool _enable) external onlyOwner {\r\n        enableAntiBot = _enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        require(\r\n            amount > totalSupply() / 10 ** 5,\r\n            'BABYTOKEN: Amount must be greater than 0.001% of total supply'\r\n        );\r\n        swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function excludeFromFees(address account) external onlyOwner {\r\n        require(!_isExcludedFromFees[account], 'BABYTOKEN: Account is already excluded');\r\n        _isExcludedFromFees[account] = true;\r\n\r\n        emit ExcludeFromFees(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = true;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts);\r\n    }\r\n\r\n    function setMarketingWallet(address payable wallet) external onlyOwner {\r\n        require(wallet != address(0), 'BABYTOKEN: The marketing wallet cannot be the value of zero');\r\n        require(!wallet.isContract(), 'Marketing wallet cannot be a contract');\r\n        _marketingWalletAddress = wallet;\r\n    }\r\n\r\n    function setTokenRewardsFee(uint256 value) external onlyOwner {\r\n        tokenRewardsFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, 'Total fee is over 25%');\r\n    }\r\n\r\n    function setLiquiditFee(uint256 value) external onlyOwner {\r\n        liquidityFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, 'Total fee is over 25%');\r\n    }\r\n\r\n    function setMarketingFee(uint256 value) external onlyOwner {\r\n        marketingFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, 'Total fee is over 25%');\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            'BABYTOKEN: Automated market maker pair is already set to that value'\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(\r\n            newValue >= 200000 && newValue <= 500000,\r\n            'BABYTOKEN: gasForProcessing must be between 200,000 and 500,000'\r\n        );\r\n        require(newValue != gasForProcessing, 'BABYTOKEN: Cannot update gasForProcessing to same value');\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount) external onlyOwner {\r\n        dividendTracker.updateMinimumTokenBalanceForDividends(amount);\r\n    }\r\n\r\n    function getMinimumTokenBalanceForDividends() external view returns (uint256) {\r\n        return dividendTracker.minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) public view returns (uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account) public view returns (bool) {\r\n        return dividendTracker.isExcludedFromDividends(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(\r\n        address account\r\n    ) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(\r\n        uint256 index\r\n    ) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), 'ERC20: transfer from the zero address');\r\n        require(to != address(0), 'ERC20: transfer to the zero address');\r\n\r\n        if (enableAntiBot) {\r\n            gemAntiBot.onPreTransferCheck(from, to, amount);\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            from != owner() &&\r\n            to != owner() &&\r\n            totalFees > 0\r\n        ) {\r\n            swapping = true;\r\n\r\n            if (marketingFee > 0) {\r\n                uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\r\n                swapAndSendToFee(marketingTokens);\r\n            }\r\n\r\n            if (liquidityFee > 0) {\r\n                uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\r\n                swapAndLiquify(swapTokens);\r\n            }\r\n\r\n            uint256 sellTokens = balanceOf(address(this));\r\n            if (sellTokens > 0) {\r\n                swapAndSendDividends(sellTokens);\r\n            }\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee && totalFees > 0) {\r\n            uint256 fees = amount.mul(totalFees).div(100);\r\n            amount = amount.sub(fees);\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if (!swapping) {\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try dividendTracker.process(gas) returns (\r\n                uint256 iterations,\r\n                uint256 claims,\r\n                uint256 lastProcessedIndex\r\n            ) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n            } catch {}\r\n        }\r\n    }\r\n\r\n    function swapAndSendToFee(uint256 tokens) private {\r\n        uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(address(this));\r\n\r\n        swapTokensForCake(tokens);\r\n        uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(initialCAKEBalance);\r\n        IERC20(rewardToken).safeTransfer(_marketingWalletAddress, newBalance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForCake(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = rewardToken;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        swapTokensForCake(tokens);\r\n        uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\r\n        bool success = SafeERC20NoRevert.safeTransfer(\r\n            IERC20(rewardToken),\r\n            address(dividendTracker),\r\n            dividends\r\n        );\r\n        if (success) {\r\n            dividendTracker.distributeCAKEDividends(dividends);\r\n            emit SendDividends(tokens, dividends);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/AntiBotBuybackBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IERC20Extended.sol\";\r\nimport \"../interfaces/IGemAntiBot.sol\";\r\nimport \"../utils/Auth.sol\";\r\nimport \"../dividends/DividendDistributor.sol\";\r\nimport \"./BaseToken.sol\";\r\n\r\ncontract AntiBotBuybackBabyToken is IERC20Extended, Auth, BaseToken {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    uint256 public constant VERSION = 7;\r\n\r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n    uint8 private constant _decimals = 9;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    address public rewardToken;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    address public marketingFeeReceiver;\r\n\r\n    uint256 public liquidityFee; // default: 200\r\n    uint256 public buybackFee; // default: 300\r\n    uint256 public reflectionFee; // default: 800\r\n    uint256 public marketingFee; // default: 100\r\n    uint256 public totalFee;\r\n    uint256 public feeDenominator; // default: 10000\r\n\r\n    uint256 public targetLiquidity; // default: 25\r\n    uint256 public targetLiquidityDenominator; // default: 100\r\n\r\n    uint256 public buybackMultiplierNumerator; // default: 200\r\n    uint256 public buybackMultiplierDenominator; // default: 100\r\n    uint256 public buybackMultiplierTriggeredAt;\r\n    uint256 public buybackMultiplierLength; // default: 30 mins\r\n\r\n    bool public autoBuybackEnabled;\r\n\r\n    uint256 public autoBuybackCap;\r\n    uint256 public autoBuybackAccumulator;\r\n    uint256 public autoBuybackAmount;\r\n    uint256 public autoBuybackBlockPeriod;\r\n    uint256 public autoBuybackBlockLast;\r\n\r\n    DividendDistributor public distributor;\r\n\r\n    uint256 public distributorGas;\r\n\r\n    bool public swapEnabled;\r\n    uint256 public swapThreshold;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public buyBacker;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    IGemAntiBot public gemAntiBot;\r\n    bool public enableAntiBot;\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyBuybacker() {\r\n        require(buyBacker[msg.sender] == true, \"Not a buybacker\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address rewardToken_,\r\n        address router_,\r\n        address antiBot_,\r\n        uint256[5] memory feeSettings_\r\n    ) payable Auth(msg.sender) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_;\r\n\r\n        gemAntiBot = IGemAntiBot(antiBot_);\r\n        gemAntiBot.setTokenOwner(owner_);\r\n        enableAntiBot = true;\r\n\r\n        rewardToken = rewardToken_;\r\n        router = IUniswapV2Router02(router_);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        distributor = new DividendDistributor(rewardToken_, router_);\r\n\r\n        _initializeFees(feeSettings_);\r\n        _initializeLiquidityBuyBack();\r\n\r\n        distributorGas = 500_000;\r\n        swapEnabled = true;\r\n        swapThreshold = _totalSupply / 1000; // 0.1%\r\n\r\n        isFeeExempt[owner_] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        buyBacker[owner_] = true;\r\n\r\n        marketingFeeReceiver = owner_;\r\n        require(\r\n            !marketingFeeReceiver.isContract(),\r\n            \"Marketing wallet cannot be a contract\"\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        _allowances[address(this)][address(pair)] = _totalSupply;\r\n\r\n        _balances[owner_] = _totalSupply;\r\n\r\n        emit Transfer(address(0),owner_, _totalSupply);\r\n\r\n        emit TokenCreated(\r\n            owner_,\r\n            address(this),\r\n            TokenType.antiBotBuybackBaby,\r\n            VERSION\r\n        );\r\n\r\n    }\r\n\r\n    function _initializeFees(uint256[5] memory feeSettings_) internal {\r\n        _setFees(\r\n            feeSettings_[0], // liquidityFee\r\n            feeSettings_[1], // buybackFee\r\n            feeSettings_[2], // reflectionFee\r\n            feeSettings_[3], // marketingFee\r\n            feeSettings_[4] // feeDenominator\r\n        );\r\n    }\r\n\r\n    function _initializeLiquidityBuyBack() internal {\r\n        targetLiquidity = 25;\r\n        targetLiquidityDenominator = 100;\r\n\r\n        buybackMultiplierNumerator = 200;\r\n        buybackMultiplierDenominator = 100;\r\n        buybackMultiplierLength = 30 minutes;\r\n    }\r\n\r\n    function setEnableAntiBot(bool _enable) external authorized {\r\n        enableAntiBot = _enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (enableAntiBot) {\r\n            gemAntiBot.onPreTransferCheck(sender, recipient, amount);\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n        if (shouldAutoBuyback()) {\r\n            triggerAutoBuyback();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && totalFee > 0;\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if (selling) {\r\n            return getMultipliedFee();\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n    function getMultipliedFee() public view returns (uint256) {\r\n        if (\r\n            buybackMultiplierTriggeredAt.add(buybackMultiplierLength) >\r\n            block.timestamp\r\n        ) {\r\n            uint256 remainingTime = buybackMultiplierTriggeredAt\r\n                .add(buybackMultiplierLength)\r\n                .sub(block.timestamp);\r\n            uint256 feeIncrease = totalFee\r\n                .mul(buybackMultiplierNumerator)\r\n                .div(buybackMultiplierDenominator)\r\n                .sub(totalFee);\r\n            uint256 increasedFee = totalFee.add(\r\n                feeIncrease.mul(remainingTime).div(buybackMultiplierLength)\r\n            );\r\n            return\r\n                increasedFee > feeDenominator / 4\r\n                    ? feeDenominator / 4\r\n                    : increasedFee;\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(\r\n            feeDenominator\r\n        );\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n            ? 0\r\n            : liquidityFee;\r\n        uint256 amountToLiquify;\r\n        if (totalFee > 0) {\r\n            amountToLiquify = swapThreshold\r\n                .mul(dynamicLiquidityFee)\r\n                .div(totalFee)\r\n                .div(2);\r\n        }\r\n\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n        uint256 amountBNBLiquidity;\r\n        if (totalBNBFee > 0) {\r\n            amountBNBLiquidity = amountBNB\r\n                .mul(dynamicLiquidityFee)\r\n                .div(totalBNBFee)\r\n                .div(2);\r\n\r\n            uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(\r\n                totalBNBFee\r\n            );\r\n            uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(\r\n                totalBNBFee\r\n            );\r\n\r\n            try distributor.deposit{ value: amountBNBReflection }() {} catch {}\r\n            payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function shouldAutoBuyback() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            autoBuybackEnabled &&\r\n            autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number && // After N blocks from last buyback\r\n            address(this).balance >= autoBuybackAmount;\r\n    }\r\n\r\n    function triggerZeusBuyback(uint256 amount, bool triggerBuybackMultiplier)\r\n        external\r\n        authorized\r\n    {\r\n        buyTokens(amount, DEAD);\r\n        if (triggerBuybackMultiplier) {\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n    }\r\n\r\n    function clearBuybackMultiplier() external authorized {\r\n        buybackMultiplierTriggeredAt = 0;\r\n    }\r\n\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, DEAD);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if (autoBuybackAccumulator > autoBuybackCap) {\r\n            autoBuybackEnabled = false;\r\n        }\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    function setAutoBuybackSettings(\r\n        bool _enabled,\r\n        uint256 _cap,\r\n        uint256 _amount,\r\n        uint256 _period\r\n    ) external authorized {\r\n        require(_period > 0, \"Period must be greater than 0\");\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    function setBuybackMultiplierSettings(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 length\r\n    ) external authorized {\r\n        require(length <= 2 hours, \"Length must be less than 2 hours\");\r\n        require(numerator / denominator <= 2 && numerator > denominator);\r\n        buybackMultiplierNumerator = numerator;\r\n        buybackMultiplierDenominator = denominator;\r\n        buybackMultiplierLength = length;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt)\r\n        external\r\n        authorized\r\n    {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder) external authorized {\r\n        isFeeExempt[holder] = true;\r\n    }\r\n\r\n    function setBuyBacker(address acc, bool add) external authorized {\r\n        buyBacker[acc] = add;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _buybackFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketingFee,\r\n        uint256 _feeDenominator\r\n    ) public authorized {\r\n        _setFees(\r\n            _liquidityFee,\r\n            _buybackFee,\r\n            _reflectionFee,\r\n            _marketingFee,\r\n            _feeDenominator\r\n        );\r\n    }\r\n\r\n    function _setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _buybackFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketingFee,\r\n        uint256 _feeDenominator\r\n    ) internal {\r\n        liquidityFee = _liquidityFee;\r\n        buybackFee = _buybackFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(\r\n            _marketingFee\r\n        );\r\n        feeDenominator = _feeDenominator;\r\n        require(\r\n            totalFee <= feeDenominator / 4,\r\n            \"Total fee should not be greater than 1/4 of fee denominator\"\r\n        );\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver)\r\n        external\r\n        authorized\r\n    {\r\n        require(\r\n            _marketingFeeReceiver != marketingFeeReceiver,\r\n            \"Marketing wallet is already that address\"\r\n        );\r\n        require(\r\n            !_marketingFeeReceiver.isContract(),\r\n            \"Marketing wallet cannot be a contract\"\r\n        );\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        authorized\r\n    {\r\n        require(\r\n            _enabled && _amount >= _totalSupply / 100_000,\r\n            \"Swapback amount should be at least 0.001% of total supply\"\r\n        );\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator)\r\n        external\r\n        authorized\r\n    {\r\n        require(_denominator > 0, \"Denominator must be greater than 0\");\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(\r\n            gas >= 200_000 && gas <= 500_000,\r\n            \"gasForProcessing must be between 200,000 and 500,000\"\r\n        );\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/BabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\nimport \"../libs/SafeERC20NoRevert.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../dividends/BabyTokenDividendTracker.sol\";\r\nimport \"./BaseToken.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n\r\ncontract BabyToken is \r\n    Initializable,\r\n    ERC20Upgradeable,\r\n    OwnableUpgradeable,\r\n    BaseToken {\r\n\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n    using AddressUpgradeable for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant VERSION = 2;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping;\r\n\r\n    BabyTokenDividendTracker public dividendTracker;\r\n\r\n    address public rewardToken;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint256 public tokenRewardsFee;\r\n    uint256 public liquidityFee;\r\n    uint256 public marketingFee;\r\n    uint256 public totalFees;\r\n\r\n    address public _marketingWalletAddress;\r\n\r\n    uint256 public gasForProcessing;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event ExcludeFromFees(address indexed account);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event GasForProcessingUpdated(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\r\n        uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) external payable initializer{\r\n        __Ownable_init();\r\n        __ERC20_init(name_,symbol_);\r\n\r\n        rewardToken = addrs[0];\r\n        _marketingWalletAddress = addrs[2];\r\n        require(\r\n            owner_ != _marketingWalletAddress,\r\n            \"Owner and marketing wallet cannot be the same\"\r\n        );\r\n        require(\r\n            !_marketingWalletAddress.isContract(),\r\n            \"Marketing wallet cannot be a contract\"\r\n        );\r\n\r\n        tokenRewardsFee = feeSettings[0];\r\n        liquidityFee = feeSettings[1];\r\n        marketingFee = feeSettings[2];\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, \"Total fee is over 25%\");\r\n        swapTokensAtAmount = totalSupply_.div(1000); // 0.1%\r\n\r\n        // use by default 300,000 gas to process auto-claiming dividends\r\n        gasForProcessing = 300000;\r\n\r\n        dividendTracker = BabyTokenDividendTracker(\r\n            payable(Clones.clone(addrs[3]))\r\n        );\r\n       \r\n        dividendTracker.initialize(\r\n            rewardToken,\r\n            minimumTokenBalanceForDividends_\r\n        );\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs[1]);\r\n        // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _transferOwnership(owner_);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(owner());\r\n        dividendTracker.excludeFromDividends(address(0xdead));\r\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n        // exclude from paying fees or having max transaction amount\r\n        _isExcludedFromFees[owner_] = true;\r\n        _isExcludedFromFees[_marketingWalletAddress] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(owner_, totalSupply_);\r\n\r\n        emit TokenCreated(owner_, address(this), TokenType.baby, VERSION);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        require(\r\n            amount > totalSupply() / 10**5,\r\n            \"BABYTOKEN: Amount must be greater than 0.001% of total supply\"\r\n        );\r\n        swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function excludeFromFees(address account) external onlyOwner {\r\n        require(\r\n            !_isExcludedFromFees[account],\r\n            \"BABYTOKEN: Account is already excluded\"\r\n        );\r\n        _isExcludedFromFees[account] = true;\r\n\r\n        emit ExcludeFromFees(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = true;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts);\r\n    }\r\n\r\n    function setMarketingWallet(address payable wallet) external onlyOwner {\r\n        require(\r\n            wallet != address(0),\r\n            \"BABYTOKEN: The marketing wallet cannot be the value of zero\"\r\n        );\r\n        require(!wallet.isContract(), \"Marketing wallet cannot be a contract\");\r\n        _marketingWalletAddress = wallet;\r\n    }\r\n\r\n    function setTokenRewardsFee(uint256 value) external onlyOwner {\r\n        tokenRewardsFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, \"Total fee is over 25%\");\r\n    }\r\n\r\n    function setLiquiditFee(uint256 value) external onlyOwner {\r\n        liquidityFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, \"Total fee is over 25%\");\r\n    }\r\n\r\n    function setMarketingFee(uint256 value) external onlyOwner {\r\n        marketingFee = value;\r\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n        require(totalFees <= 25, \"Total fee is over 25%\");\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"BABYTOKEN: Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(\r\n            newValue >= 200000 && newValue <= 500000,\r\n            \"BABYTOKEN: gasForProcessing must be between 200,000 and 500,000\"\r\n        );\r\n        require(\r\n            newValue != gasForProcessing,\r\n            \"BABYTOKEN: Cannot update gasForProcessing to same value\"\r\n        );\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        dividendTracker.updateMinimumTokenBalanceForDividends(amount);\r\n    }\r\n\r\n    function getMinimumTokenBalanceForDividends()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return dividendTracker.isExcludedFromDividends(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (\r\n            uint256 iterations,\r\n            uint256 claims,\r\n            uint256 lastProcessedIndex\r\n        ) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(\r\n            iterations,\r\n            claims,\r\n            lastProcessedIndex,\r\n            false,\r\n            gas,\r\n            tx.origin\r\n        );\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            from != owner() &&\r\n            to != owner() &&\r\n            totalFees > 0\r\n        ) {\r\n            swapping = true;\r\n\r\n            if (marketingFee > 0) {\r\n                uint256 marketingTokens = contractTokenBalance\r\n                    .mul(marketingFee)\r\n                    .div(totalFees);\r\n                swapAndSendToFee(marketingTokens);\r\n            }\r\n\r\n            if (liquidityFee > 0) {\r\n                uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(\r\n                    totalFees\r\n                );\r\n                swapAndLiquify(swapTokens);\r\n            }\r\n\r\n            uint256 sellTokens = balanceOf(address(this));\r\n            if (sellTokens > 0) {\r\n                swapAndSendDividends(sellTokens);\r\n            }\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee && totalFees > 0) {\r\n            uint256 fees = amount.mul(totalFees).div(100);\r\n            amount = amount.sub(fees);\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try\r\n            dividendTracker.setBalance(payable(from), balanceOf(from))\r\n        {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if (!swapping) {\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try dividendTracker.process(gas) returns (\r\n                uint256 iterations,\r\n                uint256 claims,\r\n                uint256 lastProcessedIndex\r\n            ) {\r\n                emit ProcessedDividendTracker(\r\n                    iterations,\r\n                    claims,\r\n                    lastProcessedIndex,\r\n                    true,\r\n                    gas,\r\n                    tx.origin\r\n                );\r\n            } catch {}\r\n        }\r\n    }\r\n\r\n    function swapAndSendToFee(uint256 tokens) private {\r\n        uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        swapTokensForCake(tokens);\r\n        uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(\r\n            initialCAKEBalance\r\n        );\r\n        IERC20(rewardToken).safeTransfer(_marketingWalletAddress, newBalance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForCake(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = rewardToken;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        swapTokensForCake(tokens);\r\n        uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\r\n        bool success = SafeERC20NoRevert.safeTransfer(\r\n            IERC20(rewardToken),\r\n            address(dividendTracker),\r\n            dividends\r\n        );\r\n        if (success) {\r\n            dividendTracker.distributeCAKEDividends(dividends);\r\n            emit SendDividends(tokens, dividends);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/BaseToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nenum TokenType {\r\n    standard,\r\n    antiBotStandard,\r\n    liquidityGenerator,\r\n    antiBotLiquidityGenerator,\r\n    baby,\r\n    antiBotBaby,\r\n    buybackBaby,\r\n    antiBotBuybackBaby\r\n}\r\n\r\nabstract contract BaseToken {\r\n    event TokenCreated(\r\n        address indexed owner,\r\n        address indexed token,\r\n        TokenType tokenType,\r\n        uint256 version\r\n    );\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/BuybackBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IERC20Extended.sol\";\r\nimport \"../utils/Auth.sol\";\r\nimport \"../dividends/DividendDistributor.sol\";\r\nimport \"./BaseToken.sol\";\r\n\r\ncontract BuybackBabyToken is IERC20Extended, Auth, BaseToken {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    uint256 public constant VERSION = 3;\r\n\r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n    uint8 private constant _decimals = 9;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    address public rewardToken;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    address public marketingFeeReceiver;\r\n\r\n    uint256 public liquidityFee; // default: 200\r\n    uint256 public buybackFee; // default: 300\r\n    uint256 public reflectionFee; // default: 800\r\n    uint256 public marketingFee; // default: 100\r\n    uint256 public totalFee;\r\n    uint256 public feeDenominator; // default: 10000\r\n\r\n    uint256 public targetLiquidity; // default: 25\r\n    uint256 public targetLiquidityDenominator; // default: 100\r\n\r\n    uint256 public buybackMultiplierNumerator; // default: 200\r\n    uint256 public buybackMultiplierDenominator; // default: 100\r\n    uint256 public buybackMultiplierTriggeredAt;\r\n    uint256 public buybackMultiplierLength; // default: 30 mins\r\n\r\n    bool public autoBuybackEnabled;\r\n\r\n    uint256 public autoBuybackCap;\r\n    uint256 public autoBuybackAccumulator;\r\n    uint256 public autoBuybackAmount;\r\n    uint256 public autoBuybackBlockPeriod;\r\n    uint256 public autoBuybackBlockLast;\r\n\r\n    DividendDistributor public distributor;\r\n\r\n    uint256 public distributorGas;\r\n\r\n    bool public swapEnabled;\r\n    uint256 public swapThreshold;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public buyBacker;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyBuybacker() {\r\n        require(buyBacker[msg.sender] == true, \"Not a buybacker\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address rewardToken_,\r\n        address router_,\r\n        uint256[5] memory feeSettings_\r\n    ) payable Auth(msg.sender) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_;\r\n\r\n        rewardToken = rewardToken_;\r\n        router = IUniswapV2Router02(router_);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        distributor = new DividendDistributor(rewardToken_, router_);\r\n\r\n        _initializeFees(feeSettings_);\r\n        _initializeLiquidityBuyBack();\r\n\r\n        distributorGas = 500_000;\r\n        swapEnabled = true;\r\n        swapThreshold = _totalSupply / 1000; // 0.1%\r\n\r\n        isFeeExempt[owner_] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        buyBacker[owner_] = true;\r\n\r\n        marketingFeeReceiver = owner_;\r\n        require(\r\n            !marketingFeeReceiver.isContract(),\r\n            \"Marketing wallet cannot be a contract\"\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        _allowances[address(this)][address(pair)] = _totalSupply;\r\n\r\n        _balances[owner_] = _totalSupply;\r\n        emit Transfer(address(0), owner_, _totalSupply);\r\n\r\n        emit TokenCreated(\r\n            owner_,\r\n            address(this),\r\n            TokenType.buybackBaby,\r\n            VERSION\r\n        );\r\n\r\n    }\r\n\r\n    function _initializeFees(uint256[5] memory feeSettings_) internal {\r\n        _setFees(\r\n            feeSettings_[0], // liquidityFee\r\n            feeSettings_[1], // buybackFee\r\n            feeSettings_[2], // reflectionFee\r\n            feeSettings_[3], // marketingFee\r\n            feeSettings_[4] // feeDenominator\r\n        );\r\n    }\r\n\r\n    function _initializeLiquidityBuyBack() internal {\r\n        targetLiquidity = 25;\r\n        targetLiquidityDenominator = 100;\r\n\r\n        buybackMultiplierNumerator = 200;\r\n        buybackMultiplierDenominator = 100;\r\n        buybackMultiplierLength = 30 minutes;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n        if (shouldAutoBuyback()) {\r\n            triggerAutoBuyback();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && totalFee > 0;\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if (selling) {\r\n            return getMultipliedFee();\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n    function getMultipliedFee() public view returns (uint256) {\r\n        if (\r\n            buybackMultiplierTriggeredAt.add(buybackMultiplierLength) >\r\n            block.timestamp\r\n        ) {\r\n            uint256 remainingTime = buybackMultiplierTriggeredAt\r\n                .add(buybackMultiplierLength)\r\n                .sub(block.timestamp);\r\n            uint256 feeIncrease = totalFee\r\n                .mul(buybackMultiplierNumerator)\r\n                .div(buybackMultiplierDenominator)\r\n                .sub(totalFee);\r\n\r\n            uint256 increasedFee = totalFee.add(\r\n                feeIncrease.mul(remainingTime).div(buybackMultiplierLength)\r\n            );\r\n            return\r\n                increasedFee > feeDenominator / 4\r\n                    ? feeDenominator / 4\r\n                    : increasedFee;\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(\r\n            feeDenominator\r\n        );\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n            ? 0\r\n            : liquidityFee;\r\n        uint256 amountToLiquify;\r\n        if (totalFee > 0) {\r\n            amountToLiquify = swapThreshold\r\n                .mul(dynamicLiquidityFee)\r\n                .div(totalFee)\r\n                .div(2);\r\n        }\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n        uint256 amountBNBLiquidity;\r\n        if (totalBNBFee > 0) {\r\n            amountBNBLiquidity = amountBNB\r\n                .mul(dynamicLiquidityFee)\r\n                .div(totalBNBFee)\r\n                .div(2);\r\n\r\n            uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(\r\n                totalBNBFee\r\n            );\r\n            uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(\r\n                totalBNBFee\r\n            );\r\n\r\n            try distributor.deposit{ value: amountBNBReflection }() {} catch {}\r\n            payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function shouldAutoBuyback() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            autoBuybackEnabled &&\r\n            autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number && // After N blocks from last buyback\r\n            address(this).balance >= autoBuybackAmount;\r\n    }\r\n\r\n    function triggerZeusBuyback(uint256 amount, bool triggerBuybackMultiplier)\r\n        external\r\n        authorized\r\n    {\r\n        buyTokens(amount, DEAD);\r\n        if (triggerBuybackMultiplier) {\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n    }\r\n\r\n    function clearBuybackMultiplier() external authorized {\r\n        buybackMultiplierTriggeredAt = 0;\r\n    }\r\n\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, DEAD);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if (autoBuybackAccumulator > autoBuybackCap) {\r\n            autoBuybackEnabled = false;\r\n        }\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    function setAutoBuybackSettings(\r\n        bool _enabled,\r\n        uint256 _cap,\r\n        uint256 _amount,\r\n        uint256 _period\r\n    ) external authorized {\r\n        require(_period > 0, \"Period must be greater than 0\");\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    function setBuybackMultiplierSettings(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 length\r\n    ) external authorized {\r\n        require(length <= 2 hours, \"Length must be less than 2 hours\");\r\n        require(numerator / denominator <= 2 && numerator > denominator);\r\n        buybackMultiplierNumerator = numerator;\r\n        buybackMultiplierDenominator = denominator;\r\n        buybackMultiplierLength = length;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt)\r\n        external\r\n        authorized\r\n    {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder) external authorized {\r\n        isFeeExempt[holder] = true;\r\n    }\r\n\r\n    function setBuyBacker(address acc, bool add) external authorized {\r\n        buyBacker[acc] = add;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _buybackFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketingFee,\r\n        uint256 _feeDenominator\r\n    ) public authorized {\r\n        _setFees(\r\n            _liquidityFee,\r\n            _buybackFee,\r\n            _reflectionFee,\r\n            _marketingFee,\r\n            _feeDenominator\r\n        );\r\n    }\r\n\r\n    function _setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _buybackFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketingFee,\r\n        uint256 _feeDenominator\r\n    ) internal {\r\n        liquidityFee = _liquidityFee;\r\n        buybackFee = _buybackFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(\r\n            _marketingFee\r\n        );\r\n        feeDenominator = _feeDenominator;\r\n        require(\r\n            totalFee <= feeDenominator / 4,\r\n            \"Total fee should not be greater than 1/4 of fee denominator\"\r\n        );\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver)\r\n        external\r\n        authorized\r\n    {\r\n        require(\r\n            _marketingFeeReceiver != marketingFeeReceiver,\r\n            \"Marketing wallet is already that address\"\r\n        );\r\n        require(\r\n            !_marketingFeeReceiver.isContract(),\r\n            \"Marketing wallet cannot be a contract\"\r\n        );\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        authorized\r\n    {\r\n        require(\r\n            _enabled && _amount >= _totalSupply / 100_000,\r\n            \"Swapback amount should be at least 0.001% of total supply\"\r\n        );\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator)\r\n        external\r\n        authorized\r\n    {\r\n        require(_denominator > 0, \"Denominator must be greater than 0\");\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(\r\n            gas >= 200_000 && gas <= 500_000,\r\n            \"gasForProcessing must be between 200,000 and 500,000\"\r\n        );\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/factories/AntibotBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../AntiBotBabyToken.sol\";\r\nimport \"../../interfaces/IBabyToken.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n\r\ncontract AntibotBabyTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n  function create(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 totalSupply,\r\n    address[5] memory addrs, // reward, router, marketing wallet, dividendTracker, anti bot\r\n    uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n    uint256 minimumTokenBalanceForDividends_\r\n  ) external payable enoughFee nonReentrant returns (address token) {\r\n    refundExcessiveFee();\r\n    payable(feeTo).sendValue(flatFee);\r\n    AntiBotBabyToken btoken = new AntiBotBabyToken(\r\n            msg.sender,\r\n            name,\r\n            symbol,\r\n            totalSupply,\r\n            addrs,\r\n            feeSettings,\r\n            minimumTokenBalanceForDividends_\r\n        );\r\n    btoken.transferOwnership(msg.sender);\r\n    assignTokenToOwner(msg.sender, address(btoken), 6);\r\n    emit TokenCreated(msg.sender, address(btoken), 6);\r\n    return address(btoken);\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/AntibotBuyBackBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../AntiBotBuybackBabyToken.sol\";\r\n\r\n\r\ncontract AntibotBuyBackBabyTokenFactory is TokenFactoryBase {\r\n    using Address for address payable;\r\n\r\n    constructor(address factoryManager_, address implementation_)\r\n        TokenFactoryBase(factoryManager_, implementation_)\r\n    {}\r\n\r\n    function create(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address rewardToken_,\r\n        address router_,\r\n        address antiBot_,\r\n        uint256[5] memory feeSettings_\r\n    ) external payable enoughFee nonReentrant returns (address) {\r\n        refundExcessiveFee();\r\n        payable(feeTo).sendValue(flatFee);\r\n        AntiBotBuybackBabyToken btoken = new AntiBotBuybackBabyToken(\r\n            msg.sender,\r\n            name_,\r\n            symbol_,\r\n            totalSupply_,\r\n            rewardToken_,\r\n            router_,\r\n            antiBot_,\r\n            feeSettings_\r\n        );\r\n\r\n        btoken.transferOwnership(payable(msg.sender));\r\n        assignTokenToOwner(msg.sender, address(btoken), 7);\r\n        emit TokenCreated(msg.sender, address(btoken), 7);\r\n        return address(btoken);\r\n    }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../BuybackBabyToken.sol\";\r\n\r\n\r\ncontract BuyBackBabyTokenFactory is TokenFactoryBase {\r\n    using Address for address payable;\r\n\r\n    constructor(address factoryManager_, address implementation_)\r\n        TokenFactoryBase(factoryManager_, implementation_)\r\n    {}\r\n\r\n    function create(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address rewardToken_,\r\n        address router_,\r\n        uint256[5] memory feeSettings_\r\n    ) external payable enoughFee nonReentrant returns (address) {\r\n        refundExcessiveFee();\r\n        payable(feeTo).sendValue(flatFee);\r\n        BuybackBabyToken btoken = new BuybackBabyToken(\r\n            msg.sender,\r\n            name_,\r\n            symbol_,\r\n            totalSupply_,\r\n            rewardToken_,\r\n            router_,\r\n            feeSettings_\r\n            // feeTo\r\n        );\r\n        btoken.transferOwnership(payable(msg.sender));\r\n        assignTokenToOwner(msg.sender, address(btoken), 3);\r\n        emit TokenCreated(msg.sender, address(btoken), 3);\r\n        return address(btoken);\r\n    }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4; \r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../../interfaces/IFactoryManager.sol\";\r\n\r\n\r\ncontract TokenFactoryBase is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using Address for address payable;\r\n\r\n  address public factoryManager;\r\n  address public implementation;\r\n  address public feeTo;\r\n  uint256 public flatFee;\r\n\r\n  event TokenCreated(\r\n      address indexed owner,\r\n      address indexed token,\r\n      uint8 tokenType\r\n  );\r\n\r\n  modifier enoughFee() {\r\n    require(msg.value >= flatFee, \"Flat fee\");\r\n    _;\r\n  }\r\n\r\n  constructor(address factoryManager_, address implementation_) {\r\n    factoryManager = factoryManager_;\r\n    implementation = implementation_;\r\n    feeTo = msg.sender;\r\n    flatFee = 10_000_000 gwei;\r\n  }\r\n\r\n  function setImplementation(address implementation_) external onlyOwner {\r\n    implementation = implementation_;\r\n  }\r\n\r\n  function setFeeTo(address feeReceivingAddress) external onlyOwner {\r\n    feeTo = feeReceivingAddress;\r\n  }\r\n\r\n  function setFlatFee(uint256 fee) external onlyOwner {\r\n    flatFee = fee;\r\n  }\r\n\r\n  function assignTokenToOwner(address owner, address token, uint8 tokenType) internal {\r\n    IFactoryManager(factoryManager).assignTokensToOwner(owner, token, tokenType);\r\n  }\r\n\r\n  function refundExcessiveFee() internal {\r\n    uint256 refund = msg.value.sub(flatFee);\r\n    if (refund > 0) {\r\n      payable(msg.sender).sendValue(refund);\r\n    }\r\n  }\r\n}\r\n"
    },
    "@gempad/generatetokens/dividends/BabyTokenDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../libs/SafeMathInt.sol\";\r\nimport \"../libs/SafeMathUint.sol\";\r\nimport \"../libs/SafeERC20NoRevert.sol\";\r\nimport \"../libs/IterableMapping.sol\";\r\nimport \"./DividendPayingToken.sol\";\r\n\r\n\r\n\r\ncontract BabyTokenDividendTracker is OwnableUpgradeable, DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n\r\n    function initialize(\r\n        address rewardToken_,\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) external initializer {\r\n        DividendPayingToken.__DividendPayingToken_init(\r\n            rewardToken_,\r\n            \"DIVIDEND_TRACKER\",\r\n            \"DIVIDEND_TRACKER\"\r\n        );\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = minimumTokenBalanceForDividends_;\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(\r\n            false,\r\n            \"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main BABYTOKEN contract.\"\r\n        );\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return excludedFromDividends[account];\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(\r\n            newClaimWait >= 3600 && newClaimWait <= 86400,\r\n            \"Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\"\r\n        );\r\n        require(\r\n            newClaimWait != claimWait,\r\n            \"Dividend_Tracker: Cannot update claimWait to same value\"\r\n        );\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minimumTokenBalanceForDividends = amount;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(\r\n                    int256(lastProcessedIndex)\r\n                );\r\n            } else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(\r\n                    int256(processesUntilEndOfArray)\r\n                );\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\r\n            ? nextClaimTime.sub(block.timestamp)\r\n            : 0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (index >= tokenHoldersMap.size()) {\r\n            return (address(0), -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if (lastClaimTime > block.timestamp) {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n        if (newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        } else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/dividends/DividendDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IERC20Extended.sol\";\r\nimport \"../interfaces/IDividendDistributor.sol\";\r\n\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20Extended public rewardToken;\r\n    IUniswapV2Router02 public router;\r\n\r\n    address[] public shareholders;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor;\r\n\r\n    uint256 public minPeriod;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initializer() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(address rewardToken_, address router_) {\r\n        _token = msg.sender;\r\n        rewardToken = IERC20Extended(rewardToken_);\r\n        router = IUniswapV2Router02(router_);\r\n\r\n        dividendsPerShareAccuracyFactor = 10**36;\r\n        minPeriod = 1 hours;\r\n        minDistribution = 1 * (10**rewardToken.decimals());\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(rewardToken);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = rewardToken.balanceOf(address(this)).sub(\r\n            balanceBefore\r\n        );\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            IERC20(address(rewardToken)).safeTransfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/dividends/DividendPayingToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IDividendPayingToken.sol\";\r\nimport \"../interfaces/IDividendPayingTokenOptional.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../libs/SafeMathInt.sol\";\r\nimport \"../libs/SafeMathUint.sol\";\r\nimport \"../libs/SafeERC20NoRevert.sol\";\r\nimport \"../libs/IterableMapping.sol\";\r\n\r\n\r\n\r\n\r\n\r\n/// @title Dividend-Paying Token\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as dividends and allows token holders to withdraw their dividends.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract DividendPayingToken is\r\n    ERC20Upgradeable,\r\n    OwnableUpgradeable,\r\n    IDividendPayingToken,\r\n    IDividendPayingTokenOptional\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    address public rewardToken;\r\n\r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    // About dividendCorrection:\r\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n    //   `dividendOf(_user)` should not be changed,\r\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    function __DividendPayingToken_init(\r\n        address _rewardToken,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) internal onlyInitializing {\r\n        __Ownable_init();\r\n        __ERC20_init(_name, _symbol);\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function distributeCAKEDividends(uint256 amount) public onlyOwner {\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n\r\n            bool success = SafeERC20NoRevert.safeTransfer(\r\n                IERC20(rewardToken),\r\n                user,\r\n                _withdrawableDividend\r\n            );\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    /// @dev Internal function that transfer tokens from one address to another.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param from The address to transfer from.\r\n    /// @param to The address to transfer to.\r\n    /// @param value The amount to be transferred.\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare\r\n            .mul(value)\r\n            .toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\r\n            .add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\r\n            _magCorrection\r\n        );\r\n    }\r\n\r\n    /// @dev Internal function that mints tokens to an account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}"
    },
    "@gempad/generatetokens/interfaces/IBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBabyToken {\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\r\n        uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IDividendDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\n\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IDividendPayingToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\n\r\n/// @title Dividend-Paying Token Interface\r\n/// @dev An interface for a dividend-paying token contract.\r\ninterface IDividendPayingToken {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n    function withdrawDividend() external;\r\n\r\n    /// @dev This event MUST emit when ether is distributed to token holders.\r\n    /// @param from The address which sends ether to this contract.\r\n    /// @param weiAmount The amount of distributed ether in wei.\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n    /// @dev This event MUST emit when an address withdraws their dividend.\r\n    /// @param to The address which withdraws ether from this contract.\r\n    /// @param weiAmount The amount of withdrawn ether in wei.\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IDividendPayingTokenOptional.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\n/// @title Dividend-Paying Token Optional Interface\r\n/// @dev OPTIONAL functions for a dividend-paying token contract.\r\ninterface IDividendPayingTokenOptional {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}"
    },
    "@gempad/generatetokens/interfaces/IERC20Extended.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\ninterface IERC20Extended {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IFactoryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactoryManager {\r\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IGemAntiBot.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGemAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/IterableMapping.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n        public\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/SafeERC20NoRevert.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title SafeERC20NoRevert\r\n * @dev Taken from OpenZeppelin's SafeERC20 implementation, just return a bool value without reverting\r\n * Clients using this function need to check for the return value themselves.\r\n */\r\nlibrary SafeERC20NoRevert {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        (bool success, bytes memory returndata) = address(token).call(\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n        return\r\n            success &&\r\n            (returndata.length == 0 || abi.decode(returndata, (bool))) &&\r\n            address(token).code.length > 0;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/SafeMathInt.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/SafeMathUint.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/utils/Auth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n"
    },
    "@gempad/locker/contracts/GempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nimport \"../interfaces/IGempadVestingLock.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../utils/FullMath.sol\";\r\n\r\ncontract GempadVestingLock is IGempadVestingLock, Pausable {\r\n    using Address for address payable;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Lock {\r\n        uint256 id;\r\n        address token;\r\n        address owner;\r\n        uint256 amount;\r\n        uint256 lockDate;\r\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\r\n        uint256 tgeBps; // In bips. Is 0 for normal locks\r\n        uint256 cycle; // Is 0 for normal locks\r\n        uint256 cycleBps; // In bips. Is 0 for normal locks\r\n        uint256 unlockedAmount;\r\n        string description;\r\n    }\r\n\r\n    struct CumulativeLockInfo {\r\n        address token;\r\n        address factory;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 private constant ID_PADDING = 1_000_000;\r\n\r\n    Lock[] private _locks;\r\n    mapping(address => EnumerableSet.UintSet) private _userLpLockIds;\r\n    mapping(address => EnumerableSet.UintSet) private _userNormalLockIds;\r\n\r\n    EnumerableSet.AddressSet private _lpLockedTokens;\r\n    EnumerableSet.AddressSet private _normalLockedTokens;\r\n    mapping(address => CumulativeLockInfo) public cumulativeLockInfo;\r\n    mapping(address => EnumerableSet.UintSet) private _tokenToLockIds;\r\n\r\n    event LockAdded(\r\n        uint256 indexed id,\r\n        address token,\r\n        address owner,\r\n        uint256 amount,\r\n        bool isLpToken,\r\n        uint256 unlockDate\r\n    );\r\n    event VestingLockAdded(\r\n        uint256 indexed id,\r\n        address token,\r\n        address owner,\r\n        uint256 amount,\r\n        bool isLpToken,\r\n        uint256 TGE,\r\n        uint256 cycleShare,\r\n        uint256 interval,\r\n        uint256 unlockDate\r\n    );\r\n    event LockUpdated(\r\n        uint256 indexed id,\r\n        address token,\r\n        address owner,\r\n        uint256 newAmount,\r\n        uint256 newUnlockDate\r\n    );\r\n    event LockRemoved(\r\n        uint256 indexed id,\r\n        address token,\r\n        address owner,\r\n        uint256 amount,\r\n        uint256 unlockedAt\r\n    );\r\n    event LockVested(\r\n        uint256 indexed id,\r\n        address token,\r\n        address owner,\r\n        uint256 amount,\r\n        uint256 total,\r\n        uint256 timestamp\r\n    );\r\n    event LockDescriptionChanged(uint256 lockId);\r\n    event LockOwnerChanged(uint256 lockId, address owner, address newOwner);\r\n\r\n    modifier validLock(uint256 lockId) {\r\n        _getActualIndex(lockId);\r\n        _;\r\n    }\r\n\r\n    function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external override returns (uint256 id) {\r\n        require(\r\n            unlockDate > block.timestamp,\r\n            \"Unlock date should be in the future\"\r\n        );\r\n        require(amount > 0, \"Amount should be greater than 0\");\r\n        id = _createLock(\r\n            owner,\r\n            token,\r\n            isLpToken,\r\n            amount,\r\n            unlockDate,\r\n            0,\r\n            0,\r\n            0,\r\n            description\r\n        );\r\n        _safeTransferFromEnsureExactAmount(\r\n            token,\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        emit LockAdded(id, token, owner, amount,isLpToken, unlockDate);\r\n        return id;\r\n    }\r\n\r\n    function vestingLock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) external override returns (uint256 id) {\r\n        require(tgeDate > block.timestamp, \"TGE date should be in the future\");\r\n        require(cycle > 0, \"Invalid cycle\");\r\n        require(tgeBps > 0 && tgeBps < 10_000, \"Invalid bips for TGE\");\r\n        require(cycleBps > 0 && cycleBps < 10_000, \"Invalid bips for cycle\");\r\n        require(\r\n            tgeBps + cycleBps <= 10_000,\r\n            \"Sum of TGE bps and cycle should be less than 10000\"\r\n        );\r\n        require(amount > 0, \"Amount should be greater than 0\");\r\n        id = _createLock(\r\n            owner,\r\n            token,\r\n            isLpToken,\r\n            amount,\r\n            tgeDate,\r\n            tgeBps,\r\n            cycle,\r\n            cycleBps,\r\n            description\r\n        );\r\n        _safeTransferFromEnsureExactAmount(\r\n            token,\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        emit VestingLockAdded(id, token, owner, amount, isLpToken, tgeBps, cycleBps, cycle, tgeDate);\r\n        return id;\r\n    }\r\n\r\n    function multipleVestingLock(\r\n        address[] calldata owners,\r\n        uint256[] calldata amounts,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) external override returns (uint256[] memory) {\r\n        require(owners.length == amounts.length, \"Length mismatched\");\r\n        require(tgeDate > block.timestamp, \"TGE date should be in the future\");\r\n        require(cycle > 0, \"Invalid cycle\");\r\n        require(tgeBps > 0 && tgeBps < 10_000, \"Invalid bips for TGE\");\r\n        require(cycleBps > 0 && cycleBps < 10_000, \"Invalid bips for cycle\");\r\n        require(\r\n            tgeBps + cycleBps <= 10_000,\r\n            \"Sum of TGE bps and cycle should be less than 10000\"\r\n        );\r\n        return\r\n            _multipleVestingLock(\r\n                owners,\r\n                amounts,\r\n                token,\r\n                isLpToken,\r\n                [tgeDate, tgeBps, cycle, cycleBps],\r\n                description\r\n            );\r\n    }\r\n\r\n    function _multipleVestingLock(\r\n        address[] calldata owners,\r\n        uint256[] calldata amounts,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256[4] memory vestingSettings, // avoid stack too deep\r\n        string memory description\r\n    ) internal returns (uint256[] memory) {\r\n        uint256 sumAmount = _sumAmount(amounts);\r\n        uint256 count = owners.length;\r\n        uint256[] memory ids = new uint256[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            ids[i] = _createLock(\r\n                owners[i],\r\n                token,\r\n                isLpToken,\r\n                amounts[i],\r\n                vestingSettings[0], // TGE date\r\n                vestingSettings[1], // TGE bps\r\n                vestingSettings[2], // cycle\r\n                vestingSettings[3], // cycle bps\r\n                description\r\n            );\r\n            emit VestingLockAdded(\r\n                ids[i],\r\n                token,\r\n                owners[i],\r\n                amounts[i],\r\n                isLpToken,\r\n                vestingSettings[1], // TGE bps\r\n                vestingSettings[3], // cycle bps\r\n                vestingSettings[2], // cycle\r\n                vestingSettings[0] // TGE date\r\n            );\r\n        }\r\n        _safeTransferFromEnsureExactAmount(\r\n            token,\r\n            msg.sender,\r\n            address(this),\r\n            sumAmount\r\n        );\r\n        return ids;\r\n    }\r\n\r\n    function _sumAmount(uint256[] calldata amounts)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            if (amounts[i] == 0) {\r\n                revert(\"Amount cant be zero\");\r\n            }\r\n            sum += amounts[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function _createLock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) internal returns (uint256 id) {\r\n        if (isLpToken) {\r\n            address possibleFactoryAddress = _parseFactoryAddress(token);\r\n            id = _lockLpToken(\r\n                owner,\r\n                token,\r\n                possibleFactoryAddress,\r\n                amount,\r\n                tgeDate,\r\n                tgeBps,\r\n                cycle,\r\n                cycleBps,\r\n                description\r\n            );\r\n        } else {\r\n            id = _lockNormalToken(\r\n                owner,\r\n                token,\r\n                amount,\r\n                tgeDate,\r\n                tgeBps,\r\n                cycle,\r\n                cycleBps,\r\n                description\r\n            );\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function _lockLpToken(\r\n        address owner,\r\n        address token,\r\n        address factory,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) private returns (uint256 id) {\r\n        id = _registerLock(\r\n            owner,\r\n            token,\r\n            amount,\r\n            tgeDate,\r\n            tgeBps,\r\n            cycle,\r\n            cycleBps,\r\n            description\r\n        );\r\n        _userLpLockIds[owner].add(id);\r\n        _lpLockedTokens.add(token);\r\n\r\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\r\n        if (tokenInfo.token == address(0)) {\r\n            tokenInfo.token = token;\r\n            tokenInfo.factory = factory;\r\n        }\r\n        tokenInfo.amount = tokenInfo.amount + amount;\r\n\r\n        _tokenToLockIds[token].add(id);\r\n    }\r\n\r\n    function _lockNormalToken(\r\n        address owner,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) private returns (uint256 id) {\r\n        id = _registerLock(\r\n            owner,\r\n            token,\r\n            amount,\r\n            tgeDate,\r\n            tgeBps,\r\n            cycle,\r\n            cycleBps,\r\n            description\r\n        );\r\n        _userNormalLockIds[owner].add(id);\r\n        _normalLockedTokens.add(token);\r\n\r\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\r\n        if (tokenInfo.token == address(0)) {\r\n            tokenInfo.token = token;\r\n            tokenInfo.factory = address(0);\r\n        }\r\n        tokenInfo.amount = tokenInfo.amount + amount;\r\n\r\n        _tokenToLockIds[token].add(id);\r\n    }\r\n\r\n    function _registerLock(\r\n        address owner,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) private whenNotPaused returns (uint256 id) {\r\n        id = _locks.length + ID_PADDING;\r\n        Lock memory newLock = Lock({\r\n            id: id,\r\n            token: token,\r\n            owner: owner,\r\n            amount: amount,\r\n            lockDate: block.timestamp,\r\n            tgeDate: tgeDate,\r\n            tgeBps: tgeBps,\r\n            cycle: cycle,\r\n            cycleBps: cycleBps,\r\n            unlockedAmount: 0,\r\n            description: description\r\n        });\r\n        _locks.push(newLock);\r\n    }\r\n\r\n    function unlock(uint256 lockId) external override validLock(lockId) {\r\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\r\n        require(\r\n            userLock.owner == msg.sender,\r\n            \"You are not the owner of this lock\"\r\n        );\r\n\r\n        if (userLock.tgeBps > 0) {\r\n            _vestingUnlock(userLock);\r\n        } else {\r\n            _normalUnlock(userLock);\r\n        }\r\n    }\r\n\r\n    function _normalUnlock(Lock storage userLock) internal {\r\n        require(\r\n            block.timestamp >= userLock.tgeDate,\r\n            \"It is not time to unlock\"\r\n        );\r\n        require(userLock.unlockedAmount == 0, \"Nothing to unlock\");\r\n\r\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\r\n            userLock.token\r\n        ];\r\n\r\n        bool isLpToken = tokenInfo.factory != address(0);\r\n\r\n        if (isLpToken) {\r\n            _userLpLockIds[msg.sender].remove(userLock.id);\r\n        } else {\r\n            _userNormalLockIds[msg.sender].remove(userLock.id);\r\n        }\r\n\r\n        uint256 unlockAmount = userLock.amount;\r\n\r\n        if (tokenInfo.amount <= unlockAmount) {\r\n            tokenInfo.amount = 0;\r\n        } else {\r\n            tokenInfo.amount = tokenInfo.amount - unlockAmount;\r\n        }\r\n\r\n        if (tokenInfo.amount == 0) {\r\n            if (isLpToken) {\r\n                _lpLockedTokens.remove(userLock.token);\r\n            } else {\r\n                _normalLockedTokens.remove(userLock.token);\r\n            }\r\n        }\r\n        userLock.unlockedAmount = unlockAmount;\r\n\r\n        _tokenToLockIds[userLock.token].remove(userLock.id);\r\n\r\n        IERC20(userLock.token).safeTransfer(msg.sender, unlockAmount);\r\n\r\n        emit LockRemoved(\r\n            userLock.id,\r\n            userLock.token,\r\n            msg.sender,\r\n            unlockAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _vestingUnlock(Lock storage userLock) internal {\r\n        uint256 withdrawable = _withdrawableTokens(userLock);\r\n        uint256 newTotalUnlockAmount = userLock.unlockedAmount + withdrawable;\r\n        require(\r\n            withdrawable > 0 && newTotalUnlockAmount <= userLock.amount,\r\n            \"Nothing to unlock\"\r\n        );\r\n\r\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\r\n            userLock.token\r\n        ];\r\n        bool isLpToken = tokenInfo.factory != address(0);\r\n\r\n        if (newTotalUnlockAmount == userLock.amount) {\r\n            if (isLpToken) {\r\n                _userLpLockIds[msg.sender].remove(userLock.id);\r\n            } else {\r\n                _userNormalLockIds[msg.sender].remove(userLock.id);\r\n            }\r\n            _tokenToLockIds[userLock.token].remove(userLock.id);\r\n            emit LockRemoved(\r\n                userLock.id,\r\n                userLock.token,\r\n                msg.sender,\r\n                newTotalUnlockAmount,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        if (tokenInfo.amount <= withdrawable) {\r\n            tokenInfo.amount = 0;\r\n        } else {\r\n            tokenInfo.amount = tokenInfo.amount - withdrawable;\r\n        }\r\n\r\n        if (tokenInfo.amount == 0) {\r\n            if (isLpToken) {\r\n                _lpLockedTokens.remove(userLock.token);\r\n            } else {\r\n                _normalLockedTokens.remove(userLock.token);\r\n            }\r\n        }\r\n        userLock.unlockedAmount = newTotalUnlockAmount;\r\n\r\n        IERC20(userLock.token).safeTransfer(userLock.owner, withdrawable);\r\n\r\n        emit LockVested(\r\n            userLock.id,\r\n            userLock.token,\r\n            msg.sender,\r\n            withdrawable,\r\n            userLock.amount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawableTokens(uint256 lockId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Lock memory userLock = getLockById(lockId);\r\n        return _withdrawableTokens(userLock);\r\n    }\r\n\r\n    function _withdrawableTokens(Lock memory userLock)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (userLock.amount == 0) return 0;\r\n        if (userLock.unlockedAmount >= userLock.amount) return 0;\r\n        if (block.timestamp < userLock.tgeDate) return 0;\r\n        if (userLock.cycle == 0) return 0;\r\n\r\n        uint256 tgeReleaseAmount = (userLock.amount * userLock.tgeBps) / 10_000;\r\n        uint256 cycleReleaseAmount = FullMath.mulDiv(\r\n            userLock.amount,\r\n            userLock.cycleBps,\r\n            10_000\r\n        );\r\n        uint256 currentTotal = 0;\r\n        if (block.timestamp >= userLock.tgeDate) {\r\n            currentTotal =\r\n                (((block.timestamp - userLock.tgeDate) / userLock.cycle) *\r\n                    cycleReleaseAmount) +\r\n                tgeReleaseAmount; // Truncation is expected here\r\n        }\r\n        uint256 withdrawable = 0;\r\n        if (currentTotal > userLock.amount) {\r\n            withdrawable = userLock.amount - userLock.unlockedAmount;\r\n        } else {\r\n            withdrawable = currentTotal - userLock.unlockedAmount;\r\n        }\r\n        return withdrawable;\r\n    }\r\n\r\n    function editLock(\r\n        uint256 lockId,\r\n        uint256 newAmount,\r\n        uint256 newUnlockDate\r\n    ) external override validLock(lockId) {\r\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\r\n        require(\r\n            userLock.owner == msg.sender,\r\n            \"You are not the owner of this lock\"\r\n        );\r\n        require(userLock.unlockedAmount == 0, \"Lock was unlocked\");\r\n\r\n        if (newUnlockDate > 0) {\r\n            require(\r\n                newUnlockDate >= userLock.tgeDate &&\r\n                    newUnlockDate > block.timestamp,\r\n                \"New unlock time should not be before old unlock time or current time\"\r\n            );\r\n            userLock.tgeDate = newUnlockDate;\r\n        }\r\n\r\n        if (newAmount > 0) {\r\n            require(\r\n                newAmount >= userLock.amount,\r\n                \"New amount should not be less than current amount\"\r\n            );\r\n\r\n            uint256 diff = newAmount - userLock.amount;\r\n\r\n            if (diff > 0) {\r\n                userLock.amount = newAmount;\r\n                CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\r\n                    userLock.token\r\n                ];\r\n                tokenInfo.amount = tokenInfo.amount + diff;\r\n                _safeTransferFromEnsureExactAmount(\r\n                    userLock.token,\r\n                    msg.sender,\r\n                    address(this),\r\n                    diff\r\n                );\r\n            }\r\n        }\r\n\r\n        emit LockUpdated(\r\n            userLock.id,\r\n            userLock.token,\r\n            userLock.owner,\r\n            userLock.amount,\r\n            userLock.tgeDate\r\n        );\r\n    }\r\n\r\n    function editLockDescription(uint256 lockId, string memory description)\r\n        external\r\n        validLock(lockId)\r\n    {\r\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\r\n        require(\r\n            userLock.owner == msg.sender,\r\n            \"You are not the owner of this lock\"\r\n        );\r\n        userLock.description = description;\r\n        emit LockDescriptionChanged(lockId);\r\n    }\r\n\r\n    function transferLockOwnership(uint256 lockId, address newOwner)\r\n        public\r\n        validLock(lockId)\r\n    {\r\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\r\n        address currentOwner = userLock.owner;\r\n        require(\r\n            currentOwner == msg.sender,\r\n            \"You are not the owner of this lock\"\r\n        );\r\n\r\n        userLock.owner = newOwner;\r\n\r\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\r\n            userLock.token\r\n        ];\r\n\r\n        bool isLpToken = tokenInfo.factory != address(0);\r\n\r\n        if (isLpToken) {\r\n            _userLpLockIds[currentOwner].remove(lockId);\r\n            _userLpLockIds[newOwner].add(lockId);\r\n        } else {\r\n            _userNormalLockIds[currentOwner].remove(lockId);\r\n            _userNormalLockIds[newOwner].add(lockId);\r\n        }\r\n\r\n        emit LockOwnerChanged(lockId, currentOwner, newOwner);\r\n    }\r\n\r\n    function renounceLockOwnership(uint256 lockId) external {\r\n        transferLockOwnership(lockId, address(0));\r\n    }\r\n\r\n    function _safeTransferFromEnsureExactAmount(\r\n        address token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 oldRecipientBalance = IERC20(token).balanceOf(recipient);\r\n        IERC20(token).safeTransferFrom(sender, recipient, amount);\r\n        uint256 newRecipientBalance = IERC20(token).balanceOf(recipient);\r\n        require(\r\n            newRecipientBalance - oldRecipientBalance == amount,\r\n            \"Not enough token was transfered\"\r\n        );\r\n    }\r\n\r\n    function getTotalLockCount() external view returns (uint256) {\r\n        // Returns total lock count, regardless of whether it has been unlocked or not\r\n        return _locks.length;\r\n    }\r\n\r\n    function getLockAt(uint256 index) external view returns (Lock memory) {\r\n        return _locks[index];\r\n    }\r\n\r\n    function getLockById(uint256 lockId) public view returns (Lock memory) {\r\n        return _locks[_getActualIndex(lockId)];\r\n    }\r\n\r\n    function allLpTokenLockedCount() public view returns (uint256) {\r\n        return _lpLockedTokens.length();\r\n    }\r\n\r\n    function allNormalTokenLockedCount() public view returns (uint256) {\r\n        return _normalLockedTokens.length();\r\n    }\r\n\r\n    function getCumulativeLpTokenLockInfoAt(uint256 index)\r\n        external\r\n        view\r\n        returns (CumulativeLockInfo memory)\r\n    {\r\n        return cumulativeLockInfo[_lpLockedTokens.at(index)];\r\n    }\r\n\r\n    function getCumulativeNormalTokenLockInfoAt(uint256 index)\r\n        external\r\n        view\r\n        returns (CumulativeLockInfo memory)\r\n    {\r\n        return cumulativeLockInfo[_normalLockedTokens.at(index)];\r\n    }\r\n\r\n    function getCumulativeLpTokenLockInfo(uint256 start, uint256 end)\r\n        external\r\n        view\r\n        returns (CumulativeLockInfo[] memory)\r\n    {\r\n        if (end >= _lpLockedTokens.length()) {\r\n            end = _lpLockedTokens.length() - 1;\r\n        }\r\n        uint256 length = end - start + 1;\r\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = start; i <= end; i++) {\r\n            lockInfo[currentIndex] = cumulativeLockInfo[_lpLockedTokens.at(i)];\r\n            currentIndex++;\r\n        }\r\n        return lockInfo;\r\n    }\r\n\r\n    function getCumulativeNormalTokenLockInfo(uint256 start, uint256 end)\r\n        external\r\n        view\r\n        returns (CumulativeLockInfo[] memory)\r\n    {\r\n        if (end >= _normalLockedTokens.length()) {\r\n            end = _normalLockedTokens.length() - 1;\r\n        }\r\n        uint256 length = end - start + 1;\r\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = start; i <= end; i++) {\r\n            lockInfo[currentIndex] = cumulativeLockInfo[\r\n                _normalLockedTokens.at(i)\r\n            ];\r\n            currentIndex++;\r\n        }\r\n        return lockInfo;\r\n    }\r\n\r\n    function totalTokenLockedCount() external view returns (uint256) {\r\n        return allLpTokenLockedCount() + allNormalTokenLockedCount();\r\n    }\r\n\r\n    function lpLockCountForUser(address user) public view returns (uint256) {\r\n        return _userLpLockIds[user].length();\r\n    }\r\n\r\n    function lpLocksForUser(address user)\r\n        external\r\n        view\r\n        returns (Lock[] memory)\r\n    {\r\n        uint256 length = _userLpLockIds[user].length();\r\n        Lock[] memory userLocks = new Lock[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            userLocks[i] = getLockById(_userLpLockIds[user].at(i));\r\n        }\r\n        return userLocks;\r\n    }\r\n\r\n    function lpLockForUserAtIndex(address user, uint256 index)\r\n        external\r\n        view\r\n        returns (Lock memory)\r\n    {\r\n        require(lpLockCountForUser(user) > index, \"Invalid index\");\r\n        return getLockById(_userLpLockIds[user].at(index));\r\n    }\r\n\r\n    function normalLockCountForUser(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _userNormalLockIds[user].length();\r\n    }\r\n\r\n    function normalLocksForUser(address user)\r\n        external\r\n        view\r\n        returns (Lock[] memory)\r\n    {\r\n        uint256 length = _userNormalLockIds[user].length();\r\n        Lock[] memory userLocks = new Lock[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            userLocks[i] = getLockById(_userNormalLockIds[user].at(i));\r\n        }\r\n        return userLocks;\r\n    }\r\n\r\n    function normalLockForUserAtIndex(address user, uint256 index)\r\n        external\r\n        view\r\n        returns (Lock memory)\r\n    {\r\n        require(normalLockCountForUser(user) > index, \"Invalid index\");\r\n        return getLockById(_userNormalLockIds[user].at(index));\r\n    }\r\n\r\n    function totalLockCountForUser(address user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return normalLockCountForUser(user) + lpLockCountForUser(user);\r\n    }\r\n\r\n    function totalLockCountForToken(address token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _tokenToLockIds[token].length();\r\n    }\r\n\r\n    function getLocksForToken(\r\n        address token,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (Lock[] memory) {\r\n        if (end >= _tokenToLockIds[token].length()) {\r\n            end = _tokenToLockIds[token].length() - 1;\r\n        }\r\n        uint256 length = end - start + 1;\r\n        Lock[] memory locks = new Lock[](length);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = start; i <= end; i++) {\r\n            locks[currentIndex] = getLockById(_tokenToLockIds[token].at(i));\r\n            currentIndex++;\r\n        }\r\n        return locks;\r\n    }\r\n\r\n    function _getActualIndex(uint256 lockId) internal view returns (uint256) {\r\n        if (lockId < ID_PADDING) {\r\n            revert(\"Invalid lock id\");\r\n        }\r\n        uint256 actualIndex = lockId - ID_PADDING;\r\n        require(actualIndex < _locks.length, \"Invalid lock id\");\r\n        return actualIndex;\r\n    }\r\n\r\n    function _parseFactoryAddress(address token)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address possibleFactoryAddress;\r\n        try IUniswapV2Pair(token).factory() returns (address factory) {\r\n            possibleFactoryAddress = factory;\r\n        } catch {\r\n            revert(\"This token is not a LP token\");\r\n        }\r\n        require(\r\n            possibleFactoryAddress != address(0) &&\r\n                _isValidLpToken(token, possibleFactoryAddress),\r\n            \"This token is not a LP token.\"\r\n        );\r\n        return possibleFactoryAddress;\r\n    }\r\n\r\n    function _isValidLpToken(address token, address factory)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n        address factoryPair = IUniswapV2Factory(factory).getPair(\r\n            pair.token0(),\r\n            pair.token1()\r\n        );\r\n        return factoryPair == token;\r\n    }\r\n}"
    },
    "@gempad/locker/interfaces/IGempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface IGempadVestingLock {\r\n    function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external returns (uint256 lockId);\r\n\r\n    function vestingLock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) external returns (uint256 lockId);\r\n\r\n    function multipleVestingLock(\r\n        address[] calldata owners,\r\n        uint256[] calldata amounts,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 tgeDate,\r\n        uint256 tgeBps,\r\n        uint256 cycle,\r\n        uint256 cycleBps,\r\n        string memory description\r\n    ) external returns (uint256[] memory);\r\n\r\n    function unlock(uint256 lockId) external;\r\n\r\n    function editLock(\r\n        uint256 lockId,\r\n        uint256 newAmount,\r\n        uint256 newUnlockDate\r\n    ) external;\r\n}"
    },
    "@gempad/locker/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint256\r\n  );\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n}"
    },
    "@gempad/locker/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external pure returns (string memory);\r\n\r\n  function symbol() external pure returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n  event Burn(\r\n    address indexed sender,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    address indexed to\r\n  );\r\n  event Swap(\r\n    address indexed sender,\r\n    uint256 amount0In,\r\n    uint256 amount1In,\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function kLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}"
    },
    "@gempad/locker/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountOut);\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountIn);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}"
    },
    "@gempad/locker/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"./IUniswapV2Router01.sol\";\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}"
    },
    "@gempad/locker/utils/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint256 prod0; // Least significant 256 bits of the product\r\n    uint256 prod1; // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint256 remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    unchecked {\r\n      uint256 twos = (type(uint256).max - denominator + 1) & denominator;\r\n      // Divide denominator by power of two\r\n      assembly {\r\n        denominator := div(denominator, twos)\r\n      }\r\n\r\n      // Divide [prod1 prod0] by the factors of two\r\n      assembly {\r\n        prod0 := div(prod0, twos)\r\n      }\r\n      // Shift in bits from prod1 into prod0. For this we need\r\n      // to flip `twos` such that it is 2**256 / twos.\r\n      // If twos is zero, then it becomes one\r\n      assembly {\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2**256\r\n      // Now that denominator is an odd number, it has an inverse\r\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n      // Compute the inverse by starting with a seed that is correct\r\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n      uint256 inv = (3 * denominator) ^ 2;\r\n      // Now use Newton-Raphson iteration to improve the precision.\r\n      // Thanks to Hensel's lifting lemma, this also works in modular\r\n      // arithmetic, doubling the correct bits in each step.\r\n      inv *= 2 - denominator * inv; // inverse mod 2**8\r\n      inv *= 2 - denominator * inv; // inverse mod 2**16\r\n      inv *= 2 - denominator * inv; // inverse mod 2**32\r\n      inv *= 2 - denominator * inv; // inverse mod 2**64\r\n      inv *= 2 - denominator * inv; // inverse mod 2**128\r\n      inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n      // Because the division is now exact we can divide by multiplying\r\n      // with the modular inverse of denominator. This will give us the\r\n      // correct result modulo 2**256. Since the precoditions guarantee\r\n      // that the outcome is less than 2**256, this is the final result.\r\n      // We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inv;\r\n      return result;\r\n    }\r\n  }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/AntiBotBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/AntiBotBabyToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/AntiBotBuybackBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/AntiBotBuybackBabyToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/BabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/BabyToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/BuybackBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/BuybackBabyToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/AntibotBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/AntibotBabyTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/AntibotBuyBackBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/AntibotBuyBackBabyTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/locker/contracts/GempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/locker/contracts/GempadVestingLock.sol';\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}