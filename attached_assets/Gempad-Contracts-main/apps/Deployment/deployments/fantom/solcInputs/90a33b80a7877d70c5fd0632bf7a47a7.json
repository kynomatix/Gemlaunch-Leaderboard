{
  "language": "Solidity",
  "sources": {
    "@gempad/airdrop/contracts/factory/GempadAirdropBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GempadAirdropBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), \"Invalid blueprint\");\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/airdrop/contracts/factory/GempadAirdropFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport './GempadAirdropBeacon.sol';\r\nimport '../GempadAirdrop.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadAirdropFactory is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address[] private airdrops;\r\n    uint256 private airdropId = 1;\r\n    mapping(address => address[]) private userAirdrops;\r\n\r\n    GempadAirdropBeacon immutable beacon;\r\n\r\n    event GempadAirdropCreated(uint256 id, address token, string name, address airdrop);\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadAirdropBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllGempadAirdrop() external view returns (address[] memory) {\r\n        return airdrops;\r\n    }\r\n\r\n    function getUserAirdrop(address _user) external view returns (address[] memory) {\r\n        return userAirdrops[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice create new airdrop with new params\r\n     * @param _tokenAddress :airdrop token\r\n     * @param _airdropName :name\r\n     * @param _feeReceiver : receiver of reatinga nd token fee;\r\n     */\r\n\r\n    function createGempadAirdrop(\r\n        address _tokenAddress,\r\n        string memory _airdropName,\r\n        address payable _feeReceiver\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 _id = airdropId++;\r\n        BeaconProxy airdrop = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadAirdrop(payable(address(0))).__GempadAirdrop_init.selector,\r\n                _id,\r\n                _msgSender(),\r\n                _tokenAddress,\r\n                _airdropName,\r\n                _feeReceiver\r\n            )\r\n        );\r\n\r\n        airdrops.push(address(airdrop));\r\n        userAirdrops[msg.sender].push(address(airdrop));\r\n\r\n        emit GempadAirdropCreated(_id, _tokenAddress, _airdropName, address(airdrop));\r\n    }\r\n\r\n    function getGempadAirdropBeacon() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/airdrop/contracts/GempadAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\n/**\n * @title GempadAirdrop, support ERC20 Tokens, airdrop erc20 token to participants\n */\n\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport './interfaces/IERC20Extented.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport 'hardhat/console.sol';\n\ncontract GempadAirdrop is Initializable, OwnableUpgradeable, ServicePayer, ReentrancyGuardUpgradeable {\n    using SafeERC20 for IERC20Extented;\n    using SafeMath for uint256;\n    uint256 private count;\n    bool public initialized = false;\n\n    uint256 public id;\n    string public airdropName;\n    IERC20Extented public token;\n    uint256 public totalTokens;\n    uint256 public totalClaimedTokens;\n    uint256 public startTime;\n    bool public ensureExactAmount;\n\n    address private feeReceiver;\n    uint256 private tokenFee;\n    uint8 private decimals;\n\n    Status private currentStatus;\n    DistributionInfo public vestingInfo;\n\n    address[] private participants;\n    mapping(address => mapping(uint256 => ClaimData)) private claimInfo;\n\n    struct ClaimData {\n        uint256 claimed;\n        uint256 userAllocation;\n        uint256 lastClaimTime;\n    }\n\n    struct DistributionInfo {\n        uint256 TGEPercent;\n        uint256 cyclePercent;\n        uint256 cycleInterval;\n        bool isVestingEnabled;\n    }\n\n    enum Status {\n        PENDING,\n        ACTIVE,\n        CANCELLED,\n        CLOSED\n    }\n\n    event ParticipantsAdded(uint256 id, address[] receiver, uint256[] tokenAmount);\n    event AllocationsRemoved(uint256 id, address[] participants, address sender);\n    event VestingInfoSet(uint256 id, uint256 tge, uint256 cycle, uint256 interval, bool isVesting);\n    event AirdropStarted(uint256 id, uint256 startTime, Status status);\n    event ExactAmountDisabled(uint256 id, address caller, bool status);\n    event AirdropCancelled(uint256 id, Status currentStatus, uint256 tokenBalance, uint256 timestamp);\n    event TokensCalimed(uint256 id, uint256 amount, uint256 fee, uint256 claimTime);\n\n    /**\n     * @notice initialize the Airdrop core settings\n     * @param _id :associated with this airdrop\n     * @param _owner :owner of this airdrop\n     * @param _tokenAddress :airdrop token\n     * @param _airdropName :name\n     * @param _feeReceiver : receiver of reatinga nd token fee;\n     */\n\n    function __GempadAirdrop_init(\n        uint256 _id,\n        address _owner,\n        address _tokenAddress,\n        string memory _airdropName,\n        address payable _feeReceiver\n    ) public payable initializer {\n        require(!initialized, 'Err: Already Initialized');\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadAirdrop');\n\n        token = IERC20Extented(_tokenAddress);\n        airdropName = _airdropName;\n        ensureExactAmount = true;\n        currentStatus = Status.PENDING;\n        feeReceiver = _feeReceiver;\n\n        tokenFee = IPayable(feeReceiver).getFee('GempadAirdrop');\n\n        decimals = token.decimals();\n        id = _id;\n\n        _transferOwnership(_owner);\n        initialized = true;\n    }\n\n    /**\n     * @notice token receivers and their respected amount\n     * @param receivers :token receivers\n     * @param tokenAmounts :their respected amount\n     */\n\n    function addParticipantsAndAllocation(\n        address[] memory receivers,\n        uint256[] memory tokenAmounts\n    ) external onlyOwner {\n        require(currentStatus == Status.PENDING, 'Airdrop must not be active');\n        require(receivers.length == tokenAmounts.length, 'Input arrays must have the same length');\n        if (participants.length <= 0) ++count;\n\n        uint256 length = receivers.length;\n        for (uint256 i = 0; i < length; i++) {\n            ClaimData storage info = claimInfo[receivers[i]][count];\n\n            require(receivers[i] != address(0), 'Invalid address');\n            require(tokenAmounts[i] > 0, 'Amount must be greater than zero');\n\n            if (info.userAllocation <= 0) {\n                participants.push(receivers[i]);\n            }\n\n            if (info.userAllocation > 0) {\n                totalTokens -= info.userAllocation;\n            }\n\n            info.userAllocation = tokenAmounts[i];\n\n            totalTokens += tokenAmounts[i];\n        }\n\n        emit ParticipantsAdded(id, receivers, tokenAmounts);\n    }\n\n    /**\n     * @notice vesting setting for token claim\n     * @param _TGEPercent initial release\n     * @param _cyclePercent percentage release with each cycle\n     * @param _cycleInterval gap between each release\n     */\n\n    function setVestingInfo(\n        uint256 _TGEPercent,\n        uint256 _cyclePercent,\n        uint256 _cycleInterval\n    ) external onlyOwner {\n        require(currentStatus == Status.PENDING, 'Airdrop must not be active');\n        require(_TGEPercent > 0 && _TGEPercent <= 100e3, 'TGE pecentage must be greater than zero');\n        require(_cyclePercent > 0, 'Cycle pecentage must be greater than zero');\n        require(_cycleInterval > 0, 'interval must be greater than zero');\n        require(_TGEPercent + _cyclePercent <= 100e3, 'Sum of TGE and cycle should be less than 100');\n\n        vestingInfo.TGEPercent = _TGEPercent;\n        vestingInfo.cyclePercent = _cyclePercent;\n        vestingInfo.cycleInterval = _cycleInterval;\n\n        vestingInfo.isVestingEnabled = true;\n\n        emit VestingInfoSet(id, _TGEPercent, _cyclePercent, _cycleInterval, vestingInfo.isVestingEnabled);\n    }\n\n    /**\n     * @notice remove added receivers and tokens\n     */\n    function removeAllocations() external onlyOwner {\n        require(currentStatus == Status.PENDING, 'Airdrop must not be active');\n        address[] memory alloc = participants;\n\n        totalTokens = 0;\n\n        delete participants;\n\n        emit AllocationsRemoved(id, alloc, msg.sender);\n    }\n\n    /**\n     * @notice schedule airdrop or start now\n     * @param _startTime :time\n     */\n\n    function startAirdrop(uint256 _startTime) external onlyOwner {\n        require(currentStatus == Status.PENDING && startTime <= 0, 'Airdrop must not be active');\n        require(participants.length > 0, 'Airdrop participants must be greater than zero');\n\n        startTime = _startTime;\n\n        _transferTokensFromOwner(); // Transfer tokens from owner to airdrop\n\n        emit AirdropStarted(id, startTime, getCurrentStatus());\n    }\n\n    /**\n     * @notice it disbale the check for exact receiving amount\n     */\n\n    function disbableEnsureExactAmount() external onlyOwner {\n        require(currentStatus != Status.CLOSED, 'Airdrop must not be closed');\n        ensureExactAmount = false;\n\n        emit ExactAmountDisabled(id, msg.sender, false);\n    }\n\n    /**\n     * @notice Cancel the airdrop and return tokens to owner\n     */\n    function cancelAirdrop() external onlyOwner {\n        require(currentStatus != Status.CLOSED, 'Airdrop must not be closed');\n        require(currentStatus != Status.CANCELLED, 'Airdrop must not be cancelled');\n        currentStatus = Status.CANCELLED;\n\n        uint256 tokenBalance = token.balanceOf(address(this));\n        if (tokenBalance > 0) token.transfer(owner(), tokenBalance);\n\n        emit AirdropCancelled(id, currentStatus, tokenBalance, block.timestamp);\n    }\n\n    /**\n     * @notice transfer claimable tokens as per vesting rules\n     */\n    function claimTokens() external nonReentrant {\n        ClaimData storage user = claimInfo[msg.sender][count];\n\n        require(block.timestamp >= startTime, \"Token distribution hasn't started\");\n        require(user.userAllocation > 0, 'User has no token allocation');\n\n        uint256 withdrawable = _withdrawableTokens(msg.sender);\n        uint256 claimable = user.claimed + withdrawable;\n\n        require(withdrawable > 0 && claimable <= user.userAllocation, 'User has no token to claim');\n\n        totalClaimedTokens += withdrawable;\n        user.claimed += withdrawable;\n\n        uint256 fee = (withdrawable * tokenFee) / 100e3;\n\n        user.lastClaimTime = block.timestamp;\n\n        _distributeTokens(feeReceiver, fee);\n        _distributeTokens(msg.sender, withdrawable);\n\n        emit TokensCalimed(id, withdrawable, fee, user.lastClaimTime);\n    }\n\n    /**\n     * @return withdrawable tokens as per vesting rules\n     */\n    function _withdrawableTokens(address _user) internal view returns (uint256 withdrawable) {\n        ClaimData memory user = claimInfo[_user][count];\n\n        if (vestingInfo.isVestingEnabled) {\n            require(\n                (block.timestamp - user.lastClaimTime) >= vestingInfo.cycleInterval,\n                'Tokens are not unlocked'\n            );\n\n            uint256 tgeReleaseAmount = (user.userAllocation * vestingInfo.TGEPercent) / 100e3;\n            uint256 cycleReleaseAmount = Math.mulDiv(user.userAllocation, vestingInfo.cyclePercent, 100e3);\n\n            uint256 currentTotal = 0;\n            if (block.timestamp >= startTime) {\n                currentTotal =\n                    (((block.timestamp - startTime) / vestingInfo.cycleInterval) * cycleReleaseAmount) +\n                    tgeReleaseAmount;\n            }\n\n            if (currentTotal > user.userAllocation) {\n                withdrawable = user.userAllocation - user.claimed;\n            } else {\n                withdrawable = currentTotal - user.claimed;\n            }\n        } else {\n            withdrawable = user.userAllocation - user.claimed;\n        }\n    }\n\n    /**\n     * @return withdrawable tokens as per vesting rules\n     */\n    function getClaimable(address _user) public view returns (uint256) {\n        uint256 claimable = _withdrawableTokens(_user);\n        return claimable;\n    }\n\n    /**\n     * @return the user claim information e,g. allocation\n     * @param _user :\n     */\n    function getClaimInfo(address _user) public view returns (ClaimData memory) {\n        return claimInfo[_user][count];\n    }\n\n    /**\n     * @return the uparticipanst array\n     */\n    function getParticipants() public view returns (address[] memory) {\n        return participants;\n    }\n\n    /**\n     * @return the user allocated tokens\n     * @param _user :\n     */\n    function getUserAllocation(address _user) public view returns (uint256) {\n        ClaimData memory info = claimInfo[_user][count];\n        return info.userAllocation;\n    }\n\n    /**\n     * @return the amount of tokens claimed by user\n     * @param _user :\n     */\n    function getClaimedAmount(address _user) public view returns (uint256) {\n        ClaimData memory info = claimInfo[_user][count];\n        return info.claimed;\n    }\n\n    /**\n     * @return remaining amount o claim out of total\n     */\n    function getRemainingClaimabaleAmount(address _user) public view returns (uint256) {\n        ClaimData memory info = claimInfo[_user][count];\n        return (info.userAllocation - info.claimed);\n    }\n\n    /**\n     * @return status current airdrop status\n     */\n    function getCurrentStatus() public view returns (Status status) {\n        if ((block.timestamp < startTime || startTime <= 0) && currentStatus != Status.CANCELLED) {\n            status = Status.PENDING;\n        } else if (\n            (block.timestamp >= startTime && currentStatus == Status.PENDING) &&\n            (currentStatus != Status.CANCELLED || currentStatus != Status.CLOSED)\n        ) {\n            status = Status.ACTIVE;\n        } else {\n            status = currentStatus;\n        }\n    }\n\n    /**\n     * @notice transfer the token from owner to contract\n     */\n    function _transferTokensFromOwner() private {\n        uint256 airDropfee = (totalTokens * tokenFee) / 100e3;\n        require(token.balanceOf(msg.sender) >= totalTokens + airDropfee, 'Insufficient Tokens Balance');\n\n        uint256 toReceive = totalTokens + airDropfee;\n\n        uint256 before = token.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), totalTokens + airDropfee);\n\n        require(token.balanceOf(address(this)) == (before + toReceive), 'Insufficient token received');\n    }\n\n    /**\n     * @notice transfer tokens\n     */\n    function _distributeTokens(address _to, uint256 _amount) private {\n        function(address, uint256) transfer = ensureExactAmount\n            ? _safeTransferEnsureExactAmount\n            : _safeTransfer;\n\n        transfer(_to, _amount);\n    }\n\n    /**\n     * @notice In case people want to make sure they transfer the exact amount\n     * @param to: receiver of tokens\n     * @param amount of tokens\n     */\n    function _safeTransferEnsureExactAmount(address to, uint256 amount) private {\n        uint256 balanceBefore = token.balanceOf(to);\n        address from = address(this);\n        token.transfer(to, amount);\n        require(\n            token.balanceOf(to) - balanceBefore == (from != to ? amount : 0), // if from is the same as to, the final balance should be the same as before the transfer\n            'Not enough tokens were transfered, check options or try setting ensureExactAmount to false'\n        );\n    }\n\n    /**\n     * @notice transfer\n     */\n\n    function _safeTransfer(address to, uint256 amount) private {\n        token.transfer(to, amount);\n    }\n}\n"
    },
    "@gempad/airdrop/contracts/interfaces/IERC20Extented.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IERC20Extented is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "@gempad/antibot/contracts/GemAntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\ncontract GemAntiBot is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    //min number of block requires for antibot\n    uint256 public minBlockLimit = 20;\n    struct Config {\n        address router;\n        address pair;\n        uint256 limitAmount;\n        uint256 amountPerBlock;\n        uint256 limitTime;\n        uint256 startBlock;\n        uint256 disableBlock;\n        uint256 preTransferTime;\n    }\n\n    mapping(address => address) public token_owner;\n    mapping(address => mapping(address => bool)) public whitelists;\n    mapping(address => mapping(address => bool)) public blacklists;\n    mapping(address => Config) public configs;\n    mapping(address => bool) public isConfigSet;\n\n    event Whitelist(address token, address[] users, bool status);\n    event Blacklist(address token, address[] users, bool status);\n\n    constructor() {}\n\n    /**\n     * @notice  set the token owner.\n     * @dev  being called by token\n     * @param   owner  of token\n     */\n    function setTokenOwner(address owner) public {\n        token_owner[msg.sender] = owner;\n    }\n\n    /**\n     * @notice  add users to whitelist\n     * @param   _token  address\n     * @param   _whitelists  users\n     */\n    function addWhiteLists(address _token, address[] memory _whitelists) public {\n        require(token_owner[_token] == msg.sender, 'Not Owner');\n        for (uint256 i = 0; i < _whitelists.length; i++) {\n            whitelists[_token][_whitelists[i]] = true;\n        }\n\n        emit Whitelist(_token, _whitelists, true);\n    }\n\n    /**\n     * @notice  add users to blacklist\n     * @param   _token  address\n     * @param   _blacklists  users\n     */\n    function addBlackLists(address _token, address[] memory _blacklists) public {\n        require(token_owner[_token] == msg.sender, 'Not Owner');\n        for (uint256 i = 0; i < _blacklists.length; i++) {\n            blacklists[_token][_blacklists[i]] = true;\n        }\n\n        emit Blacklist(_token, _blacklists, true);\n    }\n\n    /**\n     * @notice  remove users from whitelist\n     * @param   _token  address\n     * @param   _whitelists  users\n     */\n    function removeWhiteLists(address _token, address[] memory _whitelists) public {\n        require(token_owner[_token] == msg.sender, 'Not Owner');\n        for (uint256 i = 0; i < _whitelists.length; i++) {\n            whitelists[_token][_whitelists[i]] = false;\n        }\n\n        emit Whitelist(_token, _whitelists, false);\n    }\n\n    /**\n     * @notice  remove users from blacklist\n     * @param   _token  address\n     * @param   _blacklists  users\n     */\n    function removeblackLists(address _token, address[] memory _blacklists) public {\n        require(token_owner[_token] == msg.sender, 'Not Owner');\n        for (uint256 i = 0; i < _blacklists.length; i++) {\n            blacklists[_token][_blacklists[i]] = false;\n        }\n\n        emit Blacklist(_token, _blacklists, false);\n    }\n\n    /**\n     * @notice  set terms of token transfer\n     * @param   _token  .\n     * @param   _router  .\n     * @param   _pair  .\n     * @param   _limitAmount  .\n     * @param   _amountPerBlock  .\n     * @param   _limitTime  .\n     * @param   _disableBlock  .\n     */\n    function saveConfig(\n        address _token,\n        address _router,\n        address _pair,\n        uint256 _limitAmount,\n        uint256 _amountPerBlock,\n        uint256 _limitTime,\n        uint256 _disableBlock\n    ) public {\n        require(token_owner[_token] == msg.sender, 'Not Owner');\n        require(_disableBlock >= minBlockLimit, 'Min disable limit is 20');\n        Config storage _config = configs[_token];\n        _config.router = _router;\n        _config.limitTime = _limitTime;\n        _config.limitAmount = _limitAmount;\n        _config.amountPerBlock = _amountPerBlock;\n        _config.pair = _pair;\n        _config.startBlock = block.number;\n        _config.disableBlock = block.number + _disableBlock;\n        isConfigSet[_token] = true;\n    }\n\n    /**\n     * @notice  check for terms\n     * @param   from  .\n     * @param   to  .\n     * @param   amount  .\n     * @return  bool  .\n     */\n    function onPreTransferCheck(address from, address to, uint256 amount) public returns (bool) {\n        Config storage _config = configs[msg.sender];\n        if (block.number >= _config.disableBlock) return true;\n        require(\n            whitelists[msg.sender][from] == true && whitelists[msg.sender][to] == true,\n            'Transfer between not whitelisted users'\n        );\n        require(\n            blacklists[msg.sender][from] != true && blacklists[msg.sender][to] != true,\n            'Transfer between blacklisted users'\n        );\n\n        uint256 currentLimitAmount = _config.limitAmount +\n            (block.number - _config.startBlock) *\n            _config.amountPerBlock;\n\n        require(amount > 0 && amount <= currentLimitAmount, 'Invalid Amount');\n        require(block.timestamp.sub(_config.preTransferTime) >= _config.limitTime, 'Not Transfer Time');\n        _config.preTransferTime = block.timestamp;\n        return true;\n    }\n\n    /**\n     * @notice  minimum antiobot active time\n     * @param   _minBlockLimit  .\n     */\n    function setMinBlockLimit(uint256 _minBlockLimit) external onlyOwner {\n        require(_minBlockLimit >= 20, 'Min disable limit is 20');\n        minBlockLimit = _minBlockLimit;\n    }\n\n    /**\n     * @return  uint256  the current block.\n     */\n    function getCurrrentBlock() public view returns (uint256) {\n        return block.number;\n    }\n}\n"
    },
    "@gempad/dutchauction/contracts/AuctionWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract AuctionWhitelist is Initializable, OwnableUpgradeable {\n    mapping(address => bool) internal _whitelist;\n\n    event WhitelistUpdated(address[] account, address sender);\n\n    /**\n     * @notice  add users to whitelist\n     * @param _participants  address of users\n     */\n    function addWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\n            _whitelist[_participants[i]] = true;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @notice  remove usres from whitelist\n     * @param _participants  address of users\n     */\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\n            _whitelist[_participants[i]] = false;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @return  bool return whitelist status of user\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n}\n"
    },
    "@gempad/dutchauction/contracts/factory/GempadDutchAuctionBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GempadDutchAuctionBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), \"Invalid blueprint\");\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/dutchauction/contracts/factory/GempadDutchAuctionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '../interfaces/IERC20Extented.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport './GempadDutchAuctionBeacon.sol';\r\nimport '../GempadDutchAuction.sol';\r\n\r\ncontract GempadDutchAuctionFactory is Ownable {\r\n    using SafeERC20 for IERC20Extented;\r\n    uint256 public IdCounter = 0;\r\n\r\n    address[] public dutchAuctions;\r\n    mapping(address => address[]) private userDutchAuctions;\r\n\r\n    GempadDutchAuctionBeacon immutable beacon;\r\n\r\n    struct AuctionDetails {\r\n        IERC20Extented token;\r\n        uint256 totalSaleAmount;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n        uint256 decreaseInterval;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n    struct VestingDetails {\r\n        bool isVestingEnable;\r\n        uint256 TGEPercent;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    enum Mode {\r\n        PUBLIC,\r\n        WHITELIST,\r\n        ANTI_BOT\r\n    }\r\n\r\n    event DutchAuctionCreated(\r\n        uint256 id,\r\n        AuctionDetails info,\r\n        VestingDetails,\r\n        LiquidityDetails liq,\r\n        address dutchAuction\r\n    );\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadDutchAuctionBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllDutchAuctions() external view returns (address[] memory) {\r\n        return dutchAuctions;\r\n    }\r\n\r\n    function getUserDutchAuctions(address _user) external view returns (address[] memory) {\r\n        return userDutchAuctions[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice   initailze core params of auction\r\n     * @param   info  .\r\n     * @param   _liquidity  add liquidaty terms\r\n     * @param   _vesting  claim funds terms\r\n     * @param   _fundToken  .\r\n     * @param   _isPrivateMode  .\r\n     * @param   _refundType  burn token balance or refund (0 refund and 1 burn)\r\n     * @param   _feeReceiver  .\r\n     */\r\n    function createDutchAuction(\r\n        AuctionDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        VestingDetails memory _vesting,\r\n        address _fundToken,\r\n        bool _isPrivateMode,\r\n        bool _refundType,\r\n        address payable _feeReceiver\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 _id = ++IdCounter;\r\n        BeaconProxy dutchAuction = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadDutchAuction(payable(address(0))).__GempadDutchAuction_init.selector,\r\n                _id,\r\n                info,\r\n                _liquidity,\r\n                _vesting,\r\n                _fundToken,\r\n                _isPrivateMode,\r\n                _refundType,\r\n                _feeReceiver,\r\n                _msgSender()\r\n            )\r\n        );\r\n\r\n        dutchAuctions.push(address(dutchAuction));\r\n        userDutchAuctions[msg.sender].push(address(dutchAuction));\r\n\r\n        uint256 tokenFee = IPayable(_feeReceiver).getFee('GempadDutchAuction');\r\n        uint256 tokensAmount = TokenToReceive(info, _liquidity, tokenFee, _fundToken);\r\n\r\n        uint256 before = info.token.balanceOf(address(dutchAuction));\r\n\r\n        info.token.transferFrom(msg.sender, address(dutchAuction), tokensAmount);\r\n\r\n        require(\r\n            info.token.balanceOf(address(dutchAuction)) == (before + tokensAmount),\r\n            'Insufficient token received'\r\n        );\r\n\r\n        emit DutchAuctionCreated(_id, info, _vesting, _liquidity, address(dutchAuction));\r\n    }\r\n\r\n    function TokenToReceive(\r\n        AuctionDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        uint256 _tokenFee,\r\n        address _fundToken\r\n    ) private returns (uint256 tokens) {\r\n        uint8 decimals = (_fundToken == address(0)) ? 18 : IERC20Extented(_fundToken).decimals();\r\n\r\n        uint256 endPrice = (info.totalSaleAmount * (10 ** decimals)) / info.softCap;\r\n        uint256 fee = (info.hardCap * _tokenFee) / 100e3;\r\n        uint256 lToken = ((info.hardCap - fee) * endPrice) / 10 ** decimals;\r\n\r\n        tokens = info.totalSaleAmount + (lToken * _liquidity.liquidityPercent) / 100e3;\r\n    }\r\n\r\n    function getDutchAuction() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/dutchauction/contracts/GempadDutchAuction.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport '@openzeppelin/contracts/utils/math/Math.sol';\r\nimport './interfaces/IERC20Extented.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './interfaces/IUniswapV2Router02.sol';\r\nimport './interfaces/IGempadVestingLock.sol';\r\nimport './AuctionWhitelist.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadDutchAuction is ServicePayer, AuctionWhitelist, ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n    bool public isInitialized = false;\r\n    uint256 public Id;\r\n\r\n    AuctionDetails public auction;\r\n    LiquidityDetails public liquidity;\r\n    VestingDetails public vesting;\r\n    Status public currentStatus;\r\n\r\n    IERC20Extented public fundToken;\r\n    bool public fundByTokens;\r\n\r\n    bool private refundType; //0 refund and 1 burn\r\n\r\n    bool private isPrivateMode;\r\n\r\n    address private feeReceiver;\r\n    uint256 public tokenFee;\r\n\r\n    uint8 private decimals;\r\n\r\n    uint256 public totalRaised;\r\n    uint256 public totalClaimed;\r\n    uint256 public totalTokensSold;\r\n    uint256 private tokenToReceive;\r\n\r\n    address[] public investors;\r\n\r\n    mapping(address => UserDetails) public userInfo;\r\n\r\n    struct AuctionDetails {\r\n        IERC20Extented token;\r\n        uint256 totalSaleAmount;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n        uint256 decreaseInterval;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n    struct VestingDetails {\r\n        bool isVestingEnable;\r\n        uint256 TGEPercent;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    struct UserDetails {\r\n        uint256 userTokens;\r\n        uint256 userInvest;\r\n        uint256 userCalimed;\r\n        uint256 lastClaimTime;\r\n    }\r\n\r\n    enum Status {\r\n        INCOMMING,\r\n        ACTIVE,\r\n        CANCELLED,\r\n        CLOSED\r\n    }\r\n\r\n    enum Mode {\r\n        PENDING,\r\n        PRIVATE,\r\n        PUBLIC\r\n    }\r\n\r\n    event Purachsed(uint256 id, address sender, uint256 _amount, uint256 amount);\r\n    event PublicSaleEnabled(uint256 id, uint256 time);\r\n    event liquidityAdded(uint256 id, address pair, uint256 liquidity);\r\n    event Cancelled(uint256 id, Status status, uint256 time);\r\n\r\n    /**\r\n     * @notice   initailze core params of auction\r\n     * @param   _id  .\r\n     * @param   info  .\r\n     * @param   _liquidity  add liquidaty terms\r\n     * @param   _vesting  claim funds terms\r\n     * @param   _fundToken  .\r\n     * @param   _isPrivateMode  .\r\n     * @param   _refundType  burn token balance or refund (0 refund and 1 burn)\r\n     * @param   _feeReceiver  .\r\n     * @param   _owner  .\r\n     */\r\n    function __GempadDutchAuction_init(\r\n        uint256 _id,\r\n        AuctionDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        VestingDetails memory _vesting,\r\n        address _fundToken,\r\n        bool _isPrivateMode,\r\n        bool _refundType,\r\n        address payable _feeReceiver,\r\n        address _owner\r\n    ) public payable initializer {\r\n        require(!isInitialized, 'Err: Already initialized');\r\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadDutchAuction');\r\n        //set custom Investment Token\r\n        Id = _id;\r\n        fundByTokens = _fundToken != address(0);\r\n        if (fundByTokens) {\r\n            fundToken = IERC20Extented(_fundToken);\r\n        }\r\n        require(info.totalSaleAmount > 0, \"Total selling amount can't be zero\");\r\n\r\n        decimals = (!fundByTokens) ? 18 : IERC20Extented(_fundToken).decimals();\r\n\r\n        require(\r\n            info.startPrice > 0 && info.endPrice < info.startPrice,\r\n            'End price must be less than start price'\r\n        );\r\n\r\n        require(info.softCap <= info.hardCap, 'Soft-Cap should be less than or equal to hardcap');\r\n\r\n        require(\r\n            info.softCap >= ((info.hardCap * 20e3) / 100e3),\r\n            'Softcap must be greater than or equal 20% of Hardcap'\r\n        );\r\n\r\n        uint256 endPrice = (info.totalSaleAmount * (10 ** decimals)) / info.softCap;\r\n        uint256 startPrice = (info.totalSaleAmount * (10 ** decimals)) / info.hardCap;\r\n\r\n        require(\r\n            ((info.softCap * endPrice) / 10 ** decimals) == info.totalSaleAmount,\r\n            'SoftCap * endPrice = TotalSaleAmount'\r\n        );\r\n\r\n        require(\r\n            ((info.hardCap * startPrice) / 10 ** decimals) == info.totalSaleAmount,\r\n            'hardCap * startPrice = TotalSaleAmount'\r\n        );\r\n\r\n        require(info.minBuyLimit > 0 && info.minBuyLimit < info.maxBuyLimit, 'Invalid minimum buy limit');\r\n\r\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\r\n\r\n        require(\r\n            (info.endTime - info.startTime) > info.decreaseInterval,\r\n            'Auction duration must be greater than decrease price interval'\r\n        );\r\n\r\n        require(info.decreaseInterval > 0, \"Price decrease interval can't be zero\");\r\n\r\n        require(_liquidity.liquidityPercent > 50e3, 'Liquidity percentage must be greater than 50');\r\n        require(_liquidity.lockTime >= 300, \"Lock time can't be less than 5 minuts\");\r\n\r\n        if (_vesting.isVestingEnable) {\r\n            require(\r\n                _vesting.TGEPercent > 0 && _vesting.TGEPercent < 100e3,\r\n                'Invalid Initial Release pecentage'\r\n            );\r\n\r\n            require(_vesting.cyclePercent > 0, 'Cycle pecentage must be greater than zero');\r\n\r\n            require(_vesting.cycleInterval > 0, 'interval must be greater than zero');\r\n\r\n            require(\r\n                (_vesting.TGEPercent + _vesting.cyclePercent) <= 100e3,\r\n                'Sum of TGE and cycle should be less than 100'\r\n            );\r\n\r\n            vesting = _vesting;\r\n            isInitialized = true;\r\n        }\r\n\r\n        //whitelisting feature status\r\n        isPrivateMode = _isPrivateMode;\r\n\r\n        auction = info;\r\n        liquidity = _liquidity;\r\n\r\n        // Initialize the public sale start time;\r\n        info.publicSaleTime = (!_isPrivateMode) ? info.startTime : info.endTime;\r\n\r\n        // Initialize fee and refund type\r\n        feeReceiver = _feeReceiver;\r\n        tokenFee = IPayable(feeReceiver).getFee('GempadDutchAuction');\r\n        refundType = _refundType;\r\n\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice  user buy Tokens\r\n     * @param   _amount  in purchase currency\r\n     */\r\n    function buyToken(uint256 _amount) external payable nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n        require(\r\n            block.timestamp >= auction.startTime && block.timestamp <= auction.endTime,\r\n            'Sale is not active'\r\n        );\r\n\r\n        if (block.timestamp < auction.publicSaleTime) {\r\n            require(_whitelist[msg.sender], 'User is not whitelisted');\r\n        }\r\n        require(_amount >= auction.minBuyLimit, 'Amount is less than min buy limit');\r\n\r\n        require(user.userInvest + _amount <= auction.maxBuyLimit, 'Maximum buy limit reached');\r\n\r\n        require((totalRaised + _amount) <= auction.hardCap, 'HardCap reached');\r\n\r\n        uint256 currentPrice = calculateCurrentPrice();\r\n\r\n        uint256 tokenAmount = ((_amount * currentPrice) / (10 ** decimals));\r\n\r\n        if (user.userTokens <= 0) investors.push(msg.sender);\r\n        user.userTokens += tokenAmount;\r\n        user.userInvest += _amount;\r\n\r\n        // Update the total sale amount\r\n        totalRaised += _amount;\r\n        totalTokensSold += tokenAmount;\r\n\r\n        if (fundByTokens) {\r\n            fundToken.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            // Ensure that the sender has sent enough Ether\r\n            require(msg.value == _amount, 'Insufficient funds sent');\r\n        }\r\n        emit Purachsed(Id, msg.sender, tokenAmount, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  enable public or private sale time.\r\n     * @param   _startTime   start time of public sale time if it is equalo to sale end time that means its priavte sale.\r\n     */\r\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\r\n        // require(_startTime >= block.timestamp, 'Start time must be greater than current time');\r\n        auction.publicSaleTime = _startTime;\r\n\r\n        emit PublicSaleEnabled(Id, auction.publicSaleTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  finalize the sale and withdraw sell funds and sell token balance\r\n     */\r\n    function finalize() external onlyOwner nonReentrant {\r\n        require(\r\n            (block.timestamp >= auction.endTime && totalRaised >= auction.softCap) ||\r\n                totalRaised >= auction.softCap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\r\n\r\n        currentStatus = Status.CLOSED;\r\n        auction.finalizeTime = block.timestamp;\r\n\r\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\r\n\r\n        addLiquidity();\r\n        _transferFunds(feeReceiver, feeAmount);\r\n        withdrawFunds();\r\n        withdrawTokenBalance();\r\n    }\r\n\r\n    /**\r\n     * @notice  cancel the sale\r\n     */\r\n    function cancel() external onlyOwner {\r\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\r\n\r\n        currentStatus = Status.CANCELLED;\r\n\r\n        emit Cancelled(Id, currentStatus, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by the investor the claim the tokens against investment as per vesting terms\r\n     */\r\n    function claimTokens() external nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n\r\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\r\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\r\n\r\n        uint256 claimableAmount = _calculateClaimableTokens(msg.sender);\r\n        uint256 claimable = user.userCalimed + claimableAmount;\r\n\r\n        require(claimableAmount > 0 && claimable <= user.userTokens, 'Total tokens claimed');\r\n\r\n        user.userCalimed += claimableAmount;\r\n\r\n        user.lastClaimTime = block.timestamp;\r\n        totalClaimed += claimableAmount;\r\n\r\n        auction.token.transfer(msg.sender, claimableAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by investor to get refund incase of sale cancellation or failure to reach soft cap\r\n     */\r\n    function claimUserRefund() external {\r\n        UserDetails storage info = userInfo[msg.sender];\r\n        require(\r\n            (block.timestamp >= auction.endTime && totalRaised < auction.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Refund is not allowed'\r\n        );\r\n        require(info.userInvest > 0, 'User has not invested');\r\n\r\n        uint256 refund = info.userInvest;\r\n        info.userInvest = 0;\r\n\r\n        _transferFunds(msg.sender, refund);\r\n    }\r\n\r\n    /**\r\n     * @notice  withdraw the funds raised\r\n     */\r\n    function withdrawFunds() internal {\r\n        require(currentStatus == Status.CLOSED, 'Sale in not finalized');\r\n\r\n        if (fundByTokens) {\r\n            uint256 amount = fundToken.balanceOf(address(this));\r\n\r\n            fundToken.transfer(msg.sender, amount);\r\n        } else {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer the unsold tokens to owner\r\n     */\r\n    function withdrawTokenBalance() internal {\r\n        uint256 balance = auction.token.balanceOf(address(this)).sub(totalTokensSold);\r\n\r\n        if (refundType) {\r\n            auction.token.transfer(msg.sender, balance);\r\n        } else {\r\n            auction.token.transfer(address(0x000000000000000000000000000000000000dEaD), balance);\r\n        }\r\n    }\r\n\r\n    function withdrawTokens() external nonReentrant onlyOwner {\r\n        require(\r\n            (block.timestamp >= auction.endTime && totalRaised < auction.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Sale is not cancelled or end Time not reached'\r\n        );\r\n\r\n        uint256 balance = auction.token.balanceOf(address(this));\r\n\r\n        auction.token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by owner to get refund incase of sale cancellation or failure to reach soft cap\r\n     */\r\n    function getCurrentMode() public view returns (Mode mode) {\r\n        mode = (block.timestamp < auction.startTime)\r\n            ? Mode.PENDING //pending\r\n            : (block.timestamp >= auction.startTime && block.timestamp < auction.publicSaleTime)\r\n            ? Mode.PRIVATE //private\r\n            : Mode.PUBLIC; //public\r\n    }\r\n\r\n    /**\r\n     * @return  status  current selling status\r\n     */\r\n    function getCurrentSatus() public view returns (Status status) {\r\n        status = (block.timestamp < auction.startTime && currentStatus != Status.CANCELLED)\r\n            ? Status.INCOMMING\r\n            : (currentStatus != Status.CANCELLED &&\r\n                currentStatus != Status.CLOSED &&\r\n                block.timestamp > auction.startTime)\r\n            ? Status.ACTIVE\r\n            : currentStatus;\r\n    }\r\n\r\n    /**\r\n     * @return  pairAddress  returnd the pair address to add liquidity.\r\n     */\r\n    function getTokenPair() internal view returns (address pairAddress) {\r\n        if (fundByTokens) {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                address(fundToken),\r\n                address(auction.token)\r\n            );\r\n        } else {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                liquidity.router.WETH(),\r\n                address(auction.token)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  to get share of sell tokens and purchase currency to create pair and add liquidity\r\n     * @return  uint256  sell tokens share\r\n     * @return  uint256  purchase currency share\r\n     */\r\n    function getTokenShare() internal view returns (uint256, uint256) {\r\n        uint256 currentPrice = calculateCurrentPrice();\r\n\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n\r\n        uint256 shareEth = ((totalRaised - fee) * liquidity.liquidityPercent) / 100e3;\r\n\r\n        uint256 tokens = ((shareEth * currentPrice)) / (10 ** decimals);\r\n        return (shareEth, tokens);\r\n    }\r\n\r\n    /**\r\n     * @notice  add liquidity to given dex as per liquidity terms and also lock the LP tokens\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     */\r\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\r\n        if (totalRaised > 0) {\r\n            uint256 amountToken;\r\n            uint256 amountETH;\r\n            uint256 _liquidity;\r\n\r\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\r\n\r\n            auction.token.approve(address(liquidity.router), sellTokenShare);\r\n\r\n            if (!fundByTokens) {\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\r\n                    value: fundTokenShare\r\n                }(\r\n                    address(auction.token),\r\n                    sellTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                fundToken.approve(address(liquidity.router), sellTokenShare);\r\n                fundToken.approve(address(liquidity.router), fundTokenShare);\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\r\n                    address(auction.token),\r\n                    address(fundToken),\r\n                    sellTokenShare,\r\n                    fundTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n            liquidity.liquidityAdded = fundTokenShare;\r\n            address pairAddress = getTokenPair();\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            uint256 pairBalance = pair.balanceOf(address(this));\r\n\r\n            IERC20Extented(pairAddress).approve(liquidity.locker, pairBalance);\r\n\r\n            IGempadVestingLock(liquidity.locker).lock(\r\n                owner(),\r\n                pairAddress,\r\n                true,\r\n                pairBalance,\r\n                (block.timestamp + liquidity.lockTime),\r\n                'Gempad liquidity'\r\n            );\r\n\r\n            emit liquidityAdded(Id, pairAddress, _liquidity);\r\n            return (amountToken, amountETH, _liquidity);\r\n        }\r\n\r\n        return (0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param   _user  .\r\n     * @return  withdrawable  the amount of tokens investor can withdraw as per vesting terms\r\n     */\r\n    function _calculateClaimableTokens(address _user) internal view returns (uint256 withdrawable) {\r\n        UserDetails memory user = userInfo[_user];\r\n\r\n        if (vesting.isVestingEnable) {\r\n            require(\r\n                (block.timestamp - user.lastClaimTime) >= vesting.cycleInterval,\r\n                'Tokens are not unlocked'\r\n            );\r\n\r\n            uint256 tgeReleaseAmount = (vesting.TGEPercent * user.userTokens) / 100e3;\r\n\r\n            uint256 cycleReleaseAmount = Math.mulDiv(user.userTokens, vesting.cyclePercent, 100e3);\r\n\r\n            uint256 currentTotal = 0;\r\n\r\n            if (block.timestamp >= auction.finalizeTime) {\r\n                currentTotal =\r\n                    (((block.timestamp - auction.finalizeTime) / vesting.cycleInterval) *\r\n                        cycleReleaseAmount) +\r\n                    tgeReleaseAmount;\r\n            }\r\n\r\n            if (currentTotal > user.userTokens) {\r\n                withdrawable = user.userTokens - user.userCalimed;\r\n            } else {\r\n                withdrawable = currentTotal - user.userCalimed;\r\n            }\r\n        } else {\r\n            withdrawable = user.userTokens;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer purchase currency to receiver\r\n     * @param   _to  .\r\n     * @param   _amount  .\r\n     */\r\n    function _transferFunds(address _to, uint256 _amount) private {\r\n        if (fundByTokens) {\r\n            fundToken.transfer(_to, _amount);\r\n        } else {\r\n            payable(_to).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  as price keep decreasing at the rate of auction terms\r\n     * @return  uint256  the current priceof token based on time\r\n     */\r\n    function calculateCurrentPrice() internal view returns (uint256) {\r\n        uint256 endPrice = (auction.totalSaleAmount * (10 ** decimals)) / auction.softCap;\r\n        uint256 startPrice = (auction.totalSaleAmount * (10 ** decimals)) / auction.hardCap;\r\n\r\n        uint256 totalIntervals = (auction.endTime - auction.startTime) / auction.decreaseInterval;\r\n\r\n        uint256 reductionAmount = (endPrice - startPrice) / totalIntervals;\r\n\r\n        uint256 intervalsElapsed = (block.timestamp - auction.startTime) / auction.decreaseInterval;\r\n\r\n        if (intervalsElapsed > totalIntervals) {\r\n            intervalsElapsed = totalIntervals;\r\n        }\r\n\r\n        if (intervalsElapsed <= 0) {\r\n            return startPrice;\r\n        } else {\r\n            uint256 newPrice = startPrice + (reductionAmount * intervalsElapsed);\r\n            return newPrice;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/dutchauction/contracts/interfaces/IERC20Extented.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IERC20Extented is IERC20 {\r\n\r\n    function decimals() external returns (uint8);\r\n}"
    },
    "@gempad/dutchauction/contracts/interfaces/IGempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGempadVestingLock {\r\n\r\n  function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external  payable returns (uint256 id);\r\n\r\n  function unlock(uint256 lockId) external;\r\n\r\n  function editLock(\r\n    uint256 lockId,\r\n    uint256 newAmount,\r\n    uint256 newUnlockDate\r\n  ) external payable;\r\n}"
    },
    "@gempad/dutchauction/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n//IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n}"
    },
    "@gempad/dutchauction/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}"
    },
    "@gempad/dutchauction/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n\r\n}\r\n//IUnisapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n}"
    },
    "@gempad/fairlaunch/contracts/factory/GempadFairLuanchBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GempadFairLuanchBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), \"Invalid blueprint\");\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/fairlaunch/contracts/factory/GempadFairLuanchFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '../interfaces/IERC20Extented.sol';\r\nimport './GempadFairLuanchBeacon.sol';\r\nimport '../GempadFairLaunch.sol';\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract GempadFairLuanchFactory is Ownable {\r\n    using SafeERC20 for IERC20Extented;\r\n    uint256 public IdCounter = 0;\r\n\r\n    address[] public fairLaunches;\r\n    mapping(address => address[]) private userFairLaunche;\r\n\r\n    GempadFairLuanchBeacon immutable beacon;\r\n\r\n    struct FairLaunchDetails {\r\n        IERC20Extented token;\r\n        uint256 totalsellTokens;\r\n        uint256 softCap;\r\n        bool isMaxLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n        bool isAffiliate;\r\n        uint256 affiliateReward;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n\r\n    struct BuybackDetails {\r\n        bool isBuyback;\r\n        uint256 buyBackPercent;\r\n        uint256 totalBuyBackAmount;\r\n        uint256 boughtBackAmount;\r\n        uint256 amountPerBuyback;\r\n        uint256 minDelay;\r\n        uint256 maxDelay;\r\n        uint256 lastBuyTime;\r\n    }\r\n\r\n    event FairLaunchCreated(uint256 id, FairLaunchDetails _info, LiquidityDetails liq, address fairLaunch);\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadFairLuanchBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllFairLaunches() external view returns (address[] memory) {\r\n        return fairLaunches;\r\n    }\r\n\r\n    function getUserFairLaunche(address _user) external view returns (address[] memory) {\r\n        return userFairLaunche[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice  anyone can create anew fairlaunch after paying fee\r\n     * @param   _info  .\r\n     * @param   _liquidity  adding liquidity terms\r\n     * @param   _buyBack   buyback terms\r\n     * @param   _fundToken  currency for purchase\r\n     * @param   _isprivateSale  mode of sale public or private\r\n     * @param   _feeReceiver  protocol fee receiver\r\n     */\r\n    function createFairLaunch(\r\n        FairLaunchDetails memory _info,\r\n        LiquidityDetails memory _liquidity,\r\n        BuybackDetails memory _buyBack,\r\n        address _fundToken,\r\n        bool _isprivateSale,\r\n        address payable _feeReceiver\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 _id = ++IdCounter;\r\n        BeaconProxy fairLaunch = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadFairLaunch(payable(address(0))).__GempadFairLaunch_init.selector,\r\n                _id,\r\n                _info,\r\n                _liquidity,\r\n                _buyBack,\r\n                _fundToken,\r\n                _isprivateSale,\r\n                _feeReceiver,\r\n                _msgSender()\r\n            )\r\n        );\r\n        uint256 tokenFee = IPayable(_feeReceiver).getFee('GempadFairLaunch');\r\n        uint256 fee = (_info.totalsellTokens * tokenFee) / 100e3;\r\n        uint256 tokens = _info.totalsellTokens +\r\n            (((_info.totalsellTokens - fee) * _liquidity.liquidityPercent) / 100e3);\r\n\r\n        uint256 before = _info.token.balanceOf(address(fairLaunch));\r\n\r\n        _info.token.transferFrom(msg.sender, address(fairLaunch), tokens);\r\n\r\n        require(\r\n            _info.token.balanceOf(address(fairLaunch)) == (before + tokens),\r\n            'Insufficient Tokens Received'\r\n        );\r\n\r\n        fairLaunches.push(address(fairLaunch));\r\n        userFairLaunche[msg.sender].push(address(fairLaunch));\r\n\r\n        emit FairLaunchCreated(_id, _info, _liquidity, address(fairLaunch));\r\n    }\r\n\r\n    function getFairLaunchBeacon() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/fairlaunch/contracts/GempadFairLaunch.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport './interfaces/IERC20Extented.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './interfaces/IUniswapV2Router02.sol';\r\nimport './interfaces/IGempadVestingLock.sol';\r\nimport './GempadWhitelist.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadFairLaunch is ServicePayer, GempadWhitelist, ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n    bool public isInitialized;\r\n    uint256 public Id;\r\n\r\n    FairLaunchDetails public fairlaunch;\r\n    LiquidityDetails public liquidity;\r\n    BuybackDetails public buyBack;\r\n    Status public currentStatus;\r\n    IERC20Extented public fundToken;\r\n    bool public fundByTokens;\r\n\r\n    bool private isPrivateMode;\r\n\r\n    address private feeReceiver;\r\n    uint256 private tokenFee;\r\n\r\n    uint256 public totalRaised;\r\n    uint256 public totalClaimed;\r\n    uint256 private totalReferralInvest;\r\n    uint256 private tokenToReceive;\r\n    uint256 private totalReward = 0;\r\n\r\n    uint256 public currentPrice;\r\n\r\n    address[] private investors;\r\n    address[] private referrers;\r\n\r\n    mapping(address => UserDetails) public userInfo;\r\n    mapping(address => RewardDetails) public rewardInfo;\r\n\r\n    struct FairLaunchDetails {\r\n        IERC20Extented token;\r\n        uint256 totalsellTokens;\r\n        uint256 softCap;\r\n        bool isMaxLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n        bool isAffiliate;\r\n        uint256 affiliateReward;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n\r\n    struct BuybackDetails {\r\n        bool isBuyback;\r\n        uint256 buyBackPercent;\r\n        uint256 totalBuyBackAmount;\r\n        uint256 boughtBackAmount;\r\n        uint256 amountPerBuyback;\r\n        uint256 minDelay;\r\n        uint256 maxDelay;\r\n        uint256 lastBuyTime;\r\n    }\r\n\r\n    struct UserDetails {\r\n        uint256 userInvest;\r\n        uint256 userCalimed;\r\n    }\r\n    struct RewardDetails {\r\n        uint256 referralInvest;\r\n        uint256 rewardShare;\r\n    }\r\n\r\n    enum Status {\r\n        INCOMMING,\r\n        ACTIVE,\r\n        CANCELLED,\r\n        CLOSED\r\n    }\r\n    enum Mode {\r\n        PENDING,\r\n        PRIVATE,\r\n        PUBLIC\r\n    }\r\n\r\n    event Purachsed(uint256 id, address sender, uint256 _amount);\r\n    event PublicSaleEnabled(uint256 id, uint256 time);\r\n    event liquidityAdded(uint256 id, address pair, uint256 liquidity);\r\n    event UpdateReward(uint256 id, uint256 reward, address sender);\r\n    event UpdateTime(uint256 id, uint256 start, uint256 end);\r\n    event UpdateEndTime(uint256 id, uint256 timeNow, uint256 end);\r\n    event RewardsCalimed(uint256 id, address receiver, uint256 share);\r\n\r\n    /**\r\n     * @notice  initialzie the core params of fairluanch\r\n     * @param   _id  .\r\n     * @param   info  .\r\n     * @param   _liquidity  adding liquidity terms\r\n     * @param   _buyBack   buyback terms\r\n     * @param   _fundToken  currency for purchase\r\n     * @param   _isPrivateMode  mode of sale public or private\r\n     * @param   _feeReceiver  protocol fee receiver\r\n     * @param   _owner  .\r\n     */\r\n    function __GempadFairLaunch_init(\r\n        uint256 _id,\r\n        FairLaunchDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        BuybackDetails memory _buyBack,\r\n        address _fundToken,\r\n        bool _isPrivateMode,\r\n        address payable _feeReceiver,\r\n        address _owner\r\n    ) public payable initializer {\r\n        require(!isInitialized, 'Err: Already initialized');\r\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadFairLaunch');\r\n\r\n        Id = _id;\r\n        //set custom Investment Token\r\n        fundByTokens = _fundToken != address(0);\r\n        if (fundByTokens) {\r\n            fundToken = IERC20Extented(_fundToken);\r\n        }\r\n\r\n        if (info.isAffiliate) require(info.affiliateReward <= 5e3, 'MAX reward limit exceeded');\r\n\r\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\r\n        require((info.endTime - info.startTime) <= 604800, 'Invalid duration');\r\n\r\n        if (_buyBack.isBuyback) {\r\n            require(\r\n                _liquidity.liquidityPercent >= 30e3 && _liquidity.liquidityPercent <= 100e3,\r\n                'Invalid liquidity percentage'\r\n            );\r\n            require(\r\n                _liquidity.liquidityPercent + _buyBack.buyBackPercent > 50e3 &&\r\n                    _liquidity.liquidityPercent + _buyBack.buyBackPercent <= 100e3,\r\n                'Liquidity + Buyback must be greater than 50% and equal to 100%'\r\n            );\r\n\r\n            require(_buyBack.minDelay >= 60, 'Minimum delay is atleast 1 minute');\r\n\r\n            require(_buyBack.maxDelay <= 300, 'Maximum delay restiricted to 5 minutes');\r\n\r\n            _buyBack.totalBuyBackAmount = (info.softCap * _buyBack.buyBackPercent) / 100e3;\r\n\r\n            buyBack = _buyBack;\r\n        } else {\r\n            require(\r\n                _liquidity.liquidityPercent > 50e3 && _liquidity.liquidityPercent <= 100e3,\r\n                'Invalid liquidity percentage'\r\n            );\r\n        }\r\n\r\n        require(_liquidity.lockTime >= 300, \"Lock time can't be less than 5 minuts\");\r\n\r\n        liquidity = _liquidity;\r\n\r\n        fairlaunch = info;\r\n\r\n        // Initialize the public sale start time;\r\n        fairlaunch.publicSaleTime = (_isPrivateMode) ? info.endTime : info.startTime;\r\n\r\n        //whitelisting feature status\r\n        isPrivateMode = _isPrivateMode;\r\n\r\n        // Initialize fee and refund type\r\n        feeReceiver = _feeReceiver;\r\n        tokenFee = IPayable(feeReceiver).getFee('GempadFairLaunch');\r\n\r\n        uint256 fee = (info.totalsellTokens * tokenFee) / 100e3;\r\n        tokenToReceive =\r\n            info.totalsellTokens +\r\n            (((info.totalsellTokens - fee) * _liquidity.liquidityPercent) / 100e3);\r\n\r\n        _transferOwnership(_owner);\r\n        isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * @notice  for user to buy Tokens\r\n     * @param   _amount  in terms of buying currency\r\n     * @param   _referrer  address of referrer for this sale\r\n     */\r\n    function buyToken(uint256 _amount, address _referrer) external payable nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n\r\n        require(\r\n            block.timestamp >= fairlaunch.startTime && block.timestamp <= fairlaunch.endTime,\r\n            'Sale is not active'\r\n        );\r\n\r\n        if (block.timestamp < fairlaunch.publicSaleTime) {\r\n            require(_whitelist[msg.sender], 'User is not whitelisted');\r\n        }\r\n\r\n        if (fairlaunch.isMaxLimit) {\r\n            require(user.userInvest + _amount <= fairlaunch.maxBuyLimit, 'Maximum buy limit reached');\r\n        }\r\n\r\n        if (user.userInvest <= 0) investors.push(msg.sender);\r\n        user.userInvest += _amount;\r\n\r\n        // Update the total sale amount\r\n        totalRaised += _amount;\r\n\r\n        currentPrice = fundByTokens\r\n            ? (fairlaunch.totalsellTokens * (10 ** fundToken.decimals())) / totalRaised\r\n            : (fairlaunch.totalsellTokens * 1e18) / totalRaised;\r\n\r\n        if (fairlaunch.isAffiliate) {\r\n            if (_referrer != address(0)) {\r\n                RewardDetails storage reward = rewardInfo[_referrer];\r\n                if (reward.referralInvest <= 0) referrers.push(_referrer);\r\n\r\n                totalReferralInvest += _amount;\r\n                reward.referralInvest += _amount;\r\n            }\r\n        }\r\n\r\n        if (fundByTokens) {\r\n            fundToken.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            // Ensure that the sender has sent enough Ether\r\n            require(msg.value == _amount, 'Insufficient funds sent');\r\n        }\r\n        emit Purachsed(Id, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  set public sale activation time.\r\n     * @dev     set public sale start time equal to sale end time if you want to activate private mode\r\n     * @param   _startTime  .\r\n     */\r\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\r\n        // require(_startTime >= block.timestamp, 'Start time must be greater than current time');\r\n        fairlaunch.publicSaleTime = _startTime;\r\n\r\n        emit PublicSaleEnabled(Id, fairlaunch.publicSaleTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  cancel the sale and update status\r\n     */\r\n    function cancel() external onlyOwner {\r\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\r\n\r\n        currentStatus = Status.CANCELLED;\r\n    }\r\n\r\n    /**\r\n     * @notice  finalize the sale an dtransfer funds to owner.\r\n     */\r\n    function finalize() external onlyOwner {\r\n        require(\r\n            (block.timestamp > fairlaunch.endTime && totalRaised >= fairlaunch.softCap) ||\r\n                totalRaised >= fairlaunch.softCap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\r\n\r\n        currentStatus = Status.CLOSED;\r\n        fairlaunch.finalizeTime = block.timestamp;\r\n\r\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\r\n\r\n        if (fairlaunch.isAffiliate && totalReferralInvest > 0) {\r\n            totalReward = ((totalRaised - feeAmount) * fairlaunch.affiliateReward) / 100e3;\r\n            distributeRewards();\r\n        }\r\n\r\n        if (buyBack.isBuyback) {\r\n            buyBack.totalBuyBackAmount =\r\n                ((totalRaised - (feeAmount + totalReward)) * buyBack.buyBackPercent) /\r\n                100e3;\r\n        }\r\n\r\n        addLiquidity();\r\n\r\n        withdrawFunds();\r\n\r\n        // transfer token fee;\r\n        _transferFunds(feeReceiver, feeAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer raised funds to owner account\r\n     */\r\n    function withdrawFunds() internal onlyOwner {\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n\r\n        uint256 withdrawable = totalRaised - (fee + totalReward + liquidity.liquidityAdded);\r\n\r\n        if (buyBack.isBuyback) {\r\n            withdrawable = withdrawable - buyBack.totalBuyBackAmount;\r\n        }\r\n\r\n        _transferFunds(msg.sender, withdrawable);\r\n    }\r\n\r\n    /**\r\n     * @notice  distribute total referral reward among referrers as per their contribution\r\n     */\r\n    function distributeRewards() internal {\r\n        uint256 length = referrers.length;\r\n\r\n        if (length > 0) {\r\n            for (uint256 i = 0; i < length; i++) {\r\n                RewardDetails storage reward = rewardInfo[referrers[i]];\r\n\r\n                uint256 share = (totalReward * reward.referralInvest) / totalReferralInvest;\r\n\r\n                reward.rewardShare = share;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  called by the referrers to claim referral reward.\r\n     */\r\n    function claimReward() external {\r\n        RewardDetails storage reward = rewardInfo[msg.sender];\r\n\r\n        require(currentStatus == Status.CLOSED, 'Sale is not closed');\r\n        require(reward.rewardShare > 0, 'User is not referrer');\r\n\r\n        uint256 share = reward.rewardShare;\r\n        reward.rewardShare = 0;\r\n\r\n        _transferFunds(msg.sender, share);\r\n\r\n        emit RewardsCalimed(Id, msg.sender, share);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by the investros to claim tokens againt their investment\r\n     */\r\n    function claimTokens() external nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n        uint256 userShare = getUserTokens(msg.sender);\r\n\r\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\r\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\r\n\r\n        require((user.userCalimed + userShare) <= userShare, 'All tokens claimed');\r\n\r\n        user.userCalimed = userShare;\r\n\r\n        totalClaimed += userShare;\r\n\r\n        fairlaunch.token.transfer(msg.sender, userShare);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by investor to withdraw funds if sale fails to reach softcap or cancelled by owner.\r\n     */\r\n    function claimUserRefund() external {\r\n        UserDetails storage info = userInfo[msg.sender];\r\n        require(\r\n            (block.timestamp >= fairlaunch.endTime && totalRaised < fairlaunch.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Refund is not allowed'\r\n        );\r\n        require(info.userInvest > 0, 'User has not invested');\r\n\r\n        uint256 refund = info.userInvest;\r\n        info.userInvest = 0;\r\n        _transferFunds(msg.sender, refund);\r\n    }\r\n\r\n    /**\r\n     * @notice  anyone call this function to buyback tokens from dex and burn them\r\n     */\r\n    function buyBackTokens() public {\r\n        require(currentStatus == Status.CLOSED, 'Sale has not ended');\r\n        require(block.timestamp - fairlaunch.finalizeTime >= buyBack.maxDelay, 'Buyback not initailzed');\r\n        require(block.timestamp - buyBack.lastBuyTime >= buyBack.minDelay, 'Buyback delay not reached');\r\n        require(buyBack.boughtBackAmount < buyBack.totalBuyBackAmount, 'Insuffcient funds');\r\n\r\n        address[] memory path = getPathForTokens();\r\n\r\n        // swap eth to token\r\n        uint256[] memory data;\r\n\r\n        uint256 buyAmount = buyBack.amountPerBuyback;\r\n\r\n        buyAmount = ((buyBack.totalBuyBackAmount - buyBack.boughtBackAmount) < buyBack.amountPerBuyback)\r\n            ? (buyBack.totalBuyBackAmount - buyBack.boughtBackAmount)\r\n            : buyBack.amountPerBuyback;\r\n\r\n        buyBack.boughtBackAmount += buyAmount;\r\n        buyBack.lastBuyTime = block.timestamp;\r\n\r\n        if (fundByTokens) {\r\n            fundToken.approve(address(liquidity.router), buyAmount);\r\n\r\n            data = liquidity.router.swapExactTokensForTokens(\r\n                buyAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 1800\r\n            );\r\n        } else {\r\n            data = liquidity.router.swapExactETHForTokens{ value: buyAmount }(\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 1800\r\n            );\r\n        }\r\n\r\n        // burn token\r\n        fairlaunch.token.transfer(address(0x000000000000000000000000000000000000dEaD), data[1]);\r\n    }\r\n\r\n    /**\r\n     * @notice  set affliation percentage in bips(3)\r\n     * @param   _reward  percentage in bips\r\n     */\r\n    function setAffiliation(uint256 _reward) external onlyOwner {\r\n        require(_reward <= 5e3, \"Reward can't be greater than 5%\");\r\n        require(currentStatus != Status.CANCELLED, 'Sale is cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale is not active');\r\n        fairlaunch.affiliateReward = _reward;\r\n\r\n        emit UpdateReward(Id, _reward, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice  update start and end time before sale start\r\n     * @param   _startTime  .\r\n     * @param   _endTime  .\r\n     */\r\n    function setTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\r\n        require(block.timestamp < fairlaunch.startTime, 'Sale already started');\r\n        require(_startTime > block.timestamp && _startTime < _endTime, 'Invalid start time');\r\n\r\n        fairlaunch.startTime = _startTime;\r\n        fairlaunch.endTime = _endTime;\r\n\r\n        emit UpdateTime(Id, _startTime, _endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  let owner update end time even after sale start\r\n     * @param   _endTime  .\r\n     */\r\n    function setEndTime(uint256 _endTime) external onlyOwner {\r\n        require(currentStatus != Status.CANCELLED, 'Sale is cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale is closed');\r\n        require(_endTime > fairlaunch.startTime, 'Invalid end time');\r\n\r\n        fairlaunch.endTime = _endTime;\r\n\r\n        emit UpdateEndTime(Id, block.timestamp, _endTime);\r\n    }\r\n\r\n    /**\r\n     * @return  mode  of the current sale  (public or private)\r\n     */\r\n    function getCurrentMode() public view returns (Mode mode) {\r\n        mode = (block.timestamp < fairlaunch.startTime)\r\n            ? Mode.PENDING //pending\r\n            : (block.timestamp >= fairlaunch.startTime && block.timestamp < fairlaunch.publicSaleTime)\r\n            ? Mode.PRIVATE //private\r\n            : Mode.PUBLIC; //public\r\n    }\r\n\r\n    /**\r\n     * @return  status  of the current sale\r\n     */\r\n    function getCurrentSatus() public view returns (Status status) {\r\n        status = (block.timestamp < fairlaunch.startTime && currentStatus != Status.CANCELLED)\r\n            ? Status.INCOMMING\r\n            : (currentStatus != Status.CANCELLED &&\r\n                currentStatus != Status.CLOSED &&\r\n                block.timestamp > fairlaunch.startTime)\r\n            ? Status.ACTIVE\r\n            : currentStatus;\r\n    }\r\n\r\n    /**\r\n     * @param   _user  address of usr\r\n     * @return  tokens  amount of user tokens\r\n     */\r\n    function getUserTokens(address _user) public returns (uint256 tokens) {\r\n        require(currentStatus == Status.CLOSED, 'Token will be allocated after finalize sale');\r\n\r\n        UserDetails memory user = userInfo[_user];\r\n\r\n        tokens = fundByTokens\r\n            ? (user.userInvest * currentPrice) / (10 ** fundToken.decimals())\r\n            : (user.userInvest * currentPrice) / 1e18;\r\n    }\r\n\r\n    /**\r\n     * @return  address[]  returns array of referrers\r\n     */\r\n    function getAllReferrers() public view returns (address[] memory) {\r\n        return referrers;\r\n    }\r\n\r\n    /**\r\n     * @return  address[]  return array of investors\r\n     */\r\n    function getAllInvestors() public view returns (address[] memory) {\r\n        return investors;\r\n    }\r\n\r\n    /**\r\n     * @notice  In every sale specific amount is allocated or buy back purpose\r\n     * @return  uint256  it returns the remaing amunt to buy back out of total\r\n     */\r\n    function remainingBuybackAmount() public view returns (uint256) {\r\n        return buyBack.totalBuyBackAmount - buyBack.boughtBackAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice sell tokens and purchase currency pair\r\n     * @return  pairAddress  .\r\n     */\r\n    function getTokenPair() internal view returns (address pairAddress) {\r\n        if (fundByTokens) {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                address(fundToken),\r\n                address(fairlaunch.token)\r\n            );\r\n        } else {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                liquidity.router.WETH(),\r\n                address(fairlaunch.token)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  return sell tokens and purchase currency share to add liquidity\r\n     * @return  share  purchase currency\r\n     * @return  tokens  sell token\r\n     */\r\n    function getTokenShare() internal view returns (uint256 share, uint256 tokens) {\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n\r\n        uint256 funds = totalRaised - (fee + totalReward);\r\n\r\n        share = (funds * liquidity.liquidityPercent) / 100e3;\r\n\r\n        tokens = tokenToReceive - fairlaunch.totalsellTokens;\r\n    }\r\n\r\n    /**\r\n     * @notice  adds the liquidity of sell token and purchase currency pair and locks the received LP tokens\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     */\r\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\r\n        if (totalRaised > 0) {\r\n            uint256 amountToken;\r\n            uint256 amountETH;\r\n            uint256 _liquidity;\r\n\r\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\r\n\r\n            fairlaunch.token.approve(address(liquidity.router), sellTokenShare);\r\n\r\n            if (!fundByTokens) {\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\r\n                    value: fundTokenShare\r\n                }(\r\n                    address(fairlaunch.token),\r\n                    sellTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                fundToken.approve(address(liquidity.router), fundTokenShare);\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\r\n                    address(fairlaunch.token),\r\n                    address(fundToken),\r\n                    sellTokenShare,\r\n                    fundTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            liquidity.liquidityAdded = fundTokenShare;\r\n            address pairAddress = getTokenPair();\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            uint256 pairBalance = pair.balanceOf(address(this));\r\n\r\n            pair.approve(liquidity.locker, pairBalance);\r\n\r\n            IGempadVestingLock(liquidity.locker).lock(\r\n                owner(),\r\n                pairAddress,\r\n                true,\r\n                pairBalance,\r\n                (block.timestamp + liquidity.lockTime),\r\n                'Gempad-FairLaunch'\r\n            );\r\n\r\n            return (amountToken, amountETH, _liquidity);\r\n        }\r\n\r\n        return (0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer funds\r\n     * @dev     .\r\n     * @param   _to  .\r\n     * @param   _amount  .\r\n     */\r\n    function _transferFunds(address _to, uint256 _amount) private {\r\n        if (fundByTokens) {\r\n            fundToken.transfer(_to, _amount);\r\n        } else {\r\n            payable(_to).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n\r\n     * @return  address[]  .returns path for liquidity tokens\r\n     */\r\n    function getPathForTokens() internal view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = (fundByTokens) ? address(fundToken) : liquidity.router.WETH();\r\n\r\n        path[1] = address(fairlaunch.token);\r\n\r\n        return path;\r\n    }\r\n}\r\n"
    },
    "@gempad/fairlaunch/contracts/GempadWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\n    mapping(address => bool) internal _whitelist;\n\n    event WhitelistUpdated(address[] account, address sender);\n\n    /**\n     * @notice  add users to whitelist\n     * @param   _participants  user addreses\n     */\n    function addWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\n            _whitelist[_participants[i]] = true;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @notice  remove users from whitelist\n     * @param   _participants  user addreses\n     */\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\n            _whitelist[_participants[i]] = false;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @param   _address  .\n     * @return  bool   return the whitelist status of user\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n}\n"
    },
    "@gempad/fairlaunch/contracts/interfaces/IERC20Extented.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IERC20Extented is IERC20 {\r\n\r\n    function decimals() external returns (uint8);\r\n}"
    },
    "@gempad/fairlaunch/contracts/interfaces/IGempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGempadVestingLock {\r\n\r\n  function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external  payable returns (uint256 id);\r\n\r\n  function unlock(uint256 lockId) external;\r\n\r\n  function editLock(\r\n    uint256 lockId,\r\n    uint256 newAmount,\r\n    uint256 newUnlockDate\r\n  ) external payable;\r\n}"
    },
    "@gempad/fairlaunch/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n//IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n}"
    },
    "@gempad/fairlaunch/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}"
    },
    "@gempad/fairlaunch/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n//IUnisapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "@gempad/gempadv2/contracts/GempadInterfaceMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\npragma abicoder v2;\r\n\r\n/// @notice A fork of Multicall2 specifically tailored for the Uniswap Interface\r\ncontract GempadInterfaceMulticall {\r\n    struct Call {\r\n        address target;\r\n        uint256 gasLimit;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        uint256 gasUsed;\r\n        bytes returnData;\r\n    }\r\n\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n\r\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new Result[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (address target, uint256 gasLimit, bytes memory callData) = (\r\n                calls[i].target,\r\n                calls[i].gasLimit,\r\n                calls[i].callData\r\n            );\r\n            uint256 gasLeftBefore = gasleft();\r\n            (bool success, bytes memory ret) = target.call{ gas: gasLimit }(callData);\r\n            uint256 gasUsed = gasLeftBefore - gasleft();\r\n            returnData[i] = Result(success, gasUsed, ret);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/gempadv2/contracts/interfaces/IGempadV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\n// Gempad Pair Contract Interface\r\n\r\ninterface IGempadV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "@gempad/gemtoken/contracts/GemToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/access/AccessControl.sol';\r\n\r\ncontract GemToken is ERC20, ERC20Capped, ERC20Burnable, ERC20Pausable, Ownable, AccessControl {\r\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\r\n\r\n    constructor() ERC20('GemToken', 'GEM') ERC20Capped(100000000e18) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal override(ERC20, ERC20Pausable) {\r\n        super._beforeTokenTransfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Capped) {\r\n        super._mint(to, amount);\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/AntiBotLiquidityGeneratorToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IGemAntiBot.sol\";\r\nimport \"./BaseToken.sol\";\r\n\r\ncontract AntiBotLiquidityGeneratorToken is IERC20, Ownable, BaseToken {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 public constant VERSION = 8;\r\n\r\n    uint256 public constant MAX_FEE = 10**4 / 4;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public _taxFee;\r\n    uint256 private _previousTaxFee;\r\n\r\n    uint256 public _liquidityFee;\r\n    uint256 private _previousLiquidityFee;\r\n\r\n    uint256 public _charityFee;\r\n    uint256 private _previousCharityFee;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public _charityAddress;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity;\r\n\r\n    IGemAntiBot public gemAntiBot;\r\n    bool public enableAntiBot;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyAmountUpdated(uint256 amount);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address router_,\r\n        address charityAddress_,\r\n        uint16 taxFeeBps_,\r\n        uint16 liquidityFeeBps_,\r\n        uint16 charityFeeBps_,\r\n        address pinkAntiBot_\r\n    ) payable {\r\n        if (charityAddress_ == address(0)) {\r\n            require(\r\n                charityFeeBps_ == 0,\r\n                \"Cant set both charity address to address 0 and charity percent more than 0\"\r\n            );\r\n        }\r\n        require(\r\n            taxFeeBps_ + liquidityFeeBps_ + charityFeeBps_ <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n\r\n        gemAntiBot = IGemAntiBot(pinkAntiBot_);\r\n        gemAntiBot.setTokenOwner(owner_);\r\n        enableAntiBot = true;\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 9;\r\n\r\n        _tTotal = totalSupply_;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _taxFee = taxFeeBps_;\r\n        _previousTaxFee = _taxFee;\r\n\r\n        _liquidityFee = liquidityFeeBps_;\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        _charityAddress = charityAddress_;\r\n        _charityFee = charityFeeBps_;\r\n        _previousCharityFee = _charityFee;\r\n\r\n        numTokensSellToAddToLiquidity = totalSupply_.div(10**3); // 0.1%\r\n\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        _rOwned[owner_] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner_] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner_, _tTotal);\r\n\r\n        emit TokenCreated(\r\n            owner_,\r\n            address(this),\r\n            TokenType.antiBotLiquidityGenerator,\r\n            VERSION\r\n        );\r\n\r\n    }\r\n\r\n    function setEnableAntiBot(bool _enable) external onlyOwner {\r\n        enableAntiBot = _enable;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFeeBps) external onlyOwner {\r\n        _taxFee = taxFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFeeBps)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _liquidityFee = liquidityFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setCharityFeePercent(uint256 charityFeeBps) external onlyOwner {\r\n        _charityFee = charityFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setSwapBackSettings(uint256 _amount) external onlyOwner {\r\n        require(\r\n            _amount >= totalSupply().mul(5).div(10**4),\r\n            \"Swapback amount should be at least 0.05% of total supply\"\r\n        );\r\n        numTokensSellToAddToLiquidity = _amount;\r\n        emit SwapAndLiquifyAmountUpdated(_amount);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tCharity,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tCharity\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tCharityFee = calculateCharityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(\r\n            tCharityFee\r\n        );\r\n        return (tTransferAmount, tFee, tLiquidity, tCharityFee);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 tCharity,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rCharity = tCharity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(\r\n            rCharity\r\n        );\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function _takeCharityFee(uint256 tCharity) private {\r\n        if (tCharity > 0) {\r\n            uint256 currentRate = _getRate();\r\n            uint256 rCharity = tCharity.mul(currentRate);\r\n            _rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\r\n            if (_isExcluded[_charityAddress])\r\n                _tOwned[_charityAddress] = _tOwned[_charityAddress].add(\r\n                    tCharity\r\n                );\r\n            emit Transfer(_msgSender(), _charityAddress, tCharity);\r\n        }\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(10**4);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_liquidityFee).div(10**4);\r\n    }\r\n\r\n    function calculateCharityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_charityAddress == address(0)) return 0;\r\n        return _amount.mul(_charityFee).div(10**4);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousCharityFee = _charityFee;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _charityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _charityFee = _previousCharityFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (enableAntiBot) {\r\n            gemAntiBot.onPreTransferCheck(from, to, amount);\r\n        }\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/AntiBotStandardToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interfaces/IGemAntiBot.sol\";\r\nimport \"./BaseToken.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract AntiBotStandardToken is Initializable, IERC20Upgradeable, OwnableUpgradeable, BaseToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant VERSION = 5;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    IGemAntiBot public gemAntiBot;\r\n    bool public enableAntiBot;\r\n\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address pinkAntiBot_\r\n    ) public payable initializer {\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        \r\n        _mint(owner_, totalSupply_);\r\n\r\n        gemAntiBot = IGemAntiBot(pinkAntiBot_);\r\n        gemAntiBot.setTokenOwner(owner_);\r\n\r\n        __Ownable_init();\r\n\r\n        transferOwnership(owner_);\r\n\r\n        enableAntiBot = true;\r\n\r\n        emit TokenCreated(\r\n            owner(),\r\n            address(this),\r\n            TokenType.antiBotStandard,\r\n            VERSION\r\n        );\r\n\r\n    }\r\n\r\n    function setEnableAntiBot(bool _enable) external onlyOwner {\r\n        enableAntiBot = _enable;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (enableAntiBot) {\r\n            gemAntiBot.onPreTransferCheck(sender, recipient, amount);\r\n        }\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/BaseToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nenum TokenType {\r\n    standard,\r\n    antiBotStandard,\r\n    liquidityGenerator,\r\n    antiBotLiquidityGenerator,\r\n    baby,\r\n    antiBotBaby,\r\n    buybackBaby,\r\n    antiBotBuybackBaby\r\n}\r\n\r\nabstract contract BaseToken {\r\n    event TokenCreated(\r\n        address indexed owner,\r\n        address indexed token,\r\n        TokenType tokenType,\r\n        uint256 version\r\n    );\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../AntiBotLiquidityGeneratorToken.sol\";\r\nimport \"../../interfaces/ILiquidityGeneratorToken.sol\";\r\n\r\n\r\ncontract AntibotLiquidityGeneratorTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n    function create(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        address router,\r\n        address charity,\r\n        uint16 taxFeeBps,\r\n        uint16 liquidityFeeBps,\r\n        uint16 charityBps,\r\n        address pinkAntiBot_\r\n    ) external payable enoughFee nonReentrant returns (address) {\r\n        refundExcessiveFee();\r\n        payable(feeTo).sendValue(flatFee);\r\n        AntiBotLiquidityGeneratorToken ltoken = new AntiBotLiquidityGeneratorToken(\r\n            msg.sender,\r\n            name,\r\n            symbol,\r\n            totalSupply,\r\n            router,\r\n            charity,\r\n            taxFeeBps,\r\n            liquidityFeeBps,\r\n            charityBps,\r\n            pinkAntiBot_\r\n        );\r\n        ltoken.transferOwnership(msg.sender);\r\n        assignTokenToOwner(msg.sender, address(ltoken), 8);\r\n        emit TokenCreated(msg.sender, address(ltoken), 8);\r\n        return address(ltoken);\r\n    }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/AntiBotStandardTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../../interfaces/IAntiBotStandardERC20.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract AntiBotStandardTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n  using SafeMath for uint256;\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n  function create(\r\n    string memory name, \r\n    string memory symbol, \r\n    uint8 decimals, \r\n    uint256 totalSupply,\r\n    address gemAntiBot_\r\n  ) external payable enoughFee nonReentrant returns (address token) {\r\n    refundExcessiveFee();\r\n    payable(feeTo).sendValue(flatFee);\r\n    token = Clones.clone(implementation);\r\n    \r\n    IAntiBotStandardERC20(token).initialize(msg.sender, name, symbol, decimals, totalSupply,gemAntiBot_);\r\n\r\n    assignTokenToOwner(msg.sender, token, 5);\r\n    emit TokenCreated(msg.sender, token, 5);\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/BabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../../interfaces/IBabyToken.sol\";\r\n\r\n\r\ncontract BabyTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n  function create(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 totalSupply,\r\n    address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\r\n    uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n    uint256 minimumTokenBalanceForDividends_\r\n  ) external payable enoughFee nonReentrant returns (address token) {\r\n    refundExcessiveFee();\r\n    payable(feeTo).sendValue(flatFee);\r\n    token = Clones.clone(implementation);\r\n    IBabyToken(token).initialize(\r\n      msg.sender,\r\n      name,\r\n      symbol,\r\n      totalSupply,\r\n      addrs,\r\n      feeSettings,\r\n      minimumTokenBalanceForDividends_\r\n    );\r\n    assignTokenToOwner(msg.sender, token, 2);\r\n    emit TokenCreated(msg.sender, token, 2);\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/LiquidityGeneratorTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../../interfaces/ILiquidityGeneratorToken.sol\";\r\n\r\n\r\ncontract LiquidityGeneratorTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n  function create(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 totalSupply,\r\n    address router,\r\n    address charity,\r\n    uint16 taxFeeBps, \r\n    uint16 liquidityFeeBps,\r\n    uint16 charityBps\r\n    // uint16 maxTxBps\r\n  ) external payable enoughFee nonReentrant returns (address token) {\r\n    refundExcessiveFee();\r\n    payable(feeTo).sendValue(flatFee);\r\n    token = Clones.clone(implementation);\r\n    ILiquidityGeneratorToken(token).initialize(\r\n      msg.sender,\r\n      name,\r\n      symbol,\r\n      totalSupply,\r\n      router,\r\n      charity,\r\n      taxFeeBps,\r\n      liquidityFeeBps,\r\n      charityBps\r\n      // maxTxBps\r\n    );\r\n    assignTokenToOwner(msg.sender, token, 4);\r\n    emit TokenCreated(msg.sender, token, 4);\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/StandardTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./TokenFactoryBase.sol\";\r\nimport \"../../interfaces/IStandardERC20.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract StandardTokenFactory is TokenFactoryBase {\r\n  using Address for address payable;\r\n  using SafeMath for uint256;\r\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\r\n\r\n  function create(\r\n    string memory name, \r\n    string memory symbol, \r\n    uint8 decimals, \r\n    uint256 totalSupply\r\n  ) external payable enoughFee nonReentrant returns (address token) {\r\n    refundExcessiveFee();\r\n    payable(feeTo).sendValue(flatFee);\r\n    token = Clones.clone(implementation);\r\n    IStandardERC20(token).initialize(msg.sender, name, symbol, decimals, totalSupply);\r\n    assignTokenToOwner(msg.sender, token, 1);\r\n    emit TokenCreated(msg.sender, token, 1);\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4; \r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../../interfaces/IFactoryManager.sol\";\r\n\r\n\r\ncontract TokenFactoryBase is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using Address for address payable;\r\n\r\n  address public factoryManager;\r\n  address public implementation;\r\n  address public feeTo;\r\n  uint256 public flatFee;\r\n\r\n  event TokenCreated(\r\n      address indexed owner,\r\n      address indexed token,\r\n      uint8 tokenType\r\n  );\r\n\r\n  modifier enoughFee() {\r\n    require(msg.value >= flatFee, \"Flat fee\");\r\n    _;\r\n  }\r\n\r\n  constructor(address factoryManager_, address implementation_) {\r\n    factoryManager = factoryManager_;\r\n    implementation = implementation_;\r\n    feeTo = msg.sender;\r\n    flatFee = 10_000_000 gwei;\r\n  }\r\n\r\n  function setImplementation(address implementation_) external onlyOwner {\r\n    implementation = implementation_;\r\n  }\r\n\r\n  function setFeeTo(address feeReceivingAddress) external onlyOwner {\r\n    feeTo = feeReceivingAddress;\r\n  }\r\n\r\n  function setFlatFee(uint256 fee) external onlyOwner {\r\n    flatFee = fee;\r\n  }\r\n\r\n  function assignTokenToOwner(address owner, address token, uint8 tokenType) internal {\r\n    IFactoryManager(factoryManager).assignTokensToOwner(owner, token, tokenType);\r\n  }\r\n\r\n  function refundExcessiveFee() internal {\r\n    uint256 refund = msg.value.sub(flatFee);\r\n    if (refund > 0) {\r\n      payable(msg.sender).sendValue(refund);\r\n    }\r\n  }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/factories/TokenFactoryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"../../interfaces/IFactoryManager.sol\";\r\n\r\ncontract TokenFactoryManager is Ownable, IFactoryManager {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  struct Token {\r\n    uint8 tokenType;\r\n    address tokenAddress;\r\n  }\r\n\r\n  EnumerableSet.AddressSet private tokenFactories;\r\n  mapping(address => Token[]) private tokensOf;\r\n  mapping(address => mapping(address => bool)) private hasToken;\r\n  mapping(address => bool) private isGenerated;\r\n\r\n  modifier onlyAllowedFactory() {\r\n    require(tokenFactories.contains(msg.sender), \"Not a whitelisted factory\");\r\n    _;\r\n  }\r\n\r\n  function addTokenFactory(address factory) public onlyOwner {\r\n    tokenFactories.add(factory);\r\n  }\r\n\r\n  function addTokenFactories(address[] memory factories) external onlyOwner {\r\n    for (uint256 i = 0; i < factories.length; i++) {\r\n      addTokenFactory(factories[i]);\r\n    }\r\n  }\r\n\r\n  function removeTokenFactory(address factory) external onlyOwner {\r\n    tokenFactories.remove(factory);\r\n  }\r\n\r\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) \r\n    external override onlyAllowedFactory {\r\n    require(!hasToken[owner][token], \"Token already exists\");\r\n    tokensOf[owner].push(Token(tokenType, token));\r\n    hasToken[owner][token] = true;\r\n    isGenerated[token] = true;\r\n  }\r\n\r\n  function getAllowedFactories() public view returns (address[] memory) {\r\n    uint256 length = tokenFactories.length();\r\n    address[] memory factories = new address[](length);\r\n    for (uint256 i = 0; i < length; i++) {\r\n      factories[i] = tokenFactories.at(i);\r\n    }\r\n    return factories;\r\n  }\r\n\r\n  function isTokenGenerated(address token) external view returns (bool) {\r\n    return isGenerated[token];\r\n  }\r\n\r\n  function getToken(address owner, uint256 index) external view returns (address, uint8) {\r\n    if (index > tokensOf[owner].length) {\r\n      return (address(0), 0);\r\n    }\r\n    return (tokensOf[owner][index].tokenAddress, uint8(tokensOf[owner][index].tokenType));\r\n  }\r\n\r\n  function getAllTokens(address owner) external view returns (address[] memory, uint8[] memory) {\r\n      uint256 length = tokensOf[owner].length;\r\n      address[] memory tokenAddresses = new address[](length);\r\n      uint8[] memory tokenTypes = new uint8[](length);\r\n      for (uint256 i = 0; i < length; i++) {\r\n        tokenAddresses[i] = tokensOf[owner][i].tokenAddress;\r\n        tokenTypes[i] = uint8(tokensOf[owner][i].tokenType);\r\n      }\r\n      return (tokenAddresses, tokenTypes);\r\n   }\r\n\r\n   function getTokensForType(address owner, uint8 tokenType) external view returns (address[] memory) {\r\n      uint256 length = 0;\r\n      for (uint256 i = 0; i < tokensOf[owner].length; i++) {\r\n        if (tokensOf[owner][i].tokenType == tokenType) {\r\n          length++;\r\n        }\r\n      }\r\n      address[] memory tokenAddresses = new address[](length);\r\n      if (length == 0) {\r\n        return tokenAddresses;\r\n      }\r\n      uint256 currentIndex;\r\n      for (uint256 i = 0; i < tokensOf[owner].length; i++) {\r\n        if (tokensOf[owner][i].tokenType == tokenType) {\r\n          tokenAddresses[currentIndex] = tokensOf[owner][i].tokenAddress;\r\n          currentIndex++;\r\n        }\r\n      }\r\n      return tokenAddresses;\r\n   }\r\n}"
    },
    "@gempad/generatetokens/contracts/GemAntiBotOld.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\ncontract GemAntiBotOld is OwnableUpgradeable {\r\n  string public VERSION;\r\n  address private _linkedOwner;\r\n  mapping(address => bool) private _blacklisted;\r\n\r\n  function setTokenOwner(address owner_) external {\r\n    require(owner_ == owner(), \"Invalid ownership\");\r\n    _linkedOwner = owner_;\r\n  }\r\n\r\n  function onPreTransferCheck(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external view {\r\n    require(!_blacklisted[sender] && !_blacklisted[recipient], \"Blacklisted!\");\r\n\r\n    // todo: next upgrade should replace below line\r\n    // only able to sell 1 tx per configured time (ex: 1 hour)\r\n    keccak256(abi.encodePacked(sender, recipient, amount));\r\n  }\r\n\r\n  function initialize() public initializer {\r\n    __Ownable_init();\r\n    __AntiBot_init();\r\n  }\r\n\r\n  function __AntiBot_init() internal initializer {\r\n    VERSION = \"1.0.1\";\r\n  }\r\n}"
    },
    "@gempad/generatetokens/contracts/LiquidityGeneratorToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"./BaseToken.sol\";\r\n\r\ncontract LiquidityGeneratorToken is\r\n    Initializable,\r\n    IERC20Upgradeable,\r\n    OwnableUpgradeable,\r\n    BaseToken\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    uint256 public constant VERSION = 4;\r\n\r\n    uint256 public constant MAX_FEE = 10**4 / 4;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public _taxFee;\r\n    uint256 private _previousTaxFee;\r\n\r\n    uint256 public _liquidityFee;\r\n    uint256 private _previousLiquidityFee;\r\n\r\n    uint256 public _charityFee;\r\n    uint256 private _previousCharityFee;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public _charityAddress;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyAmountUpdated(uint256 amount);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address router_,\r\n        address charityAddress_,\r\n        uint16 taxFeeBps_,\r\n        uint16 liquidityFeeBps_,\r\n        uint16 charityFeeBps_\r\n    ) external payable initializer {\r\n        \r\n        if (charityAddress_ == address(0)) {\r\n            require(\r\n                charityFeeBps_ == 0,\r\n                \"Cant set both charity address to address 0 and charity percent more than 0\"\r\n            );\r\n        }\r\n        require(\r\n            taxFeeBps_ + liquidityFeeBps_ + charityFeeBps_ <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 9;\r\n\r\n        _tTotal = totalSupply_;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _taxFee = taxFeeBps_;\r\n        _previousTaxFee = _taxFee;\r\n\r\n        _liquidityFee = liquidityFeeBps_;\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        _charityAddress = charityAddress_;\r\n        _charityFee = charityFeeBps_;\r\n        _previousCharityFee = _charityFee;\r\n\r\n        numTokensSellToAddToLiquidity = totalSupply_.div(10**3); // 0.1%\r\n\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        _transferOwnership(owner_);\r\n\r\n        _rOwned[owner_] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner_] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner_, _tTotal);\r\n\r\n        emit TokenCreated(\r\n            owner_,\r\n            address(this),\r\n            TokenType.liquidityGenerator,\r\n            VERSION\r\n        );\r\n\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFeeBps) external onlyOwner {\r\n        _taxFee = taxFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFeeBps)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _liquidityFee = liquidityFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setCharityFeePercent(uint256 charityFeeBps) external onlyOwner {\r\n        _charityFee = charityFeeBps;\r\n        require(\r\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\r\n            \"Total fee is over 25%\"\r\n        );\r\n    }\r\n\r\n    function setSwapBackSettings(uint256 _amount) external onlyOwner {\r\n        require(\r\n            _amount >= totalSupply().mul(5).div(10**4),\r\n            \"Swapback amount should be at least 0.05% of total supply\"\r\n        );\r\n        numTokensSellToAddToLiquidity = _amount;\r\n        emit SwapAndLiquifyAmountUpdated(_amount);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tCharity,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tCharity\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tCharityFee = calculateCharityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(\r\n            tCharityFee\r\n        );\r\n        return (tTransferAmount, tFee, tLiquidity, tCharityFee);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 tCharity,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rCharity = tCharity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(\r\n            rCharity\r\n        );\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function _takeCharityFee(uint256 tCharity) private {\r\n        if (tCharity > 0) {\r\n            uint256 currentRate = _getRate();\r\n            uint256 rCharity = tCharity.mul(currentRate);\r\n            _rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\r\n            if (_isExcluded[_charityAddress])\r\n                _tOwned[_charityAddress] = _tOwned[_charityAddress].add(\r\n                    tCharity\r\n                );\r\n            emit Transfer(_msgSender(), _charityAddress, tCharity);\r\n        }\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(10**4);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_liquidityFee).div(10**4);\r\n    }\r\n\r\n    function calculateCharityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_charityAddress == address(0)) return 0;\r\n        return _amount.mul(_charityFee).div(10**4);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousCharityFee = _charityFee;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _charityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _charityFee = _previousCharityFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tCharity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeCharityFee(tCharity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/contracts/StandardToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./BaseToken.sol\";\r\n\r\ncontract StandardToken is Initializable, IERC20Upgradeable, OwnableUpgradeable, BaseToken {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address payable;\r\n\r\n    uint256 public constant VERSION = 1;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_\r\n\r\n    ) public initializer {\r\n        __Ownable_init();\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n        _mint(owner_, totalSupply_);\r\n        \r\n        transferOwnership(owner_);\r\n\r\n        emit TokenCreated(owner_, address(this), TokenType.standard, VERSION);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /** \r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IAntiBotStandardERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IAntiBotStandardERC20 {\r\n    function initialize(\r\n      address owner_, \r\n      string memory name_, \r\n      string memory symbol_, \r\n      uint8 decimals_, \r\n      uint256 totalSupply_,\r\n      address antibot_\r\n    ) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IBabyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBabyToken {\r\n    function initialize(\r\n        address owner_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\r\n        uint256[3] memory feeSettings, // rewards, liquidity, marketing\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IFactoryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactoryManager {\r\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IGemAntiBot.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGemAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/ILiquidityGeneratorToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILiquidityGeneratorToken {\r\n    function initialize (\r\n        address owner_,\r\n        string memory name_, \r\n        string memory symbol_, \r\n        uint256 totalSupply_, \r\n        address router_,\r\n        address charityAddress_,\r\n        uint16 taxFeeBps_, \r\n        uint16 liquidityFeeBps_,\r\n        uint16 charityFeeBps_\r\n        // uint16 maxTxBps_\r\n    ) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IStandardERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IStandardERC20 {\r\n    function initialize(\r\n      address owner_, \r\n      string memory name_, \r\n      string memory symbol_, \r\n      uint8 decimals_, \r\n      uint256 totalSupply_\r\n    ) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "@gempad/generatetokens/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/IterableMapping.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n        public\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/libs/SafeERC20NoRevert.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title SafeERC20NoRevert\r\n * @dev Taken from OpenZeppelin's SafeERC20 implementation, just return a bool value without reverting\r\n * Clients using this function need to check for the return value themselves.\r\n */\r\nlibrary SafeERC20NoRevert {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        (bool success, bytes memory returndata) = address(token).call(\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n        return\r\n            success &&\r\n            (returndata.length == 0 || abi.decode(returndata, (bool))) &&\r\n            address(token).code.length > 0;\r\n    }\r\n}\r\n"
    },
    "@gempad/generatetokens/utils/Auth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n"
    },
    "@gempad/launchpad/contracts/factory/GempadLaunchpadBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\n\r\ncontract GempadLaunchpadBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice  new implementation contract address\r\n     */\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), 'Invalid blueprint');\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/launchpad/contracts/factory/GempadLaunchpadFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '../interfaces/IERC20Extented.sol';\r\nimport './GempadLaunchpadBeacon.sol';\r\nimport '../GempadLaunchpad.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadLaunchpadFactory is Ownable {\r\n    using SafeERC20 for IERC20Extented;\r\n\r\n    uint256 public IdCounter = 0;\r\n\r\n    address[] public launchpads;\r\n    mapping(address => address[]) private userLaunchpads;\r\n\r\n    GempadLaunchpadBeacon immutable beacon;\r\n\r\n    struct LaunchpadDetails {\r\n        IERC20Extented token;\r\n        uint256 sellPrice;\r\n        uint256 listingPrice;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n        bool isAutolisting;\r\n    }\r\n    struct VestingDetails {\r\n        bool isVestingEnable;\r\n        uint256 TGEPercent;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    event LaunchpadCreated(\r\n        uint256 id,\r\n        LaunchpadDetails info,\r\n        LiquidityDetails liq,\r\n        VestingDetails vesting,\r\n        bool isprivateSale,\r\n        address launchpad\r\n    );\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadLaunchpadBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllLaunchpads() external view returns (address[] memory) {\r\n        return launchpads;\r\n    }\r\n\r\n    function getUserLaunchpads(address _user) external view returns (address[] memory) {\r\n        return userLaunchpads[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice  create a new luanchpad by user after paying fee.\r\n     * @dev     called by user\r\n     * @param   _info  core params\r\n     * @param   _liquidity  liquidity setting\r\n     * @param   _vesting  token claim vesting\r\n     * @param   _fundToken   purchase currency\r\n     * @param   _isprivateSale  public or private sale mode\r\n     * @param   _isAffiliate   status of affiliate.\r\n     * @param   _affiliateReward  reward percentage in bips\r\n     * @param   _refundType  refund extra token ror burn (//true refund and false burn)\r\n     * @param   _feeReceiver  protocol fee receiver\r\n     */\r\n    function createLaunchpad(\r\n        LaunchpadDetails memory _info,\r\n        LiquidityDetails memory _liquidity,\r\n        VestingDetails memory _vesting,\r\n        address _fundToken,\r\n        bool _isprivateSale,\r\n        bool _isAffiliate,\r\n        uint256 _affiliateReward,\r\n        bool _refundType,\r\n        address payable _feeReceiver\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 _id = ++IdCounter;\r\n        BeaconProxy launchpad = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadLaunchpad(payable(address(0))).__GempadLaunchpad_init.selector,\r\n                _id,\r\n                _info,\r\n                _liquidity,\r\n                _vesting,\r\n                _fundToken,\r\n                _isprivateSale,\r\n                _isAffiliate,\r\n                _affiliateReward,\r\n                _refundType,\r\n                _feeReceiver,\r\n                _msgSender()\r\n            )\r\n        );\r\n\r\n        uint256 toReceive = getTokens(_info, _liquidity, _feeReceiver, _fundToken);\r\n\r\n        uint256 before = _info.token.balanceOf(address(launchpad));\r\n\r\n        _info.token.transferFrom(msg.sender, address(launchpad), toReceive);\r\n\r\n        require(\r\n            _info.token.balanceOf(address(launchpad)) == (before + toReceive),\r\n            'Insufficient token received'\r\n        );\r\n\r\n        launchpads.push(address(launchpad));\r\n        userLaunchpads[msg.sender].push(address(launchpad));\r\n\r\n        emit LaunchpadCreated(_id, _info, _liquidity, _vesting, _isprivateSale, address(launchpad));\r\n    }\r\n\r\n    function getTokens(\r\n        LaunchpadDetails memory _info,\r\n        LiquidityDetails memory _liquidity,\r\n        address _feeReceiver,\r\n        address _fundToken\r\n    ) private returns (uint256) {\r\n        uint256 decimals = (_fundToken == address(0)) ? 18 : IERC20Extented(_fundToken).decimals();\r\n\r\n        uint256 sellTokens = (_info.hardCap * _info.sellPrice) / 10 ** decimals;\r\n\r\n        uint256 tokenFee = IPayable(_feeReceiver).getFee('GempadLaunchpad');\r\n\r\n        uint256 fee = (sellTokens * tokenFee) / 100e3;\r\n\r\n        uint256 list = ((sellTokens - fee) * _liquidity.liquidityPercent) / 100e3;\r\n\r\n        uint256 listingTokens = (list * _info.listingPrice) / _info.sellPrice;\r\n\r\n        uint256 totalReceive = sellTokens + listingTokens;\r\n\r\n        uint256 toReceive = _liquidity.isAutolisting ? totalReceive : sellTokens;\r\n\r\n        return toReceive;\r\n    }\r\n\r\n    function getLaunchpadBeacon() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/launchpad/contracts/GempadLaunchpad.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport '@openzeppelin/contracts/utils/math/Math.sol';\r\nimport './interfaces/IERC20Extented.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './interfaces/IUniswapV2Router02.sol';\r\nimport './interfaces/IGempadVestingLock.sol';\r\nimport './GempadWhitelist.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadLaunchpad is ServicePayer, GempadWhitelist, ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n    bool private isInitialized = false;\r\n    uint256 public Id;\r\n\r\n    LaunchpadDetails public launchpad;\r\n    LiquidityDetails public liquidity;\r\n    VestingDetails public vesting;\r\n    Status public currentStatus;\r\n    IERC20Extented public fundToken;\r\n\r\n    bool public fundByTokens;\r\n\r\n    bool private refundType; //true refund and false burn\r\n\r\n    bool private isPrivateMode;\r\n\r\n    bool public isAffiliate;\r\n    uint256 public affiliateReward;\r\n\r\n    address private feeReceiver;\r\n    uint256 public tokenFee;\r\n\r\n    uint8 private decimals;\r\n\r\n    uint256 public totalRaised;\r\n    uint256 public totalClaimed;\r\n    uint256 public totalReferralInvest;\r\n    uint256 public claimTime;\r\n\r\n    address[] private investors;\r\n    address[] private referrers;\r\n\r\n    mapping(address => UserDetails) public userInfo;\r\n    mapping(address => RewardDetails) public rewardInfo;\r\n\r\n    struct LaunchpadDetails {\r\n        IERC20Extented token;\r\n        uint256 sellPrice;\r\n        uint256 listingPrice;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n        bool isAutolisting;\r\n    }\r\n    struct VestingDetails {\r\n        bool isVestingEnable;\r\n        uint256 TGEPercent;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    struct UserDetails {\r\n        uint256 userInvest;\r\n        uint256 userCalimed;\r\n        uint256 lastClaimTime;\r\n        uint256 intervalClaimed;\r\n    }\r\n    struct RewardDetails {\r\n        uint256 referralInvest;\r\n        uint256 rewardShare;\r\n    }\r\n\r\n    enum Status {\r\n        INCOMMING,\r\n        ACTIVE,\r\n        CANCELLED,\r\n        CLOSED\r\n    }\r\n    enum Mode {\r\n        PENDING,\r\n        PRIVATE,\r\n        PUBLIC\r\n    }\r\n\r\n    event Purachsed(uint256 Id, address sender, uint256 _amount, uint256 amount);\r\n    event PublicSaleEnabled(uint256 Id, uint256 time);\r\n    event liquidityAdded(uint256 Id, address pair, uint256 liquidity);\r\n    event UpdateReward(uint256 Id, uint256 reward, address sender);\r\n    event ClaimTimeUpdate(uint256 Id, uint256 time, address sender);\r\n    event UpdateTime(uint256 Id, uint256 start, uint256 end);\r\n    event Transfer(uint256 Id, address receiver, uint256 token);\r\n    event RewardsCalimed(uint256 Id, address receiver, uint256 share);\r\n\r\n    /**\r\n     * @notice  initialize the core params of laucnhpad.\r\n     * @dev     called by Factory\r\n     * @param   _id  id of this laucnhpad.\r\n     * @param   info  core params\r\n     * @param   _liquidity  liquidity setting\r\n     * @param   _vesting  token claim vesting\r\n     * @param   _fundToken   purchase currency\r\n     * @param   _isPrivateMode  public or private sale mode\r\n     * @param   _isAffiliate   status of affiliate.\r\n     * @param   _affiliateReward  reward percentage in bips\r\n     * @param   _refundType  refund extra token ror burn (//true refund and false burn)\r\n     * @param   _feeReceiver  protocol fee receiver\r\n     * @param   _owner  owner of this launchpad.\r\n     */\r\n    function __GempadLaunchpad_init(\r\n        uint256 _id,\r\n        LaunchpadDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        VestingDetails memory _vesting,\r\n        address _fundToken,\r\n        bool _isPrivateMode,\r\n        bool _isAffiliate,\r\n        uint256 _affiliateReward,\r\n        bool _refundType,\r\n        address payable _feeReceiver,\r\n        address _owner\r\n    ) public payable initializer {\r\n        require(!isInitialized, 'Err: Already initialized');\r\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadLaunchpad');\r\n\r\n        Id = _id;\r\n        //set custom Investment Token\r\n        fundByTokens = _fundToken != address(0);\r\n        if (fundByTokens) {\r\n            fundToken = IERC20Extented(_fundToken);\r\n        }\r\n        if (_isAffiliate) require(_affiliateReward <= 5e3, 'MAX reward limit exceeded');\r\n\r\n        require(info.softCap <= info.hardCap, 'Soft-Cap should be less than or equal to hardcap');\r\n\r\n        require(\r\n            info.softCap >= ((info.hardCap * 25e3) / 100e3),\r\n            'Softcap must be greater than or equal 25% of Hardcap'\r\n        );\r\n\r\n        require(\r\n            info.minBuyLimit > 0 && info.minBuyLimit < info.maxBuyLimit,\r\n            'Minimum-buy limit must be less than max-but limit'\r\n        );\r\n\r\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\r\n\r\n        if (_liquidity.isAutolisting) {\r\n            require(\r\n                _liquidity.liquidityPercent > 50e3 && _liquidity.liquidityPercent <= 100e3,\r\n                'Invalid liquidity percentage'\r\n            );\r\n            require(_liquidity.lockTime >= 300, \"Lock time can't be less than 5 minuts\");\r\n\r\n            liquidity = _liquidity;\r\n        }\r\n        if (_vesting.isVestingEnable) {\r\n            require(\r\n                _vesting.TGEPercent > 0 && _vesting.TGEPercent < 100e3,\r\n                'Invalid Initial Release pecentage'\r\n            );\r\n            require(_vesting.cyclePercent > 0, 'Cycle pecentage must be greater than zero');\r\n            require(_vesting.cycleInterval > 0, 'interval must be greater than zero');\r\n            require(\r\n                (_vesting.TGEPercent + _vesting.cyclePercent) <= 100e3,\r\n                'Sum of TGE bps and cycle should be less than 100'\r\n            );\r\n\r\n            vesting = _vesting;\r\n        }\r\n\r\n        //whitelisting feature status\r\n        isPrivateMode = _isPrivateMode;\r\n        isAffiliate = _isAffiliate;\r\n        affiliateReward = _affiliateReward;\r\n\r\n        launchpad = info;\r\n\r\n        decimals = (fundByTokens) ? IERC20Extented(_fundToken).decimals() : 18;\r\n\r\n        // Initialize the public sale start time;\r\n        launchpad.publicSaleTime = (_isPrivateMode) ? info.endTime : info.startTime;\r\n\r\n        // Initialize fee and refund type\r\n        feeReceiver = _feeReceiver;\r\n        refundType = _refundType;\r\n        tokenFee = IPayable(feeReceiver).getFee('GempadLaunchpad');\r\n\r\n        _transferOwnership(_owner);\r\n        isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * @notice  user buy Tokens\r\n     * @param   _amount  amount in purchase currency\r\n     * @param   _referrer  address of referrer\r\n     */\r\n    function buyToken(uint256 _amount, address _referrer) external payable nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n        require(\r\n            block.timestamp >= launchpad.startTime && block.timestamp <= launchpad.endTime,\r\n            'Sale is not active'\r\n        );\r\n\r\n        if (block.timestamp < launchpad.publicSaleTime) {\r\n            require(_whitelist[msg.sender], 'User is not whitelisted');\r\n        }\r\n\r\n        require(_amount >= launchpad.minBuyLimit, 'Amount is less than min buy limit');\r\n        require(user.userInvest + _amount <= launchpad.maxBuyLimit, 'Maximum buy limit reached');\r\n        require((totalRaised + _amount) <= launchpad.hardCap, 'Maximum sale limit reached');\r\n\r\n        uint256 tokenAmount = (_amount * launchpad.sellPrice) / 10 ** decimals;\r\n\r\n        if (user.userInvest <= 0) investors.push(msg.sender);\r\n        user.userInvest += _amount;\r\n\r\n        // Update the total sale amount\r\n        totalRaised += _amount;\r\n\r\n        if (isAffiliate) {\r\n            if (_referrer != address(0)) {\r\n                RewardDetails storage reward = rewardInfo[_referrer];\r\n                if (reward.referralInvest <= 0) referrers.push(_referrer);\r\n\r\n                totalReferralInvest += _amount;\r\n                reward.referralInvest += _amount;\r\n            }\r\n        }\r\n\r\n        if (fundByTokens) {\r\n            fundToken.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            // Ensure that the sender has sent enough Ether\r\n            require(msg.value == _amount, 'Insufficient funds sent');\r\n        }\r\n        emit Purachsed(Id, msg.sender, tokenAmount, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  enable public or private sale time.\r\n     * @param   _startTime   start time of public sale time if it is equalo to sale end time that means its priavte sale.\r\n     */\r\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\r\n        // require(_startTime >= block.timestamp, 'Start time must be greater than current time');\r\n        launchpad.publicSaleTime = _startTime;\r\n\r\n        emit PublicSaleEnabled(Id, launchpad.publicSaleTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  finalize the sale and withdraw sell funds and sell token balance\r\n     */\r\n    function finalize() external onlyOwner {\r\n        require(\r\n            (block.timestamp >= launchpad.endTime && totalRaised >= launchpad.softCap) ||\r\n                totalRaised >= launchpad.softCap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\r\n\r\n        currentStatus = Status.CLOSED;\r\n        launchpad.finalizeTime = block.timestamp;\r\n\r\n        if (claimTime < block.timestamp) claimTime = block.timestamp;\r\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\r\n\r\n        if (liquidity.isAutolisting) addLiquidity();\r\n        if (isAffiliate && totalReferralInvest > 0) distributeRewards();\r\n\r\n        _transferFunds(feeReceiver, feeAmount);\r\n\r\n        withdrawFunds();\r\n\r\n        withdrawTokenBalance();\r\n    }\r\n\r\n    /**\r\n     * @notice  withdraw the funds raised\r\n     */\r\n    function withdrawFunds() internal nonReentrant {\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n        uint256 reward = ((totalRaised - fee) * affiliateReward) / 100e3;\r\n\r\n        uint256 withdrawable = (isAffiliate && referrers.length > 0)\r\n            ? (totalRaised - (fee + reward + liquidity.liquidityAdded))\r\n            : (totalRaised - (fee + liquidity.liquidityAdded));\r\n\r\n        _transferFunds(msg.sender, withdrawable);\r\n    }\r\n\r\n    /**\r\n     * @notice  it distrbutes the total reward amount amond referrers.\r\n     */\r\n    function distributeRewards() internal {\r\n        uint256 length = referrers.length;\r\n\r\n        if (length > 0) {\r\n            uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n            uint256 total = ((totalRaised - fee) * affiliateReward) / 100e3;\r\n\r\n            for (uint256 i = 0; i < length; i++) {\r\n                RewardDetails storage reward = rewardInfo[referrers[i]];\r\n\r\n                uint256 share = (total * reward.referralInvest) / totalReferralInvest;\r\n                reward.rewardShare = share;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  called referrer to claim their share of reward from total\r\n     */\r\n    function claimReward() external nonReentrant {\r\n        RewardDetails storage reward = rewardInfo[msg.sender];\r\n\r\n        require(currentStatus == Status.CLOSED, 'Sale is not closed');\r\n        require(reward.rewardShare > 0, 'User is not referrer');\r\n\r\n        uint256 share = reward.rewardShare;\r\n        reward.rewardShare = 0;\r\n\r\n        _transferFunds(msg.sender, share);\r\n\r\n        emit RewardsCalimed(Id, msg.sender, share);\r\n    }\r\n\r\n    /**\r\n     * @notice  cancel the sale\r\n     */\r\n    function cancel() external onlyOwner {\r\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\r\n\r\n        currentStatus = Status.CANCELLED;\r\n    }\r\n\r\n    /**\r\n     * @notice  called by the investor the claim the tokens against investment as per vesting terms\r\n     */\r\n    function claimTokens() external nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n        uint256 userShare = getUserTokens(msg.sender);\r\n\r\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\r\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\r\n        require(block.timestamp > claimTime, 'Claim time not reached');\r\n\r\n        uint256 claimableAmount = _calculateClaimableTokens(msg.sender);\r\n        uint256 claimable = user.userCalimed + claimableAmount;\r\n\r\n        require(claimableAmount > 0 && claimable <= userShare, 'Total tokens claimed');\r\n\r\n        user.userCalimed += claimableAmount;\r\n\r\n        user.lastClaimTime = block.timestamp;\r\n        totalClaimed += claimableAmount;\r\n\r\n        launchpad.token.transfer(msg.sender, claimableAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by investor to get refund incase of sale cancellation or failure to reach soft cap\r\n     */\r\n    function claimUserRefund() external nonReentrant {\r\n        UserDetails storage info = userInfo[msg.sender];\r\n        require(\r\n            (block.timestamp >= launchpad.endTime && totalRaised < launchpad.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Refund is not allowed'\r\n        );\r\n        require(info.userInvest > 0, 'User has not invested');\r\n\r\n        uint256 refund = info.userInvest;\r\n        info.userInvest = 0;\r\n        _transferFunds(msg.sender, refund);\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer the unsold tokens to owner\r\n     */\r\n    function withdrawTokenBalance() internal {\r\n        require(currentStatus == Status.CLOSED, 'Sale is not closed');\r\n\r\n        uint256 claimable = (totalRaised * launchpad.sellPrice) / (10 ** decimals);\r\n        uint256 balance = launchpad.token.balanceOf(address(this)).sub(claimable);\r\n\r\n        if (refundType) {\r\n            launchpad.token.transfer(msg.sender, balance);\r\n        } else {\r\n            launchpad.token.transfer(address(0x000000000000000000000000000000000000dEaD), balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  called by owner to get refund incase of sale cancellation or failure to reach soft cap\r\n     */\r\n    function withdrawTokens() external nonReentrant onlyOwner {\r\n        require(\r\n            (block.timestamp >= launchpad.endTime && totalRaised < launchpad.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Sale is not cancelled or end Time not reached'\r\n        );\r\n\r\n        launchpad.token.transfer(msg.sender, launchpad.token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice  set afflication terms\r\n     * @param   _reward  percentage of reward in bips(3)\r\n     */\r\n    function setAffiliation(uint256 _reward) external onlyOwner {\r\n        require(_reward <= 5e3, \"Reward can't be greater than 5%\");\r\n        require(currentStatus != Status.CANCELLED, 'Sale is cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale is not active');\r\n\r\n        isAffiliate = true;\r\n        affiliateReward = _reward;\r\n\r\n        emit UpdateReward(Id, _reward, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice  update start and end time before sale start\r\n     * @param   _startTime  .\r\n     * @param   _endTime  .\r\n     */\r\n    function setTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\r\n        require(block.timestamp < launchpad.startTime, 'Sale already started');\r\n        require(_startTime > block.timestamp && _startTime < _endTime, 'Invalid start time');\r\n\r\n        launchpad.startTime = _startTime;\r\n        launchpad.endTime = _endTime;\r\n\r\n        emit UpdateTime(Id, _startTime, _endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  set specific time to claim tokens\r\n     * @param   _time  .\r\n     */\r\n    function setClaimTime(uint256 _time) external onlyOwner {\r\n        require(!liquidity.isAutolisting, 'Cannot set with Auto liquidity enabled');\r\n        require(_time >= block.timestamp, 'Claim time cannot be in past');\r\n        require(currentStatus != Status.CANCELLED, 'Sale is Cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale is closed');\r\n\r\n        claimTime = _time;\r\n\r\n        emit ClaimTimeUpdate(Id, _time, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return  mode  the mode of sale right now\r\n     */\r\n    function getCurrentMode() public view returns (Mode mode) {\r\n        mode = (block.timestamp < launchpad.startTime)\r\n            ? Mode.PENDING //PENDING\r\n            : (block.timestamp >= launchpad.startTime && block.timestamp < launchpad.publicSaleTime)\r\n                ? Mode.PRIVATE //PRIVATE\r\n                : Mode.PUBLIC; //PUBLIC\r\n    }\r\n\r\n    /**\r\n     * @return status  the current sale status i,e., public private etc.\r\n     */\r\n    function getCurrentStatus() public view returns (Status status) {\r\n        if ((block.timestamp < launchpad.startTime) && currentStatus != Status.CANCELLED) {\r\n            status = Status.INCOMMING;\r\n        } else if (\r\n            (block.timestamp >= launchpad.startTime && currentStatus == Status.INCOMMING) &&\r\n            (block.timestamp <= launchpad.endTime) &&\r\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED)\r\n        ) {\r\n            status = Status.ACTIVE;\r\n        } else if (\r\n            (block.timestamp >= launchpad.startTime && currentStatus == Status.INCOMMING) &&\r\n            (block.timestamp > launchpad.endTime) &&\r\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED)\r\n        ) {\r\n            status = Status.CLOSED;\r\n        } else {\r\n            status = currentStatus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  return the total amount of tokens user will receive against investment.\r\n     * @param   _user  .\r\n     * @return  uint256  .\r\n     */\r\n    function getUserTokens(address _user) public view returns (uint256) {\r\n        UserDetails memory user = userInfo[_user];\r\n        return (user.userInvest * launchpad.sellPrice) / (10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice  the remaing amount out of total amuont of tokens.\r\n     * @param   _user  .\r\n     * @return  uint256 remaing amoun of tokens to claim\r\n     */\r\n    function getUserRemainingClaimable(address _user) public view returns (uint256) {\r\n        UserDetails memory user = userInfo[_user];\r\n        uint256 totalTokens = getUserTokens(_user);\r\n\r\n        return (totalTokens - user.userCalimed);\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the total tokens sold till now\r\n     */\r\n    function getTotalTokensSold() public view returns (uint256) {\r\n        return (totalRaised * launchpad.sellPrice) / (10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the total tokens offered for sell\r\n     */\r\n    function getTotalSaleTokens() public view returns (uint256) {\r\n        return (launchpad.hardCap * launchpad.sellPrice) / (10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the array of referrers\r\n     */\r\n    function getAllReferrers() public view returns (address[] memory) {\r\n        return referrers;\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the array of all investors\r\n     */\r\n    function getAllInvestors() public view returns (address[] memory) {\r\n        return investors;\r\n    }\r\n\r\n    /**\r\n     * @return  pairAddress  returnd the pair address to add liquidity.\r\n     */\r\n    function getTokenPair() internal view returns (address pairAddress) {\r\n        if (fundByTokens) {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                address(fundToken),\r\n                address(launchpad.token)\r\n            );\r\n        } else {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                liquidity.router.WETH(),\r\n                address(launchpad.token)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  add liquidity to given dex as per liquidity terms and also lock the LP tokens\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     */\r\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\r\n        if (totalRaised > 0) {\r\n            uint256 amountToken;\r\n            uint256 amountETH;\r\n            uint256 _liquidity;\r\n\r\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\r\n\r\n            launchpad.token.approve(address(liquidity.router), sellTokenShare);\r\n\r\n            if (!fundByTokens) {\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\r\n                    value: fundTokenShare\r\n                }(\r\n                    address(launchpad.token),\r\n                    sellTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                fundToken.approve(address(liquidity.router), sellTokenShare);\r\n                fundToken.approve(address(liquidity.router), fundTokenShare);\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\r\n                    address(launchpad.token),\r\n                    address(fundToken),\r\n                    sellTokenShare,\r\n                    fundTokenShare,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n            liquidity.liquidityAdded = fundTokenShare;\r\n            address pairAddress = getTokenPair();\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            uint256 pairBalance = pair.balanceOf(address(this));\r\n\r\n            IERC20Extented(pairAddress).approve(liquidity.locker, pairBalance);\r\n            IGempadVestingLock(liquidity.locker).lock(\r\n                owner(),\r\n                pairAddress,\r\n                true,\r\n                pairBalance,\r\n                (block.timestamp + liquidity.lockTime),\r\n                'Gempad liquidity'\r\n            );\r\n\r\n            emit liquidityAdded(Id, pairAddress, _liquidity);\r\n            return (amountToken, amountETH, _liquidity);\r\n        }\r\n\r\n        return (0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice  to get share of sell tokens and purchase currency to create pair and add liquidity\r\n     * @return  uint256  sell tokens share\r\n     * @return  uint256  purchase currency share\r\n     */\r\n    function getTokenShare() internal view returns (uint256, uint256) {\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n\r\n        uint256 reward = ((totalRaised - fee) * affiliateReward) / 100e3;\r\n\r\n        uint256 share = (isAffiliate && totalReferralInvest > 0)\r\n            ? ((totalRaised - (fee + reward)) * liquidity.liquidityPercent) / 100e3\r\n            : ((totalRaised - (fee)) * liquidity.liquidityPercent) / 100e3;\r\n\r\n        uint256 tokens = (share * launchpad.listingPrice) / (10 ** decimals);\r\n\r\n        return (share, tokens);\r\n    }\r\n\r\n    /**\r\n     * @return  uint256   the amount of toekns user can withdraw as per vesting terms\r\n     */\r\n    function claimableTokens() external view returns (uint256) {\r\n        return _calculateClaimableTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @param   _user  .\r\n     * @return  withdrawable  the amount of tokens investor can withdraw as per vesting terms\r\n     */\r\n    function _calculateClaimableTokens(address _user) internal view returns (uint256 withdrawable) {\r\n        UserDetails memory user = userInfo[_user];\r\n        uint256 userShare = getUserTokens(_user);\r\n\r\n        if (vesting.isVestingEnable) {\r\n            require(\r\n                (block.timestamp - user.lastClaimTime) >= vesting.cycleInterval,\r\n                'Tokens are not unlocked'\r\n            );\r\n\r\n            uint256 tgeReleaseAmount = (vesting.TGEPercent * userShare) / 100e3;\r\n            uint256 cycleReleaseAmount = Math.mulDiv(userShare, vesting.cyclePercent, 100e3);\r\n\r\n            uint256 currentTotal = 0;\r\n\r\n            if (block.timestamp >= claimTime) {\r\n                currentTotal =\r\n                    (((block.timestamp - claimTime) / vesting.cycleInterval) * cycleReleaseAmount) +\r\n                    tgeReleaseAmount;\r\n            }\r\n\r\n            if (currentTotal > userShare) {\r\n                withdrawable = userShare - user.userCalimed;\r\n            } else {\r\n                withdrawable = currentTotal - user.userCalimed;\r\n            }\r\n        } else {\r\n            withdrawable = userShare;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer purchase currency to receiver\r\n     * @param   _to  .\r\n     * @param   _amount  .\r\n     */\r\n    function _transferFunds(address _to, uint256 _amount) private {\r\n        if (fundByTokens) {\r\n            fundToken.transfer(_to, _amount);\r\n        } else {\r\n            payable(_to).transfer(_amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/launchpad/contracts/GempadWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\n    mapping(address => bool) internal _whitelist;\n\n    event WhitelistUpdated(address[] account, address sender);\n\n    /**\n     * @notice  add users to whitelist\n     * @param _participants  address of users\n     */\n    function addWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\n            _whitelist[_participants[i]] = true;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @notice  remove usres from whitelist\n     * @param _participants  address of users\n     */\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\n            _whitelist[_participants[i]] = false;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @return  bool return whitelist status of user\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n}\n"
    },
    "@gempad/launchpad/contracts/interfaces/IERC20Extented.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IERC20Extented is IERC20 {\r\n\r\n    function decimals() external returns (uint8);\r\n}"
    },
    "@gempad/launchpad/contracts/interfaces/IGempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGempadVestingLock {\r\n\r\n  function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external  payable returns (uint256 id);\r\n\r\n  function unlock(uint256 lockId) external;\r\n\r\n  function editLock(\r\n    uint256 lockId,\r\n    uint256 newAmount,\r\n    uint256 newUnlockDate\r\n  ) external payable;\r\n}"
    },
    "@gempad/launchpad/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n//IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n}"
    },
    "@gempad/launchpad/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}"
    },
    "@gempad/launchpad/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n\r\n}\r\n//IUnisapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n}"
    },
    "@gempad/locker/utils/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint256 prod0; // Least significant 256 bits of the product\r\n    uint256 prod1; // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint256 remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    unchecked {\r\n      uint256 twos = (type(uint256).max - denominator + 1) & denominator;\r\n      // Divide denominator by power of two\r\n      assembly {\r\n        denominator := div(denominator, twos)\r\n      }\r\n\r\n      // Divide [prod1 prod0] by the factors of two\r\n      assembly {\r\n        prod0 := div(prod0, twos)\r\n      }\r\n      // Shift in bits from prod1 into prod0. For this we need\r\n      // to flip `twos` such that it is 2**256 / twos.\r\n      // If twos is zero, then it becomes one\r\n      assembly {\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2**256\r\n      // Now that denominator is an odd number, it has an inverse\r\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n      // Compute the inverse by starting with a seed that is correct\r\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n      uint256 inv = (3 * denominator) ^ 2;\r\n      // Now use Newton-Raphson iteration to improve the precision.\r\n      // Thanks to Hensel's lifting lemma, this also works in modular\r\n      // arithmetic, doubling the correct bits in each step.\r\n      inv *= 2 - denominator * inv; // inverse mod 2**8\r\n      inv *= 2 - denominator * inv; // inverse mod 2**16\r\n      inv *= 2 - denominator * inv; // inverse mod 2**32\r\n      inv *= 2 - denominator * inv; // inverse mod 2**64\r\n      inv *= 2 - denominator * inv; // inverse mod 2**128\r\n      inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n      // Because the division is now exact we can divide by multiplying\r\n      // with the modular inverse of denominator. This will give us the\r\n      // correct result modulo 2**256. Since the precoditions guarantee\r\n      // that the outcome is less than 2**256, this is the final result.\r\n      // We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inv;\r\n      return result;\r\n    }\r\n  }\r\n}"
    },
    "@gempad/multisender/contracts/GempadMultiSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '../contracts/interfaces/IGempadMultiSender.sol';\r\n\r\ncontract GempadMultiSender is Ownable, IGempadMultiSender {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Multisent(address token, uint256 total);\r\n\r\n    /**\r\n     * @notice : to receive ethers\r\n     */\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @notice Send tokens to multiple accounts\r\n     * @param token address to send\r\n     * @param ensureExactAmount enable or disbale\r\n     * @param targets token receivers\r\n     * @param amounts amount to send\r\n     */\r\n    function multisendToken(\r\n        address token,\r\n        bool ensureExactAmount,\r\n        address[] calldata targets,\r\n        uint256[] calldata amounts\r\n    ) external payable override {\r\n        if (token == address(0)) {\r\n            multisendEther(targets, amounts);\r\n        } else {\r\n            require(targets.length == amounts.length, 'Length mismatched');\r\n            IERC20 erc20 = IERC20(token);\r\n            uint256 total = 0;\r\n\r\n            // In case people want to make sure they transfer the exact\r\n            // amount of tokens to the recipients (for example, an owner\r\n            // might forget excluding this contract from the transfer fee\r\n            // deduction), use this option as a safeguard\r\n            function(IERC20, address, address, uint256) transfer = ensureExactAmount\r\n                ? _safeTransferFromEnsureExactAmount\r\n                : _safeTransferFrom;\r\n\r\n            for (uint256 i = 0; i < targets.length; i++) {\r\n                total += amounts[i];\r\n                transfer(erc20, msg.sender, targets[i], amounts[i]);\r\n            }\r\n\r\n            emit Multisent(token, total);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Send ethers to multiple accounts\r\n     * @param targets ether receivers\r\n     * @param amounts amount to send\r\n     */\r\n    function multisendEther(address[] calldata targets, uint256[] calldata amounts) public payable override {\r\n        require(targets.length == amounts.length, 'Length mismatched');\r\n\r\n        uint256 total;\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            total += amounts[i];\r\n            payable(targets[i]).transfer(amounts[i]);\r\n        }\r\n\r\n        // In case someone tries to claim the ether inside the contract\r\n        // by sending a higher sum of total amount than msg.value\r\n        require(total == msg.value, 'Total mismatched');\r\n\r\n        emit Multisent(address(0), total);\r\n    }\r\n\r\n    /**\r\n     * @notice send ethers balance to given address\r\n     * @param to : ether receiver\r\n     */\r\n    function withdrawWronglySentEther(address to) external onlyOwner {\r\n        payable(to).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @notice send ethers balance to given address\r\n     * @param token: token address\r\n     * @param to: token receivers\r\n     */\r\n    function withdrawWronglySentToken(address token, address to) external onlyOwner {\r\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice In case people want to make sure they transfer the exact mount of tokens to the recipients\r\n        (for example, an owner might forget excluding this contract from the transfer fee deduction)\r\n        use this option as a safeguard\r\n     * @param token: token address\r\n     * @param from: token sender\r\n     * @param to: token receivers\r\n     * @param amount: amount of token to transfer\r\n     */\r\n    function _safeTransferFromEnsureExactAmount(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balanceBefore = token.balanceOf(to);\r\n        token.safeTransferFrom(from, to, amount);\r\n        require(\r\n            token.balanceOf(to) - balanceBefore == (from != to ? amount : 0), // if from is the same as to, the final balance should be the same as before the transfer\r\n            'Not enough tokens were transfered, check tax and fee options or try setting ensureExactAmount to false'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice transfer from\r\n     * @param token: token address\r\n     * @param from: token sender\r\n     * @param to: token receivers\r\n     * @param amount: amount of token to transfer\r\n     */\r\n    function _safeTransferFrom(IERC20 token, address from, address to, uint256 amount) private {\r\n        token.safeTransferFrom(from, to, amount);\r\n    }\r\n}\r\n"
    },
    "@gempad/multisender/contracts/interfaces/IGempadMultiSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IGempadMultiSender {\r\n    function multisendToken(\r\n        address token,\r\n        bool ensureExactAmount,\r\n        address[] calldata targets,\r\n        uint256[] calldata amounts\r\n    ) external payable;\r\n\r\n    function multisendEther(\r\n        address[] calldata targets,\r\n        uint256[] calldata amounts\r\n    ) external payable;\r\n}"
    },
    "@gempad/privatsale/contracts/factory/GempadPrivateSaleBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GempadPrivateSaleBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), \"Invalid blueprint\");\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/privatsale/contracts/factory/GempadPrivateSaleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport './GempadPrivateSaleBeacon.sol';\r\nimport '../GempadPrivateSale.sol';\r\n\r\ncontract GempadPrivateSaleFactory is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    uint256 public IdCounter = 0;\r\n\r\n    address[] private privateSales;\r\n    mapping(address => address[]) private userSales;\r\n\r\n    GempadPrivateSaleBeacon immutable beacon;\r\n\r\n    struct PrivateSaleInfo {\r\n        string name;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct VestingInfo {\r\n        uint256 initialRelease;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    enum Mode {\r\n        PUBLIC,\r\n        WHITELIST,\r\n        ANTI_BOT\r\n    }\r\n\r\n    event PrivateSaleCreated(\r\n        uint256 id,\r\n        PrivateSaleInfo info,\r\n        VestingInfo vesting,\r\n        Mode mode,\r\n        address fundToken,\r\n        address privateSale\r\n    );\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadPrivateSaleBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllPrivateSales() external view returns (address[] memory) {\r\n        return privateSales;\r\n    }\r\n\r\n    function getUserPrivateSales(address _user) external view returns (address[] memory) {\r\n        return userSales[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice  create new private sale with new params by any user\r\n     * @param   info  sale core params\r\n     * @param   _vesting  vesting setting for claim\r\n     * @param   mode  selling type (public , private)\r\n     * @param   feeReceiver  .\r\n     * @param   fundToken  currency reuire to buy Tokens\r\n     */\r\n    function createPrivateSale(\r\n        PrivateSaleInfo memory info,\r\n        VestingInfo memory _vesting,\r\n        Mode mode,\r\n        address payable feeReceiver,\r\n        address fundToken\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 id = ++IdCounter;\r\n        BeaconProxy privateSale = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadPrivateSale(payable(address(0))).__GempadPrivateSale_init.selector,\r\n                id,\r\n                _msgSender(),\r\n                info,\r\n                _vesting,\r\n                mode,\r\n                feeReceiver,\r\n                fundToken\r\n            )\r\n        );\r\n\r\n        privateSales.push(address(privateSale));\r\n        userSales[msg.sender].push(address(privateSale));\r\n\r\n        emit PrivateSaleCreated(id, info, _vesting, mode, fundToken, address(privateSale));\r\n    }\r\n\r\n    function getPrivateSaleBeacon() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/privatsale/contracts/GempadPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport '@openzeppelin/contracts/utils/math/Math.sol';\r\nimport './GempadWhitelist.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadPrivateSale is GempadWhitelist, ServicePayer, ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n    bool public isInitialized = false;\r\n    uint256 public Id;\r\n\r\n    bool public fundByTokens;\r\n    IERC20 public fundToken;\r\n\r\n    IERC20 public antibotToken;\r\n    uint256 private antibotTokenBalance;\r\n    bool private isAntibotActive = false;\r\n    bool private isPrivate;\r\n\r\n    uint256 public totalSale;\r\n    uint256 public claimedAmount;\r\n    uint256 private lastClaimTime;\r\n\r\n    address private feeReceiver;\r\n    uint256 private tokenFee;\r\n\r\n    PrivateSaleInfo public saleInfo;\r\n    VestingInfo public vesting;\r\n    Mode private currentMode;\r\n    Status private currentStatus;\r\n\r\n    mapping(address => uint256) public depositOf;\r\n    address[] private investors;\r\n\r\n    struct PrivateSaleInfo {\r\n        string name;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n        uint256 minBuyLimit;\r\n        uint256 maxBuyLimit;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct VestingInfo {\r\n        uint256 initialRelease;\r\n        uint256 cyclePercent;\r\n        uint256 cycleInterval;\r\n    }\r\n\r\n    enum Mode {\r\n        PUBLIC,\r\n        WHITELIST,\r\n        ANTI_BOT\r\n    }\r\n    enum Status {\r\n        PENDING,\r\n        ACTIVE,\r\n        CANCELLED,\r\n        CLOSED\r\n    }\r\n\r\n    event AntibotInfoAdded(uint256 Id, Mode mode, address token, uint256 amount);\r\n    event FundsDeposited(uint256 Id, address sender, uint256 amount);\r\n    event PublicSaleEnabled(uint256 Id, uint256 saleTime);\r\n    event Finalized(uint256 Id, Status status, uint256 finalizeTime);\r\n\r\n    /**\r\n     * @notice  initialze the core params\r\n     * @param   _id  .\r\n     * @param   _owner  .\r\n     * @param   info  structure info\r\n     * @param   _vesting  claim data\r\n     * @param   _mode  mode of sale\r\n     * @param   _feeReceiver  .\r\n     * @param   _fundToken to receive as payment\r\n     */\r\n    function __GempadPrivateSale_init(\r\n        uint256 _id,\r\n        address _owner,\r\n        PrivateSaleInfo memory info,\r\n        VestingInfo memory _vesting,\r\n        Mode _mode,\r\n        address payable _feeReceiver,\r\n        address _fundToken\r\n    ) public payable initializer {\r\n        require(!isInitialized, 'Err: Already Initialized');\r\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadPrivateSale');\r\n\r\n        require(info.softCap <= info.hardCap, 'Soft-Cap should be less than or equal to hardcap');\r\n        require(info.softCap >= (info.hardCap / 2), 'Softcap must be greater than or equal 50% of Hardcap');\r\n\r\n        require(info.minBuyLimit > 0 && info.minBuyLimit < info.maxBuyLimit, 'Invalid min and max buy limit');\r\n\r\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\r\n\r\n        require(\r\n            _vesting.initialRelease > 0 && _vesting.initialRelease <= 95e3,\r\n            'Invalid Initial Release pecentage'\r\n        );\r\n\r\n        require(_vesting.cyclePercent > 0, 'Cycle pecentage must be greater than zero');\r\n\r\n        require(_vesting.cycleInterval > 0, 'interval must be greater than zero');\r\n\r\n        require(\r\n            _vesting.initialRelease + _vesting.cyclePercent <= 100e3,\r\n            'Sum of TGE bps and cycle should be less than 100'\r\n        );\r\n\r\n        //set custom Investment Token\r\n        fundByTokens = _fundToken != address(0);\r\n        if (fundByTokens) {\r\n            fundToken = IERC20(_fundToken);\r\n        }\r\n\r\n        //whitelisting feature status\r\n        require(_mode == Mode.PUBLIC || _mode == Mode.WHITELIST, 'Only public and private modes allowed');\r\n        currentMode = _mode;\r\n\r\n        saleInfo = info;\r\n        vesting = _vesting;\r\n        Id = _id;\r\n\r\n        // Initialize the public sale start time;\r\n        saleInfo.publicSaleTime = (currentMode == Mode.PUBLIC) ? saleInfo.startTime : saleInfo.endTime;\r\n        if (saleInfo.publicSaleTime == saleInfo.endTime) isPrivate = true;\r\n        feeReceiver = _feeReceiver;\r\n        tokenFee = IPayable(feeReceiver).getFee('GempadPrivateSale');\r\n\r\n        _transferOwnership(_owner);\r\n        isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * @notice user buy Tokens\r\n     * @param _amount user wants to spend\r\n     */\r\n    function investFunds(uint256 _amount) external payable nonReentrant {\r\n        require(\r\n            block.timestamp >= saleInfo.startTime && block.timestamp <= saleInfo.endTime,\r\n            'Sale is not active'\r\n        );\r\n\r\n        if (block.timestamp < saleInfo.publicSaleTime && isPrivate) {\r\n            require(_whitelist[msg.sender], 'User is not whitelisted');\r\n        } else if (isAntibotActive && block.timestamp < saleInfo.publicSaleTime) {\r\n            require(hasAntibotTokenBalance(), 'Insufficient Token balance');\r\n        }\r\n\r\n        require(_amount >= saleInfo.minBuyLimit, 'Amount is les than min buy limit');\r\n        require(depositOf[msg.sender] + _amount <= saleInfo.maxBuyLimit, 'Maximum buy limit reached');\r\n        require((totalSale + _amount) <= saleInfo.hardCap, 'Maximum sale limit reached');\r\n\r\n        if (depositOf[msg.sender] <= 0) investors.push(msg.sender);\r\n        depositOf[msg.sender] += _amount;\r\n\r\n        // Update the total sale amount\r\n        totalSale += _amount;\r\n\r\n        if (fundByTokens) {\r\n            fundToken.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            // Ensure that the sender has sent enough Ether\r\n            require(msg.value == _amount, 'Insufficient funds sent');\r\n        }\r\n\r\n        emit FundsDeposited(Id, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  cancel teh sale\r\n     */\r\n    function cancel() external onlyOwner {\r\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\r\n        currentStatus = Status.CANCELLED;\r\n    }\r\n\r\n    /**\r\n     * @notice finalize the sale\r\n     */\r\n    function finalize() external onlyOwner {\r\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\r\n        require(\r\n            (block.timestamp > saleInfo.endTime && totalSale >= saleInfo.softCap) ||\r\n                totalSale >= saleInfo.softCap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n\r\n        currentStatus = Status.CLOSED;\r\n        saleInfo.finalizeTime = block.timestamp;\r\n\r\n        emit Finalized(Id, currentStatus, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice claim Tokens as per vesting rules\r\n     */\r\n    function claimTokens() external onlyOwner nonReentrant {\r\n        require(currentStatus == Status.CLOSED, 'Sale in not finalized');\r\n\r\n        uint256 claimableAmount = _calculateClaimableTokens();\r\n\r\n        uint256 claimable = claimedAmount + claimableAmount;\r\n\r\n        require(claimableAmount > 0 && claimable <= totalSale, 'Total funds claimed');\r\n\r\n        uint256 feeAmount = (claimableAmount * tokenFee) / 100e3;\r\n\r\n        claimedAmount += claimableAmount;\r\n\r\n        lastClaimTime = block.timestamp;\r\n\r\n        _transferFunds(feeReceiver, feeAmount);\r\n        _transferFunds(msg.sender, (claimableAmount - feeAmount));\r\n    }\r\n\r\n    /**\r\n     * @notice claim refund if sale cancelled or soft cap not reached\r\n     */\r\n    function claimRefund() external nonReentrant {\r\n        require(\r\n            (block.timestamp >= saleInfo.endTime && totalSale < saleInfo.softCap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Refund is not allowed'\r\n        );\r\n        require(depositOf[msg.sender] > 0, 'User has not invested any funds');\r\n\r\n        // uint256 funds = depositOf[msg.sender];\r\n        uint256 refund = depositOf[msg.sender];\r\n        depositOf[msg.sender] = 0;\r\n\r\n        _transferFunds(msg.sender, refund);\r\n    }\r\n\r\n    /**\r\n     * @notice set the time of public sale, and (sale end Time = private MOde)\r\n     * @param   _startTime  of public sale\r\n     */\r\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\r\n        saleInfo.publicSaleTime = _startTime;\r\n\r\n        if (_startTime == saleInfo.endTime) isPrivate = true;\r\n        if (_startTime == saleInfo.endTime && isAntibotActive) isAntibotActive = false;\r\n\r\n        emit PublicSaleEnabled(Id, saleInfo.publicSaleTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Enable the antibot bot mode that requires specific token balance\r\n     * @param   _token  token require to have if user want to buy selling token\r\n     * @param   _amount   balance fo antibiot token required\r\n     */\r\n    function enableAntibotMode(address _token, uint256 _amount) external onlyOwner {\r\n        require(_token != address(0), 'Invalid token address');\r\n        require(_amount > 0, 'Amount can not be zero');\r\n\r\n        antibotToken = IERC20(_token);\r\n        antibotTokenBalance = _amount;\r\n        currentMode = Mode.ANTI_BOT;\r\n        isAntibotActive = true;\r\n        if (isPrivate) isPrivate = false;\r\n        saleInfo.publicSaleTime = saleInfo.endTime;\r\n\r\n        emit AntibotInfoAdded(Id, currentMode, _token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  it returns the current mode of sale\r\n     * @dev    time is a key player in role change\r\n     * @return  mode   current sale mode\r\n     */\r\n    function getCurrentMode() public view returns (Mode mode) {\r\n        mode = ((block.timestamp < saleInfo.publicSaleTime && isPrivate) &&\r\n            (block.timestamp > saleInfo.startTime) || (block.timestamp < saleInfo.startTime))\r\n            ? Mode.WHITELIST\r\n            : ((isAntibotActive && block.timestamp < saleInfo.publicSaleTime) &&\r\n                (block.timestamp > saleInfo.startTime))\r\n            ? Mode.ANTI_BOT\r\n            : Mode.PUBLIC;\r\n    }\r\n\r\n    /**\r\n     * @return status  the current sale status i,e., public private etc.\r\n     */\r\n    function getCurrentStatus() public view returns (Status status) {\r\n        if ((block.timestamp < saleInfo.startTime) && currentStatus != Status.CANCELLED) {\r\n            status = Status.PENDING;\r\n        } else if (\r\n            (block.timestamp >= saleInfo.startTime && currentStatus == Status.PENDING) &&\r\n            (block.timestamp <= saleInfo.endTime) &&\r\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED) \r\n        ) {\r\n            status = Status.ACTIVE;\r\n        } else if (\r\n            (block.timestamp >= saleInfo.startTime && currentStatus == Status.PENDING) &&\r\n            (block.timestamp > saleInfo.endTime) &&\r\n            (currentStatus != Status.CANCELLED && currentStatus != Status.CLOSED) \r\n        ) {\r\n            status = Status.CLOSED;\r\n        } else {\r\n            status = currentStatus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return  uint256   the amount of toekns user can withdraw as per vesting terms\r\n     */\r\n    function claimableTokens() external view returns (uint256) {\r\n        return _calculateClaimableTokens();\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the array of all investors\r\n     */\r\n    function getAllInvestors() public view returns (address[] memory) {\r\n        return investors;\r\n    }\r\n\r\n    /**\r\n     * @return  withdrawable : token canbe calimed as per vesting settings\r\n     */\r\n    function _calculateClaimableTokens() internal view returns (uint256 withdrawable) {\r\n        require((block.timestamp - lastClaimTime) >= vesting.cycleInterval, 'Tokens are not unlocked');\r\n\r\n        uint256 tgeReleaseAmount = (vesting.initialRelease * totalSale) / 100e3;\r\n        uint256 cycleReleaseAmount = Math.mulDiv(totalSale, vesting.cyclePercent, 100e3);\r\n\r\n        uint256 currentTotal = 0;\r\n\r\n        if (block.timestamp >= saleInfo.finalizeTime) {\r\n            currentTotal =\r\n                (((block.timestamp - saleInfo.finalizeTime) / vesting.cycleInterval) * cycleReleaseAmount) +\r\n                tgeReleaseAmount;\r\n        }\r\n\r\n        if (currentTotal > totalSale) {\r\n            withdrawable = totalSale - claimedAmount;\r\n        } else {\r\n            withdrawable = currentTotal - claimedAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice transfer the buying currency to receiver\r\n     * @param   _to   receiver\r\n     * @param   _amount  .\r\n     */\r\n    function _transferFunds(address _to, uint256 _amount) private {\r\n        if (fundByTokens) {\r\n            fundToken.transfer(_to, _amount);\r\n        } else {\r\n            payable(_to).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return  bool  check the require antibot toen balance\r\n     */\r\n    function hasAntibotTokenBalance() internal view returns (bool) {\r\n        uint256 balance = antibotToken.balanceOf(msg.sender);\r\n        return balance >= antibotTokenBalance;\r\n    }\r\n}\r\n"
    },
    "@gempad/privatsale/contracts/GempadWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\n    mapping(address => bool) internal _whitelist;\n\n    event WhitelistAdded(address[] account, address sender, bool status);\n    event WhitelistRemoved(address[] account, address sender, bool status);\n\n    /**\n     * @notice  whitelist the users\n     * @dev     being used in private sale mode\n     * @param   _participants  users to add.\n     */\n    function addWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\n            _whitelist[_participants[i]] = true;\n        }\n        emit WhitelistAdded(_participants, msg.sender, true);\n    }\n\n    /**\n     * @notice  remove the users from whitelist\n     * @dev     being used in private sale mode\n     * @param   _participants  users to remove.\n     */\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\n            _whitelist[_participants[i]] = false;\n        }\n        emit WhitelistRemoved(_participants, msg.sender, false);\n    }\n\n    /**\n     * @return  bool   return the whitelist status of user\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n}\n"
    },
    "@gempad/services/contracts/ServicePayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\r\n\r\ninterface IPayable {\r\n    function pay(string memory serviceName) external payable;\r\n\r\n    function getFee(string memory serviceName) external returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ServicePayer\r\n * @dev Implementation of the ServicePayer\r\n */\r\nabstract contract ServicePayer is Initializable {\r\n    function __ServicePayer_init(\r\n        address payable receiver,\r\n        string memory serviceName\r\n    ) public payable onlyInitializing {\r\n        IPayable(receiver).pay{ value: msg.value }(serviceName);\r\n    }\r\n}\r\n"
    },
    "@gempad/services/contracts/ServiceReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport 'eth-token-recover/contracts/TokenRecover.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\n/**\r\n * @title ServiceReceiver\r\n * @dev Implementation of the ServiceReceiver\r\n */\r\ncontract ServiceReceiver is TokenRecover {\r\n    mapping(bytes32 => uint256) private _prices;\r\n    mapping(bytes32 => uint256) private _tokenFee;\r\n\r\n    event Created(string serviceName, address indexed serviceAddress);\r\n\r\n    function pay(string memory serviceName) public payable {\r\n        require(msg.value == _prices[_toBytes32(serviceName)], 'ServiceReceiver: Insufficient fee');\r\n        emit Created(serviceName, _msgSender());\r\n    }\r\n\r\n    function getPrice(string memory serviceName) public view returns (uint256) {\r\n        return _prices[_toBytes32(serviceName)];\r\n    }\r\n\r\n    function getFee(string memory serviceName) public view returns (uint256) {\r\n        return _tokenFee[_toBytes32(serviceName)];\r\n    }\r\n\r\n    function setPrice(string memory serviceName, uint256 amount) public onlyOwner {\r\n        _prices[_toBytes32(serviceName)] = amount;\r\n    }\r\n\r\n    /**\r\n     * @notice set fee in bips (3 decimals i,e : 100 = 100000). Apart from sale creat fee.\r\n     * @param serviceName: its a name of service i,e., launchpad, airdrop, fairLaunch etc.\r\n     *  [[ALERT]]: make sure that the service name should match the exact smart contract name.\r\n     * @param _fee: token fee percentage\r\n     */\r\n    function setFee(string memory serviceName, uint256 _fee) public onlyOwner {\r\n        _tokenFee[_toBytes32(serviceName)] = _fee;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\r\n        require(_token != address(0), 'Err: Zero Address');\r\n        require(_amount != 0, 'Err: Zero Amount');\r\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, 'Err: Insufficient balance');\r\n\r\n        IERC20(_token).transfer(owner(), _amount);\r\n    }\r\n\r\n    function _toBytes32(string memory serviceName) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(serviceName));\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GempadSubscriptionPoolBeacon is Ownable {\r\n    UpgradeableBeacon immutable beacon;\r\n\r\n    address public blueprint;\r\n\r\n    constructor(address _initBlueprint, address _owner) {\r\n        beacon = new UpgradeableBeacon(_initBlueprint);\r\n        blueprint = _initBlueprint;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function update(address _newBlueprint) public onlyOwner {\r\n        require(_newBlueprint != address(0), \"Invalid blueprint\");\r\n        beacon.upgradeTo(_newBlueprint);\r\n        blueprint = _newBlueprint;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '../interfaces/IERC20Extented.sol';\r\nimport './GempadSubscriptionPoolBeacon.sol';\r\nimport '../GempadSubscriptionPool.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadSubscriptionPoolFactory is Ownable {\r\n    using SafeERC20 for IERC20Extented;\r\n    uint256 public IdCounter = 0;\r\n\r\n    address[] public subscriptionPools;\r\n    mapping(address => address[]) private userSubscriptionPools;\r\n\r\n    GempadSubscriptionPoolBeacon immutable beacon;\r\n\r\n    struct SubscriptionPoolDetails {\r\n        IERC20Extented token;\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n        uint256 userHardCap;\r\n        uint256 sellRate;\r\n        uint256 listingRate;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n\r\n    event SubscriptionPoolCreated(\r\n        uint256 id,\r\n        SubscriptionPoolDetails _info,\r\n        LiquidityDetails liq,\r\n        address subscriptionPool\r\n    );\r\n\r\n    constructor(address _initBlueprint) {\r\n        beacon = new GempadSubscriptionPoolBeacon(_initBlueprint, _msgSender());\r\n    }\r\n\r\n    function getAllSubscriptionPools() external view returns (address[] memory) {\r\n        return subscriptionPools;\r\n    }\r\n\r\n    function getUserSubscriptionPools(address _user) external view returns (address[] memory) {\r\n        return userSubscriptionPools[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice  anyone can create a pool after paying fee\r\n     * @param   _info  .\r\n     * @param   _liquidity  .\r\n     * @param   _fundToken  .\r\n     * @param   _isprivateSale  .\r\n     * @param   _isRefund  refund type burn or refund\r\n     * @param   _feeReceiver  .\r\n     */\r\n    function createSubscriptionPool(\r\n        SubscriptionPoolDetails memory _info,\r\n        LiquidityDetails memory _liquidity,\r\n        address _fundToken,\r\n        bool _isprivateSale,\r\n        bool _isRefund,\r\n        address payable _feeReceiver\r\n    ) public payable {\r\n        // Create a new GempadPrivateSale contract using the beacon\r\n        uint256 _id = ++IdCounter;\r\n        BeaconProxy subscriptionPool = new BeaconProxy{ value: msg.value }(\r\n            address(beacon),\r\n            abi.encodeWithSelector(\r\n                GempadSubscriptionPool(payable(address(0))).__GempadSubscriptionPool_init.selector,\r\n                _id,\r\n                _info,\r\n                _liquidity,\r\n                _fundToken,\r\n                _isprivateSale,\r\n                _isRefund,\r\n                _feeReceiver,\r\n                _msgSender()\r\n            )\r\n        );\r\n\r\n        uint256 tokenFee = IPayable(_feeReceiver).getFee('GempadSubscriptionPool');\r\n        uint256 fee = (_info.hardCap * tokenFee) / 100e3;\r\n\r\n        uint256 liq = ((_info.hardCap - fee) * _info.listingRate) / _info.sellRate;\r\n\r\n        uint256 tokenToReceive = _info.hardCap + ((liq * _liquidity.liquidityPercent) / 100e3);\r\n\r\n        uint256 before = _info.token.balanceOf(address(subscriptionPool));\r\n\r\n        _info.token.transferFrom(msg.sender, address(subscriptionPool), tokenToReceive);\r\n\r\n        require(\r\n            _info.token.balanceOf(address(subscriptionPool)) == (before + tokenToReceive),\r\n            'Insufficient tokens transfered'\r\n        );\r\n\r\n        subscriptionPools.push(address(subscriptionPool));\r\n\r\n        userSubscriptionPools[msg.sender].push(address(subscriptionPool));\r\n\r\n        emit SubscriptionPoolCreated(_id, _info, _liquidity, address(subscriptionPool));\r\n    }\r\n\r\n    function getSubscriptionPoolBeacon() public view returns (address) {\r\n        return address(beacon);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return beacon.implementation();\r\n    }\r\n}\r\n"
    },
    "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport './interfaces/IERC20Extented.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './interfaces/IUniswapV2Router02.sol';\r\nimport './interfaces/IGempadVestingLock.sol';\r\nimport './GempadWhitelist.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract GempadSubscriptionPool is ServicePayer, GempadWhitelist, ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n    uint256 public Id;\r\n    bool public isInitialized = false;\r\n\r\n    SubscriptionPoolDetails public pool;\r\n    LiquidityDetails public liquidity;\r\n    Status public currentStatus;\r\n\r\n    tokenDistribution private distribution;\r\n\r\n    IERC20Extented public fundToken;\r\n\r\n    bool public fundByTokens;\r\n\r\n    uint8 private decimals;\r\n\r\n    // bool private canFinalize;\r\n    bool private canCalculate;\r\n\r\n    bool private isPrivateMode;\r\n    bool private isRefund; //true refund and false burn\r\n\r\n    address private feeReceiver;\r\n    uint256 private tokenFee;\r\n\r\n    uint256 public totalRaised;\r\n    uint256 public totalContribution;\r\n\r\n    uint256 public totalClaimed;\r\n\r\n    address[] private investors;\r\n\r\n    mapping(address => UserDetails) public userInfo;\r\n\r\n    struct SubscriptionPoolDetails {\r\n        IERC20Extented token;\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n        uint256 userHardCap;\r\n        uint256 sellRate;\r\n        uint256 listingRate;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalizeTime;\r\n        uint256 publicSaleTime;\r\n    }\r\n    struct LiquidityDetails {\r\n        IUniswapV2Router02 router;\r\n        uint256 liquidityPercent;\r\n        uint256 lockTime;\r\n        address locker;\r\n        uint256 liquidityAdded;\r\n    }\r\n\r\n    struct UserDetails {\r\n        uint256 userInvest;\r\n        uint256 userDeposit;\r\n        uint256 userAllocation;\r\n        uint256 userClaimed;\r\n    }\r\n\r\n    struct tokenDistribution {\r\n        uint256 totalAllocated;\r\n        uint256 surplusTokens;\r\n        uint256 totalSurplusFunds;\r\n        address[] leftInvestors;\r\n        uint256[] amounts;\r\n    }\r\n\r\n    enum Status {\r\n        INCOMMING,\r\n        ACTIVE,\r\n        CANCELLED,\r\n        CLOSED\r\n    }\r\n\r\n    enum Mode {\r\n        PENDING,\r\n        PRIVATE,\r\n        PUBLIC\r\n    }\r\n\r\n    event Purachsed(uint256 Id, address sender, uint256 _amount);\r\n    event PublicSaleEnabled(uint256 Id, uint256 time);\r\n    event liquidityAdded(uint256 Id, address pair, uint256 liquidity);\r\n    event UpdateTime(uint256 Id, uint256 start, uint256 end);\r\n    event Cancelled(uint256 Id, Status status);\r\n\r\n    /**\r\n     * @notice  initialization of core params\r\n     * @param   _id  .\r\n     * @param   info  .\r\n     * @param   _liquidity  .\r\n     * @param   _fundToken  .\r\n     * @param   _isPrivateMode  .\r\n     * @param   _isRefund  refund type burn or refund\r\n     * @param   _feeReceiver  .\r\n     * @param   _owner  .\r\n     */\r\n    function __GempadSubscriptionPool_init(\r\n        uint256 _id,\r\n        SubscriptionPoolDetails memory info,\r\n        LiquidityDetails memory _liquidity,\r\n        address _fundToken,\r\n        bool _isPrivateMode,\r\n        bool _isRefund,\r\n        address payable _feeReceiver,\r\n        address _owner\r\n    ) public payable initializer {\r\n        require(!isInitialized, 'Err: Already initialized');\r\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadSubscriptionPool');\r\n\r\n        Id = _id;\r\n\r\n        //set custom Investment Token\r\n        fundByTokens = _fundToken != address(0);\r\n        if (fundByTokens) {\r\n            fundToken = IERC20Extented(_fundToken);\r\n        }\r\n\r\n        decimals = info.token.decimals();\r\n\r\n        require(info.listingRate < info.sellRate, 'Listing rate must be less than sell rate');\r\n        require(\r\n            (info.softCap >= (info.hardCap * 51e3) / 100e3) && (info.softCap < info.hardCap),\r\n            'SoftCap must be greater than 50% of hardh cap'\r\n        );\r\n        require(info.userHardCap <= info.hardCap, 'Invalid User max buy limit');\r\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\r\n\r\n        require(\r\n            _liquidity.liquidityPercent > 50e3 && _liquidity.liquidityPercent <= 100e3,\r\n            'Invalid liquidity percentage'\r\n        );\r\n        require(_liquidity.lockTime >= 300, \"Lock time can't be less than 5 minuts\");\r\n\r\n        liquidity = _liquidity;\r\n        pool = info;\r\n        // Initialize the public sale start time;\r\n        pool.publicSaleTime = (_isPrivateMode) ? info.endTime : info.startTime;\r\n        //whitelisting feature status\r\n        isPrivateMode = _isPrivateMode;\r\n        isRefund = _isRefund;\r\n\r\n        // Initialize fee and refund type\r\n        feeReceiver = _feeReceiver;\r\n        tokenFee = IPayable(feeReceiver).getFee('GempadSubscriptionPool');\r\n\r\n        _transferOwnership(_owner);\r\n        isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * @notice  user buy Tokens\r\n     * @param   _amount  amount in purchase currency\r\n     */\r\n    function buyToken(uint256 _amount) external payable nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n\r\n        require(block.timestamp >= pool.startTime && block.timestamp <= pool.endTime, 'Sale is not active');\r\n\r\n        if (block.timestamp < pool.publicSaleTime) {\r\n            require(_whitelist[msg.sender], 'User is not whitelisted');\r\n        }\r\n\r\n        if (user.userInvest <= 0) investors.push(msg.sender);\r\n        user.userInvest += _amount;\r\n\r\n        // Update the total sale amount\r\n        totalContribution += _amount;\r\n\r\n        if (fundByTokens) {\r\n            fundToken.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            // Ensure that the sender has sent enough Ether\r\n            require(msg.value == _amount, 'Insufficient funds sent');\r\n        }\r\n        emit Purachsed(Id, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice  enable public or private sale time.\r\n     * @param   _startTime   start time of public sale time if it is equalo to sale end time that means its priavte sale.\r\n     */\r\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\r\n        pool.publicSaleTime = _startTime;\r\n\r\n        emit PublicSaleEnabled(Id, pool.publicSaleTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  cancel the sale\r\n     */\r\n    function cancel() external onlyOwner {\r\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\r\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\r\n\r\n        currentStatus = Status.CANCELLED;\r\n\r\n        emit Cancelled(Id, currentStatus);\r\n    }\r\n\r\n    /**\r\n     * @notice  update the user tokens share as per total investment\r\n     * @dev     distribution completes in three phases\r\n     * @param   _contributors   investors\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     * @return  address[]  .\r\n     * @return  uint256[]  .\r\n     */\r\n    function updateCalculation(\r\n        address[] memory _contributors\r\n    ) public onlyOwner returns (uint256, uint256, address[] memory, uint256[] memory) {\r\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\r\n        require(\r\n            (block.timestamp > pool.endTime && totalContribution >= scap) || totalContribution >= scap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\r\n\r\n        // uint256 length = investors.length;\r\n        uint256 length = _contributors.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            // UserDetails storage user = userInfo[investors[i]];\r\n            UserDetails storage user = userInfo[_contributors[i]];\r\n\r\n            require(user.userInvest > 0, 'Invalid User');\r\n\r\n            uint256 allocation = (user.userInvest * pool.hardCap) / totalContribution;\r\n            if (allocation > pool.userHardCap) {\r\n                allocation = pool.userHardCap;\r\n            }\r\n\r\n            uint256 value = (allocation * 1e18) / pool.sellRate;\r\n            user.userDeposit = value;\r\n            user.userAllocation = allocation;\r\n            distribution.totalAllocated += user.userAllocation;\r\n            totalRaised += value;\r\n\r\n            if (user.userAllocation < pool.userHardCap && user.userDeposit < user.userInvest) {\r\n                distribution.totalSurplusFunds += (user.userInvest - user.userDeposit);\r\n                // distribution.leftInvestors.push(investors[i]);\r\n                distribution.leftInvestors.push(_contributors[i]);\r\n                distribution.amounts.push(user.userInvest - user.userDeposit);\r\n\r\n                distribution.totalSurplusFunds += (user.userInvest - user.userDeposit);\r\n            }\r\n        }\r\n\r\n        canCalculate = true;\r\n\r\n        distribution.surplusTokens = pool.hardCap - distribution.totalAllocated;\r\n        // distribution.totalSurplusFunds = totalContribution - totalRaised;\r\n\r\n        return (\r\n            distribution.totalSurplusFunds,\r\n            distribution.surplusTokens,\r\n            distribution.leftInvestors,\r\n            distribution.amounts\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice  after 1st two phases , its finnl phase where remaing user with amount in account get tokens\r\n     * @param   _totalTokens  .\r\n     * @param   _totalFunds  .\r\n     * @param   _contributors  .\r\n     * @param   _amounts  .\r\n     */\r\n    function calculateShare(\r\n        uint256 _totalTokens,\r\n        uint256 _totalFunds,\r\n        address[] memory _contributors,\r\n        uint256[] memory _amounts\r\n    ) external onlyOwner nonReentrant {\r\n        require(_contributors.length == _amounts.length, 'length mismatch');\r\n\r\n        require(canCalculate, 'Allocation not updated');\r\n\r\n        uint256 length = _contributors.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            UserDetails storage user = userInfo[_contributors[i]];\r\n\r\n            if (user.userDeposit < user.userInvest && user.userAllocation < pool.userHardCap) {\r\n                uint256 allocation = (_amounts[i] * _totalTokens) / _totalFunds;\r\n\r\n                if ((user.userAllocation + allocation) > pool.userHardCap) {\r\n                    allocation = pool.userHardCap - user.userAllocation;\r\n                }\r\n\r\n                require(user.userAllocation + allocation <= pool.userHardCap, 'User hardCap reached');\r\n\r\n                uint256 value = (allocation * 1e18) / pool.sellRate;\r\n\r\n                user.userDeposit += value;\r\n\r\n                user.userAllocation += allocation;\r\n\r\n                distribution.totalAllocated += allocation;\r\n\r\n                totalRaised += value;\r\n\r\n                if (user.userAllocation < pool.userHardCap && user.userDeposit < user.userInvest) {\r\n                    distribution.leftInvestors.push(_contributors[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        distribution.totalSurplusFunds = totalContribution - totalRaised;\r\n        distribution.surplusTokens = pool.hardCap - distribution.totalAllocated;\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  totalAllocated\r\n     * @return  uint256  surplusTokens\r\n     * @return  uint256  totalSurplusFunds\r\n     */\r\n    function getDistribution() public view returns (uint256, uint256, uint256) {\r\n        return (distribution.totalAllocated, distribution.surplusTokens, distribution.totalSurplusFunds);\r\n    }\r\n\r\n    /**\r\n     * @return  tokenDistribution  surplus tokens and funds after distribution\r\n     */\r\n    function getSurplusData() public view returns (tokenDistribution memory) {\r\n        return distribution;\r\n    }\r\n\r\n    /**\r\n     * @notice  finalize the sale and withdraw raised funds\r\n     */\r\n    function finalize() external onlyOwner nonReentrant {\r\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\r\n\r\n        // require(canFinalize, 'Finalization not approved');\r\n        require(\r\n            (block.timestamp > pool.endTime && totalContribution >= scap) || totalContribution >= scap,\r\n            'Sale End Time or cap not reached'\r\n        );\r\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\r\n        require(currentStatus != Status.CANCELLED, 'Sale CANCELLED');\r\n\r\n        currentStatus = Status.CLOSED;\r\n        pool.finalizeTime = block.timestamp;\r\n\r\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\r\n\r\n        addLiquidity();\r\n\r\n        //transfer token fee;\r\n        _transferFunds(feeReceiver, feeAmount);\r\n\r\n        withdrawFunds();\r\n    }\r\n\r\n    /**\r\n     * @notice  withdraw the funds raised\r\n     */\r\n    function withdrawFunds() internal {\r\n        uint256 amount = (fundByTokens) ? fundToken.balanceOf(address(this)) : address(this).balance;\r\n\r\n        uint256 withdrawable = amount - (totalContribution - totalRaised);\r\n\r\n        _transferFunds(msg.sender, withdrawable);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by the investor the claim the tokens against investment.\r\n     */\r\n    function claimTokens() external nonReentrant {\r\n        UserDetails storage user = userInfo[msg.sender];\r\n\r\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\r\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\r\n\r\n        require((user.userClaimed + user.userAllocation) <= user.userAllocation, 'All tokens claimed');\r\n\r\n        user.userClaimed = user.userAllocation;\r\n\r\n        totalClaimed += user.userAllocation;\r\n\r\n        uint256 allocation = (user.userAllocation * (10 ** decimals)) / 1e18;\r\n\r\n        _transferFunds(msg.sender, (user.userInvest - user.userDeposit));\r\n\r\n        pool.token.transfer(msg.sender, allocation);\r\n    }\r\n\r\n    /**\r\n     * @notice  called by investor to get refund incase of sale cancellation or failure to reach soft cap\r\n     */\r\n    function claimUserRefund() external {\r\n        UserDetails storage info = userInfo[msg.sender];\r\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\r\n\r\n        require(\r\n            (block.timestamp >= pool.endTime && totalContribution < scap) ||\r\n                currentStatus == Status.CANCELLED,\r\n            'Refund is not allowed'\r\n        );\r\n        require(info.userInvest > 0, 'User has not invested');\r\n\r\n        uint256 refund = info.userInvest;\r\n\r\n        info.userInvest = 0;\r\n        _transferFunds(msg.sender, refund);\r\n    }\r\n\r\n    /**\r\n     * @notice  update start and end time before sale start\r\n     * @param   _startTime  .\r\n     * @param   _endTime  .\r\n     */\r\n    function setTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\r\n        require(block.timestamp < pool.startTime, 'Sale already started');\r\n        require(_startTime > block.timestamp && _startTime < _endTime, 'Invalid start time');\r\n\r\n        pool.startTime = _startTime;\r\n        pool.endTime = _endTime;\r\n\r\n        emit UpdateTime(Id, _startTime, _endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice  pout of total invested by user, how much amount left after paying for allocated tokens\r\n     * @return  uint256  .\r\n     */\r\n    function getUserRemainingFunds() public pure returns (uint256) {\r\n        UserDetails memory user;\r\n        return user.userInvest - user.userDeposit;\r\n    }\r\n\r\n    /**\r\n     * @return  pairAddress  returnd the pair address to add liquidity.\r\n     */\r\n    function getTokenPair() internal view returns (address pairAddress) {\r\n        if (fundByTokens) {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                address(fundToken),\r\n                address(pool.token)\r\n            );\r\n        } else {\r\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\r\n                liquidity.router.WETH(),\r\n                address(pool.token)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  to get share of sell tokens and purchase currency to create pair and add liquidity\r\n     * @return  share  sell tokens share\r\n     * @return  tokens  purchase currency share\r\n     */\r\n    function getTokenShare() internal view returns (uint256 share, uint256 tokens) {\r\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\r\n\r\n        share = ((totalRaised - fee) * liquidity.liquidityPercent) / 100e3;\r\n\r\n        tokens = (share * pool.listingRate) / (1e36 / 10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice  add liquidity to given dex as per liquidity terms and also lock the LP tokens\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     * @return  uint256  .\r\n     */\r\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\r\n        if (totalRaised > 0) {\r\n            uint256 amountToken;\r\n            uint256 amountETH;\r\n            uint256 _liquidity;\r\n\r\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\r\n\r\n            pool.token.approve(address(liquidity.router), sellTokenShare);\r\n\r\n            if (!fundByTokens) {\r\n                // Create a DEX pair for this token\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\r\n                    value: fundTokenShare\r\n                }(address(pool.token), sellTokenShare, 0, 0, address(this), block.timestamp);\r\n            } else {\r\n                fundToken.approve(address(liquidity.router), fundTokenShare);\r\n\r\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\r\n                    address(pool.token),\r\n                    address(fundToken),\r\n                    sellTokenShare,\r\n                    fundTokenShare,\r\n                    0,\r\n                    0,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            liquidity.liquidityAdded = fundTokenShare;\r\n\r\n            address pairAddress = getTokenPair();\r\n\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n\r\n            uint256 pairBalance = pair.balanceOf(address(this));\r\n\r\n            pair.approve(liquidity.locker, pairBalance);\r\n\r\n            IGempadVestingLock(liquidity.locker).lock(\r\n                owner(),\r\n                pairAddress,\r\n                true,\r\n                pairBalance,\r\n                (block.timestamp + liquidity.lockTime),\r\n                'Gempad liquidity'\r\n            );\r\n\r\n            emit liquidityAdded(Id, pairAddress, _liquidity);\r\n\r\n            return (amountToken, amountETH, _liquidity);\r\n        }\r\n\r\n        return (0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @return  mode  the mode of sale right now\r\n     */\r\n    function getCurrentMode() public view returns (Mode mode) {\r\n        mode = (block.timestamp < pool.startTime)\r\n            ? Mode.PENDING //pending\r\n            : (block.timestamp >= pool.startTime && block.timestamp < pool.publicSaleTime)\r\n            ? Mode.PRIVATE //private\r\n            : Mode.PUBLIC; //public\r\n    }\r\n\r\n    /**\r\n     * @return  status  current selling status\r\n     */\r\n    function getCurrentSatus() public view returns (Status status) {\r\n        status = (block.timestamp < pool.startTime && currentStatus != Status.CANCELLED)\r\n            ? Status.INCOMMING\r\n            : (currentStatus != Status.CANCELLED &&\r\n                currentStatus != Status.CLOSED &&\r\n                block.timestamp > pool.startTime)\r\n            ? Status.ACTIVE\r\n            : currentStatus;\r\n    }\r\n\r\n    /**\r\n     * @return  uint256  return the array of all investors\r\n     */\r\n    function getAllInvestors() public view returns (address[] memory) {\r\n        return investors;\r\n    }\r\n\r\n    /**\r\n     * @notice  transfer purchase currency to receiver\r\n     * @param   _to  .\r\n     * @param   _amount  .\r\n     */\r\n    function _transferFunds(address _to, uint256 _amount) private {\r\n        if (fundByTokens) {\r\n            fundToken.transfer(_to, _amount);\r\n        } else {\r\n            payable(_to).transfer(_amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@gempad/subscriptionpool/contracts/GempadWhitelist.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\n    mapping(address => bool) internal _whitelist;\n\n    event WhitelistUpdated(address[] account, address sender);\n\n    /**\n     * @notice  add users to whitelist\n     * @param _participants  address of users\n     */\n    function addWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\n            _whitelist[_participants[i]] = true;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @notice  remove usres from whitelist\n     * @param _participants  address of users\n     */\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\n        uint256 length = _participants.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(_participants[i] != address(0), 'Invalid address');\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\n            _whitelist[_participants[i]] = false;\n        }\n        emit WhitelistUpdated(_participants, msg.sender);\n    }\n\n    /**\n     * @return  bool return whitelist status of user\n     */\n    function isWhitelisted(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n}\n"
    },
    "@gempad/subscriptionpool/contracts/interfaces/IERC20Extented.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IERC20Extented is IERC20 {\r\n\r\n    function decimals() external returns (uint8);\r\n}"
    },
    "@gempad/subscriptionpool/contracts/interfaces/IGempadVestingLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGempadVestingLock {\r\n\r\n  function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external  payable returns (uint256 id);\r\n\r\n  function unlock(uint256 lockId) external;\r\n\r\n  function editLock(\r\n    uint256 lockId,\r\n    uint256 newAmount,\r\n    uint256 newUnlockDate\r\n  ) external payable;\r\n}"
    },
    "@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n\r\n//IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n}"
    },
    "@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}"
    },
    "@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.14;\r\n\r\n\r\n//IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n\r\n}\r\n//IUnisapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/airdrop/contracts/factory/GempadAirdropBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/airdrop/contracts/factory/GempadAirdropBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/airdrop/contracts/factory/GempadAirdropFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/airdrop/contracts/factory/GempadAirdropFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/airdrop/contracts/GempadAirdrop.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/airdrop/contracts/GempadAirdrop.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/antibot/contracts/GemAntiBot.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/antibot/contracts/GemAntiBot.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/dutchauction/contracts/factory/GempadDutchAuctionBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/dutchauction/contracts/factory/GempadDutchAuctionBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/dutchauction/contracts/factory/GempadDutchAuctionFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/dutchauction/contracts/factory/GempadDutchAuctionFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/dutchauction/contracts/GempadDutchAuction.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/dutchauction/contracts/GempadDutchAuction.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/fairlaunch/contracts/factory/GempadFairLuanchBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/fairlaunch/contracts/factory/GempadFairLuanchBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/fairlaunch/contracts/factory/GempadFairLuanchFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/fairlaunch/contracts/factory/GempadFairLuanchFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/fairlaunch/contracts/GempadFairLaunch.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/fairlaunch/contracts/GempadFairLaunch.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/gempadv2/contracts/GempadInterfaceMulticall.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/gempadv2/contracts/GempadInterfaceMulticall.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/gemtoken/contracts/GemToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/gemtoken/contracts/GemToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/AntiBotLiquidityGeneratorToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/AntiBotLiquidityGeneratorToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/AntiBotStandardToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/AntiBotStandardToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/BaseToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/BaseToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/AntiBotStandardTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/AntiBotStandardTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/BabyTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/BabyTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/LiquidityGeneratorTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/LiquidityGeneratorTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/StandardTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/StandardTokenFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/factories/TokenFactoryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/factories/TokenFactoryManager.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/GemAntiBotOld.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/GemAntiBotOld.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/LiquidityGeneratorToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/LiquidityGeneratorToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/generatetokens/contracts/StandardToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/generatetokens/contracts/StandardToken.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/launchpad/contracts/factory/GempadLaunchpadFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/launchpad/contracts/factory/GempadLaunchpadFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/launchpad/contracts/GempadLaunchpad.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/launchpad/contracts/GempadLaunchpad.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/multisender/contracts/GempadMultiSender.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/multisender/contracts/GempadMultiSender.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/privatsale/contracts/factory/GempadPrivateSaleBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/privatsale/contracts/factory/GempadPrivateSaleBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/privatsale/contracts/factory/GempadPrivateSaleFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/privatsale/contracts/factory/GempadPrivateSaleFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/privatsale/contracts/GempadPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/privatsale/contracts/GempadPrivateSale.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/services/contracts/ServiceReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/services/contracts/ServiceReceiver.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/subscriptionpool/contracts/factory/GempadSubscriptionPoolFactory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol';\n"
    },
    "eth-token-recover/contracts/TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title TokenRecover\n * @dev Allows owner to recover any ERC20 sent into the contract\n */\ncontract TokenRecover is Ownable {\n    /**\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}