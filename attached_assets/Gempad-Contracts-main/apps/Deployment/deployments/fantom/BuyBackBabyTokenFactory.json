{
  "address": "0xe82be89365458228Dfbaa56E15acfb7FfBe20dC7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "uint256[5]",
          "name": "feeSettings_",
          "type": "uint256[5]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceivingAddress",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFlatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf581838da91c093cd37fba9ab363679a27bcf301759828415e978fc97e2ba7d",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0xe82be89365458228Dfbaa56E15acfb7FfBe20dC7",
    "transactionIndex": 0,
    "gasUsed": "5035103",
    "logsBloom": "0x
    "blockHash": "0x000060e2000008229b81c268ecede8d451f87a9ff4e2f7d5e59d2a8e4f89f8a0",
    "transactionHash": "0xaf581838da91c093cd37fba9ab363679a27bcf301759828415e978fc97e2ba7d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24678751,
        "transactionHash": "0xaf581838da91c093cd37fba9ab363679a27bcf301759828415e978fc97e2ba7d",
        "address": "0xe82be89365458228Dfbaa56E15acfb7FfBe20dC7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d36409486efa4cc32c0472efa7871ed03b8bed0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000060e2000008229b81c268ecede8d451f87a9ff4e2f7d5e59d2a8e4f89f8a0"
      }
    ],
    "blockNumber": 24678751,
    "cumulativeGasUsed": "5035103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x650E6e2Af8220d638f1Afe0989489F5DB9Cc9D21",
    "0xfc3f631C16dAeAf1135Eb56fd0612735e64d463D"
  ],
  "numDeployments": 1,
  "solcInputHash": "b78ade38807ca558e7678e66ca695f61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"feeSettings_\",\"type\":\"uint256[5]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceivingAddress\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol\":\"BuyBackBabyTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@gempad/generatetokens/contracts/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nenum TokenType {\\r\\n    standard,\\r\\n    antiBotStandard,\\r\\n    liquidityGenerator,\\r\\n    antiBotLiquidityGenerator,\\r\\n    baby,\\r\\n    antiBotBaby,\\r\\n    buybackBaby,\\r\\n    antiBotBuybackBaby\\r\\n}\\r\\n\\r\\nabstract contract BaseToken {\\r\\n    event TokenCreated(\\r\\n        address indexed owner,\\r\\n        address indexed token,\\r\\n        TokenType tokenType,\\r\\n        uint256 version\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xe57aac125279fbc2477f980a9e1d25fe5cd641590a78079f18c3466275a78de3\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/BuybackBabyToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"../utils/Auth.sol\\\";\\r\\nimport \\\"../dividends/DividendDistributor.sol\\\";\\r\\nimport \\\"./BaseToken.sol\\\";\\r\\n\\r\\ncontract BuybackBabyToken is IERC20Extended, Auth, BaseToken {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using Address for address payable;\\r\\n\\r\\n    uint256 public constant VERSION = 3;\\r\\n\\r\\n    address private constant DEAD = address(0xdead);\\r\\n    address private constant ZERO = address(0);\\r\\n    uint8 private constant _decimals = 9;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    address public rewardToken;\\r\\n    IUniswapV2Router02 public router;\\r\\n    address public pair;\\r\\n    address public marketingFeeReceiver;\\r\\n\\r\\n    uint256 public liquidityFee; // default: 200\\r\\n    uint256 public buybackFee; // default: 300\\r\\n    uint256 public reflectionFee; // default: 800\\r\\n    uint256 public marketingFee; // default: 100\\r\\n    uint256 public totalFee;\\r\\n    uint256 public feeDenominator; // default: 10000\\r\\n\\r\\n    uint256 public targetLiquidity; // default: 25\\r\\n    uint256 public targetLiquidityDenominator; // default: 100\\r\\n\\r\\n    uint256 public buybackMultiplierNumerator; // default: 200\\r\\n    uint256 public buybackMultiplierDenominator; // default: 100\\r\\n    uint256 public buybackMultiplierTriggeredAt;\\r\\n    uint256 public buybackMultiplierLength; // default: 30 mins\\r\\n\\r\\n    bool public autoBuybackEnabled;\\r\\n\\r\\n    uint256 public autoBuybackCap;\\r\\n    uint256 public autoBuybackAccumulator;\\r\\n    uint256 public autoBuybackAmount;\\r\\n    uint256 public autoBuybackBlockPeriod;\\r\\n    uint256 public autoBuybackBlockLast;\\r\\n\\r\\n    DividendDistributor public distributor;\\r\\n\\r\\n    uint256 public distributorGas;\\r\\n\\r\\n    bool public swapEnabled;\\r\\n    uint256 public swapThreshold;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) public buyBacker;\\r\\n    mapping(address => bool) public isFeeExempt;\\r\\n    mapping(address => bool) public isDividendExempt;\\r\\n\\r\\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\\r\\n    event BuybackMultiplierActive(uint256 duration);\\r\\n\\r\\n    bool inSwap;\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyBuybacker() {\\r\\n        require(buyBacker[msg.sender] == true, \\\"Not a buybacker\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address owner_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        address rewardToken_,\\r\\n        address router_,\\r\\n        uint256[5] memory feeSettings_\\r\\n    ) payable Auth(msg.sender) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _totalSupply = totalSupply_;\\r\\n\\r\\n        rewardToken = rewardToken_;\\r\\n        router = IUniswapV2Router02(router_);\\r\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\r\\n            address(this),\\r\\n            router.WETH()\\r\\n        );\\r\\n        distributor = new DividendDistributor(rewardToken_, router_);\\r\\n\\r\\n        _initializeFees(feeSettings_);\\r\\n        _initializeLiquidityBuyBack();\\r\\n\\r\\n        distributorGas = 500_000;\\r\\n        swapEnabled = true;\\r\\n        swapThreshold = _totalSupply / 1000; // 0.1%\\r\\n\\r\\n        isFeeExempt[owner_] = true;\\r\\n        isDividendExempt[pair] = true;\\r\\n        isDividendExempt[address(this)] = true;\\r\\n        isDividendExempt[DEAD] = true;\\r\\n        buyBacker[owner_] = true;\\r\\n\\r\\n        marketingFeeReceiver = owner_;\\r\\n        require(\\r\\n            !marketingFeeReceiver.isContract(),\\r\\n            \\\"Marketing wallet cannot be a contract\\\"\\r\\n        );\\r\\n\\r\\n        _allowances[address(this)][address(router)] = _totalSupply;\\r\\n        _allowances[address(this)][address(pair)] = _totalSupply;\\r\\n\\r\\n        _balances[owner_] = _totalSupply;\\r\\n        emit Transfer(address(0), owner_, _totalSupply);\\r\\n\\r\\n        emit TokenCreated(\\r\\n            owner_,\\r\\n            address(this),\\r\\n            TokenType.buybackBaby,\\r\\n            VERSION\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function _initializeFees(uint256[5] memory feeSettings_) internal {\\r\\n        _setFees(\\r\\n            feeSettings_[0], // liquidityFee\\r\\n            feeSettings_[1], // buybackFee\\r\\n            feeSettings_[2], // reflectionFee\\r\\n            feeSettings_[3], // marketingFee\\r\\n            feeSettings_[4] // feeDenominator\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initializeLiquidityBuyBack() internal {\\r\\n        targetLiquidity = 25;\\r\\n        targetLiquidityDenominator = 100;\\r\\n\\r\\n        buybackMultiplierNumerator = 200;\\r\\n        buybackMultiplierDenominator = 100;\\r\\n        buybackMultiplierLength = 30 minutes;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function allowance(address holder, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != _totalSupply) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\\r\\n                .sub(amount, \\\"Insufficient Allowance\\\");\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        if (inSwap) {\\r\\n            return _basicTransfer(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (shouldSwapBack()) {\\r\\n            swapBack();\\r\\n        }\\r\\n        if (shouldAutoBuyback()) {\\r\\n            triggerAutoBuyback();\\r\\n        }\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"Insufficient Balance\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amountReceived = shouldTakeFee(sender)\\r\\n            ? takeFee(sender, recipient, amount)\\r\\n            : amount;\\r\\n\\r\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\r\\n\\r\\n        if (!isDividendExempt[sender]) {\\r\\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\\r\\n        }\\r\\n        if (!isDividendExempt[recipient]) {\\r\\n            try\\r\\n                distributor.setShare(recipient, _balances[recipient])\\r\\n            {} catch {}\\r\\n        }\\r\\n\\r\\n        try distributor.process(distributorGas) {} catch {}\\r\\n\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"Insufficient Balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender] && totalFee > 0;\\r\\n    }\\r\\n\\r\\n    function getTotalFee(bool selling) public view returns (uint256) {\\r\\n        if (selling) {\\r\\n            return getMultipliedFee();\\r\\n        }\\r\\n        return totalFee;\\r\\n    }\\r\\n\\r\\n    function getMultipliedFee() public view returns (uint256) {\\r\\n        if (\\r\\n            buybackMultiplierTriggeredAt.add(buybackMultiplierLength) >\\r\\n            block.timestamp\\r\\n        ) {\\r\\n            uint256 remainingTime = buybackMultiplierTriggeredAt\\r\\n                .add(buybackMultiplierLength)\\r\\n                .sub(block.timestamp);\\r\\n            uint256 feeIncrease = totalFee\\r\\n                .mul(buybackMultiplierNumerator)\\r\\n                .div(buybackMultiplierDenominator)\\r\\n                .sub(totalFee);\\r\\n\\r\\n            uint256 increasedFee = totalFee.add(\\r\\n                feeIncrease.mul(remainingTime).div(buybackMultiplierLength)\\r\\n            );\\r\\n            return\\r\\n                increasedFee > feeDenominator / 4\\r\\n                    ? feeDenominator / 4\\r\\n                    : increasedFee;\\r\\n        }\\r\\n        return totalFee;\\r\\n    }\\r\\n\\r\\n    function takeFee(\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(\\r\\n            feeDenominator\\r\\n        );\\r\\n\\r\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\r\\n        emit Transfer(sender, address(this), feeAmount);\\r\\n\\r\\n        return amount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    function shouldSwapBack() internal view returns (bool) {\\r\\n        return\\r\\n            msg.sender != pair &&\\r\\n            !inSwap &&\\r\\n            swapEnabled &&\\r\\n            _balances[address(this)] >= swapThreshold;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        uint256 dynamicLiquidityFee = isOverLiquified(\\r\\n            targetLiquidity,\\r\\n            targetLiquidityDenominator\\r\\n        )\\r\\n            ? 0\\r\\n            : liquidityFee;\\r\\n        uint256 amountToLiquify;\\r\\n        if (totalFee > 0) {\\r\\n            amountToLiquify = swapThreshold\\r\\n                .mul(dynamicLiquidityFee)\\r\\n                .div(totalFee)\\r\\n                .div(2);\\r\\n        }\\r\\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\\r\\n\\r\\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\\r\\n\\r\\n        uint256 amountBNBLiquidity;\\r\\n        if (totalBNBFee > 0) {\\r\\n            amountBNBLiquidity = amountBNB\\r\\n                .mul(dynamicLiquidityFee)\\r\\n                .div(totalBNBFee)\\r\\n                .div(2);\\r\\n\\r\\n            uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(\\r\\n                totalBNBFee\\r\\n            );\\r\\n            uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(\\r\\n                totalBNBFee\\r\\n            );\\r\\n\\r\\n            try distributor.deposit{ value: amountBNBReflection }() {} catch {}\\r\\n            payable(marketingFeeReceiver).transfer(amountBNBMarketing);\\r\\n        }\\r\\n\\r\\n        if (amountToLiquify > 0) {\\r\\n            router.addLiquidityETH{ value: amountBNBLiquidity }(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                DEAD,\\r\\n                block.timestamp\\r\\n            );\\r\\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shouldAutoBuyback() internal view returns (bool) {\\r\\n        return\\r\\n            msg.sender != pair &&\\r\\n            !inSwap &&\\r\\n            autoBuybackEnabled &&\\r\\n            autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number && // After N blocks from last buyback\\r\\n            address(this).balance >= autoBuybackAmount;\\r\\n    }\\r\\n\\r\\n    function triggerZeusBuyback(uint256 amount, bool triggerBuybackMultiplier)\\r\\n        external\\r\\n        authorized\\r\\n    {\\r\\n        buyTokens(amount, DEAD);\\r\\n        if (triggerBuybackMultiplier) {\\r\\n            buybackMultiplierTriggeredAt = block.timestamp;\\r\\n            emit BuybackMultiplierActive(buybackMultiplierLength);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function clearBuybackMultiplier() external authorized {\\r\\n        buybackMultiplierTriggeredAt = 0;\\r\\n    }\\r\\n\\r\\n    function triggerAutoBuyback() internal {\\r\\n        buyTokens(autoBuybackAmount, DEAD);\\r\\n        autoBuybackBlockLast = block.number;\\r\\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\\r\\n        if (autoBuybackAccumulator > autoBuybackCap) {\\r\\n            autoBuybackEnabled = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buyTokens(uint256 amount, address to) internal swapping {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: amount\\r\\n        }(0, path, to, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setAutoBuybackSettings(\\r\\n        bool _enabled,\\r\\n        uint256 _cap,\\r\\n        uint256 _amount,\\r\\n        uint256 _period\\r\\n    ) external authorized {\\r\\n        require(_period > 0, \\\"Period must be greater than 0\\\");\\r\\n        autoBuybackEnabled = _enabled;\\r\\n        autoBuybackCap = _cap;\\r\\n        autoBuybackAccumulator = 0;\\r\\n        autoBuybackAmount = _amount;\\r\\n        autoBuybackBlockPeriod = _period;\\r\\n        autoBuybackBlockLast = block.number;\\r\\n    }\\r\\n\\r\\n    function setBuybackMultiplierSettings(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 length\\r\\n    ) external authorized {\\r\\n        require(length <= 2 hours, \\\"Length must be less than 2 hours\\\");\\r\\n        require(numerator / denominator <= 2 && numerator > denominator);\\r\\n        buybackMultiplierNumerator = numerator;\\r\\n        buybackMultiplierDenominator = denominator;\\r\\n        buybackMultiplierLength = length;\\r\\n    }\\r\\n\\r\\n    function setIsDividendExempt(address holder, bool exempt)\\r\\n        external\\r\\n        authorized\\r\\n    {\\r\\n        require(holder != address(this) && holder != pair);\\r\\n        isDividendExempt[holder] = exempt;\\r\\n        if (exempt) {\\r\\n            distributor.setShare(holder, 0);\\r\\n        } else {\\r\\n            distributor.setShare(holder, _balances[holder]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address holder) external authorized {\\r\\n        isFeeExempt[holder] = true;\\r\\n    }\\r\\n\\r\\n    function setBuyBacker(address acc, bool add) external authorized {\\r\\n        buyBacker[acc] = add;\\r\\n    }\\r\\n\\r\\n    function setFees(\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _buybackFee,\\r\\n        uint256 _reflectionFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _feeDenominator\\r\\n    ) public authorized {\\r\\n        _setFees(\\r\\n            _liquidityFee,\\r\\n            _buybackFee,\\r\\n            _reflectionFee,\\r\\n            _marketingFee,\\r\\n            _feeDenominator\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _setFees(\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _buybackFee,\\r\\n        uint256 _reflectionFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _feeDenominator\\r\\n    ) internal {\\r\\n        liquidityFee = _liquidityFee;\\r\\n        buybackFee = _buybackFee;\\r\\n        reflectionFee = _reflectionFee;\\r\\n        marketingFee = _marketingFee;\\r\\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(\\r\\n            _marketingFee\\r\\n        );\\r\\n        feeDenominator = _feeDenominator;\\r\\n        require(\\r\\n            totalFee <= feeDenominator / 4,\\r\\n            \\\"Total fee should not be greater than 1/4 of fee denominator\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(address _marketingFeeReceiver)\\r\\n        external\\r\\n        authorized\\r\\n    {\\r\\n        require(\\r\\n            _marketingFeeReceiver != marketingFeeReceiver,\\r\\n            \\\"Marketing wallet is already that address\\\"\\r\\n        );\\r\\n        require(\\r\\n            !_marketingFeeReceiver.isContract(),\\r\\n            \\\"Marketing wallet cannot be a contract\\\"\\r\\n        );\\r\\n        marketingFeeReceiver = _marketingFeeReceiver;\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\\r\\n        external\\r\\n        authorized\\r\\n    {\\r\\n        require(\\r\\n            _enabled && _amount >= _totalSupply / 100_000,\\r\\n            \\\"Swapback amount should be at least 0.001% of total supply\\\"\\r\\n        );\\r\\n        swapEnabled = _enabled;\\r\\n        swapThreshold = _amount;\\r\\n    }\\r\\n\\r\\n    function setTargetLiquidity(uint256 _target, uint256 _denominator)\\r\\n        external\\r\\n        authorized\\r\\n    {\\r\\n        require(_denominator > 0, \\\"Denominator must be greater than 0\\\");\\r\\n        targetLiquidity = _target;\\r\\n        targetLiquidityDenominator = _denominator;\\r\\n    }\\r\\n\\r\\n    function setDistributionCriteria(\\r\\n        uint256 _minPeriod,\\r\\n        uint256 _minDistribution\\r\\n    ) external onlyOwner {\\r\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\\r\\n    }\\r\\n\\r\\n    function setDistributorSettings(uint256 gas) external authorized {\\r\\n        require(\\r\\n            gas >= 200_000 && gas <= 500_000,\\r\\n            \\\"gasForProcessing must be between 200,000 and 500,000\\\"\\r\\n        );\\r\\n        distributorGas = gas;\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\\r\\n    }\\r\\n\\r\\n    function getLiquidityBacking(uint256 accuracy)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\r\\n    }\\r\\n\\r\\n    function isOverLiquified(uint256 target, uint256 accuracy)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return getLiquidityBacking(accuracy) > target;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71aea5f5eb3a383e047b0f5c8b1468f1402b1f3a374c0944c545de2255c8fec9\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./TokenFactoryBase.sol\\\";\\r\\nimport \\\"../BuybackBabyToken.sol\\\";\\r\\n\\r\\n\\r\\ncontract BuyBackBabyTokenFactory is TokenFactoryBase {\\r\\n    using Address for address payable;\\r\\n\\r\\n    constructor(address factoryManager_, address implementation_)\\r\\n        TokenFactoryBase(factoryManager_, implementation_)\\r\\n    {}\\r\\n\\r\\n    function create(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        address rewardToken_,\\r\\n        address router_,\\r\\n        uint256[5] memory feeSettings_\\r\\n    ) external payable enoughFee nonReentrant returns (address) {\\r\\n        refundExcessiveFee();\\r\\n        payable(feeTo).sendValue(flatFee);\\r\\n        BuybackBabyToken btoken = new BuybackBabyToken(\\r\\n            msg.sender,\\r\\n            name_,\\r\\n            symbol_,\\r\\n            totalSupply_,\\r\\n            rewardToken_,\\r\\n            router_,\\r\\n            feeSettings_\\r\\n            // feeTo\\r\\n        );\\r\\n        btoken.transferOwnership(payable(msg.sender));\\r\\n        assignTokenToOwner(msg.sender, address(btoken), 3);\\r\\n        emit TokenCreated(msg.sender, address(btoken), 3);\\r\\n        return address(btoken);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3dfc6d33a4957f80677ad3052cd3685990a2910e1cf5a43d37f76f9e6b562e94\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4; \\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../../interfaces/IFactoryManager.sol\\\";\\r\\n\\r\\n\\r\\ncontract TokenFactoryBase is Ownable, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address payable;\\r\\n\\r\\n  address public factoryManager;\\r\\n  address public implementation;\\r\\n  address public feeTo;\\r\\n  uint256 public flatFee;\\r\\n\\r\\n  event TokenCreated(\\r\\n      address indexed owner,\\r\\n      address indexed token,\\r\\n      uint8 tokenType\\r\\n  );\\r\\n\\r\\n  modifier enoughFee() {\\r\\n    require(msg.value >= flatFee, \\\"Flat fee\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address factoryManager_, address implementation_) {\\r\\n    factoryManager = factoryManager_;\\r\\n    implementation = implementation_;\\r\\n    feeTo = msg.sender;\\r\\n    flatFee = 10_000_000 gwei;\\r\\n  }\\r\\n\\r\\n  function setImplementation(address implementation_) external onlyOwner {\\r\\n    implementation = implementation_;\\r\\n  }\\r\\n\\r\\n  function setFeeTo(address feeReceivingAddress) external onlyOwner {\\r\\n    feeTo = feeReceivingAddress;\\r\\n  }\\r\\n\\r\\n  function setFlatFee(uint256 fee) external onlyOwner {\\r\\n    flatFee = fee;\\r\\n  }\\r\\n\\r\\n  function assignTokenToOwner(address owner, address token, uint8 tokenType) internal {\\r\\n    IFactoryManager(factoryManager).assignTokensToOwner(owner, token, tokenType);\\r\\n  }\\r\\n\\r\\n  function refundExcessiveFee() internal {\\r\\n    uint256 refund = msg.value.sub(flatFee);\\r\\n    if (refund > 0) {\\r\\n      payable(msg.sender).sendValue(refund);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe8af90de5def92b069e656fae61c3943f289f91a73dd76784261d759d2b5d672\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/dividends/DividendDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"../interfaces/IDividendDistributor.sol\\\";\\r\\n\\r\\n\\r\\ncontract DividendDistributor is IDividendDistributor {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public _token;\\r\\n\\r\\n    struct Share {\\r\\n        uint256 amount;\\r\\n        uint256 totalExcluded;\\r\\n        uint256 totalRealised;\\r\\n    }\\r\\n\\r\\n    IERC20Extended public rewardToken;\\r\\n    IUniswapV2Router02 public router;\\r\\n\\r\\n    address[] public shareholders;\\r\\n    mapping(address => uint256) public shareholderIndexes;\\r\\n    mapping(address => uint256) public shareholderClaims;\\r\\n\\r\\n    mapping(address => Share) public shares;\\r\\n\\r\\n    uint256 public totalShares;\\r\\n    uint256 public totalDividends;\\r\\n    uint256 public totalDistributed;\\r\\n    uint256 public dividendsPerShare;\\r\\n    uint256 public dividendsPerShareAccuracyFactor;\\r\\n\\r\\n    uint256 public minPeriod;\\r\\n    uint256 public minDistribution;\\r\\n\\r\\n    uint256 currentIndex;\\r\\n\\r\\n    bool initialized;\\r\\n    modifier initializer() {\\r\\n        require(!initialized);\\r\\n        _;\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    modifier onlyToken() {\\r\\n        require(msg.sender == _token);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address rewardToken_, address router_) {\\r\\n        _token = msg.sender;\\r\\n        rewardToken = IERC20Extended(rewardToken_);\\r\\n        router = IUniswapV2Router02(router_);\\r\\n\\r\\n        dividendsPerShareAccuracyFactor = 10**36;\\r\\n        minPeriod = 1 hours;\\r\\n        minDistribution = 1 * (10**rewardToken.decimals());\\r\\n    }\\r\\n\\r\\n    function setDistributionCriteria(\\r\\n        uint256 _minPeriod,\\r\\n        uint256 _minDistribution\\r\\n    ) external override onlyToken {\\r\\n        minPeriod = _minPeriod;\\r\\n        minDistribution = _minDistribution;\\r\\n    }\\r\\n\\r\\n    function setShare(address shareholder, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyToken\\r\\n    {\\r\\n        if (shares[shareholder].amount > 0) {\\r\\n            distributeDividend(shareholder);\\r\\n        }\\r\\n\\r\\n        if (amount > 0 && shares[shareholder].amount == 0) {\\r\\n            addShareholder(shareholder);\\r\\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\\r\\n            removeShareholder(shareholder);\\r\\n        }\\r\\n\\r\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\r\\n        shares[shareholder].amount = amount;\\r\\n        shares[shareholder].totalExcluded = getCumulativeDividends(\\r\\n            shares[shareholder].amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deposit() external payable override onlyToken {\\r\\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(rewardToken);\\r\\n\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: msg.value\\r\\n        }(0, path, address(this), block.timestamp);\\r\\n\\r\\n        uint256 amount = rewardToken.balanceOf(address(this)).sub(\\r\\n            balanceBefore\\r\\n        );\\r\\n\\r\\n        totalDividends = totalDividends.add(amount);\\r\\n        dividendsPerShare = dividendsPerShare.add(\\r\\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) external override onlyToken {\\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n\\r\\n        if (shareholderCount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n\\r\\n        while (gasUsed < gas && iterations < shareholderCount) {\\r\\n            if (currentIndex >= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n\\r\\n            if (shouldDistribute(shareholders[currentIndex])) {\\r\\n                distributeDividend(shareholders[currentIndex]);\\r\\n            }\\r\\n\\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shouldDistribute(address shareholder)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\\r\\n            getUnpaidEarnings(shareholder) > minDistribution;\\r\\n    }\\r\\n\\r\\n    function distributeDividend(address shareholder) internal {\\r\\n        if (shares[shareholder].amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 amount = getUnpaidEarnings(shareholder);\\r\\n        if (amount > 0) {\\r\\n            totalDistributed = totalDistributed.add(amount);\\r\\n            IERC20(address(rewardToken)).safeTransfer(shareholder, amount);\\r\\n            shareholderClaims[shareholder] = block.timestamp;\\r\\n            shares[shareholder].totalRealised = shares[shareholder]\\r\\n                .totalRealised\\r\\n                .add(amount);\\r\\n            shares[shareholder].totalExcluded = getCumulativeDividends(\\r\\n                shares[shareholder].amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimDividend() external {\\r\\n        distributeDividend(msg.sender);\\r\\n    }\\r\\n\\r\\n    function getUnpaidEarnings(address shareholder)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (shares[shareholder].amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 shareholderTotalDividends = getCumulativeDividends(\\r\\n            shares[shareholder].amount\\r\\n        );\\r\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\r\\n\\r\\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n\\r\\n    function getCumulativeDividends(uint256 share)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\\r\\n    }\\r\\n\\r\\n    function addShareholder(address shareholder) internal {\\r\\n        shareholderIndexes[shareholder] = shareholders.length;\\r\\n        shareholders.push(shareholder);\\r\\n    }\\r\\n\\r\\n    function removeShareholder(address shareholder) internal {\\r\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\\r\\n            shareholders.length - 1\\r\\n        ];\\r\\n        shareholderIndexes[\\r\\n            shareholders[shareholders.length - 1]\\r\\n        ] = shareholderIndexes[shareholder];\\r\\n        shareholders.pop();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7659b79e017ab3344d1d19a2f609bbbba7e80df42b03d118c71439a034c06849\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IDividendDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IDividendDistributor {\\r\\n    function setDistributionCriteria(\\r\\n        uint256 _minPeriod,\\r\\n        uint256 _minDistribution\\r\\n    ) external;\\r\\n\\r\\n    function setShare(address shareholder, uint256 amount) external;\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function process(uint256 gas) external;\\r\\n}\",\"keccak256\":\"0x130990e6556e32e1b975f56f9019fcca2a7270d5472461ae7374f2f2f9328ca7\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IERC20Extended {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address _owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x63f467204c82599c95ff3963c2580f6aca241a9bd9d504230f43dd3577c5618d\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IFactoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IFactoryManager {\\r\\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) external;\\r\\n}\",\"keccak256\":\"0x234fb96bdce3a973a14a19ae737ee46547abbeeb12d6ba29069505d615728bd3\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x58d783f30f4153c76592c809489a96ea3f58aa8f403653be4fd6e9c511d5424e\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x36f8de121bb2e11f10c39f6d1039d02ee02a9c7924bb6002fd247803762aca21\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/utils/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Auth {\\r\\n    address internal owner;\\r\\n    mapping(address => bool) internal authorizations;\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n        authorizations[_owner] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Function modifier to require caller to be contract owner\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(msg.sender), \\\"!OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Function modifier to require caller to be authorized\\r\\n     */\\r\\n    modifier authorized() {\\r\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Authorize address. Owner only\\r\\n     */\\r\\n    function authorize(address adr) public onlyOwner {\\r\\n        authorizations[adr] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove address' authorization. Owner only\\r\\n     */\\r\\n    function unauthorize(address adr) public onlyOwner {\\r\\n        authorizations[adr] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check if address is owner\\r\\n     */\\r\\n    function isOwner(address account) public view returns (bool) {\\r\\n        return account == owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return address' authorization status\\r\\n     */\\r\\n    function isAuthorized(address adr) public view returns (bool) {\\r\\n        return authorizations[adr];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\\r\\n     */\\r\\n    function transferOwnership(address payable adr) public onlyOwner {\\r\\n        owner = adr;\\r\\n        authorizations[adr] = true;\\r\\n        emit OwnershipTransferred(adr);\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address owner);\\r\\n}\\r\\n\",\"keccak256\":\"0xd5af378871f3b6c81779e5844f630460b0a0e46ef97d1176e8ebc1d649d59d82\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15419,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15723,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6822,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "factoryManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6824,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6826,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6828,
        "contract": "@gempad/generatetokens/contracts/factories/BuyBackBabyTokenFactory.sol:BuyBackBabyTokenFactory",
        "label": "flatFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}