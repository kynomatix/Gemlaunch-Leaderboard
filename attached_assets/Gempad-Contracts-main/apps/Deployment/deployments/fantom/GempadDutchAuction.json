{
  "address": "0x34dB0920B5b02acb0Add2089DA1f5EA1b9e80e8d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GempadDutchAuction.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Purachsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extented",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSaleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalizeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreaseInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadDutchAuction.AuctionDetails",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "locker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAdded",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadDutchAuction.LiquidityDetails",
          "name": "_liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "TGEPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cyclePercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadDutchAuction.VestingDetails",
          "name": "_vesting",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_fundToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPrivateMode",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_refundType",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "__GempadDutchAuction_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "__ServicePayer_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auction",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalizeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publicSaleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUserRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStatus",
      "outputs": [
        {
          "internalType": "enum GempadDutchAuction.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "enablePublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundByTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundToken",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMode",
      "outputs": [
        {
          "internalType": "enum GempadDutchAuction.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSatus",
      "outputs": [
        {
          "internalType": "enum GempadDutchAuction.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userInvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userCalimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVestingEnable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "TGEPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cyclePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xacab07cd5b44f3f5e49248597466ddb6220f04367577a7a58d9613548629b5df",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0x34dB0920B5b02acb0Add2089DA1f5EA1b9e80e8d",
    "transactionIndex": 0,
    "gasUsed": "3547297",
    "logsBloom": "0x
    "blockHash": "0x000060e2000006c96eaf5b5d967641be5ff93e96f3a30568191809f9a1eb161c",
    "transactionHash": "0xacab07cd5b44f3f5e49248597466ddb6220f04367577a7a58d9613548629b5df",
    "logs": [],
    "blockNumber": 24678717,
    "cumulativeGasUsed": "3547297",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90a33b80a7877d70c5fd0632bf7a47a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GempadDutchAuction.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purachsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadDutchAuction.AuctionDetails\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadDutchAuction.LiquidityDetails\",\"name\":\"_liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TGEPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cyclePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadDutchAuction.VestingDetails\",\"name\":\"_vesting\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_fundToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPrivateMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_refundType\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"__GempadDutchAuction_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"__ServicePayer_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUserRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enum GempadDutchAuction.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"enablePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundByTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"enum GempadDutchAuction.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSatus\",\"outputs\":[{\"internalType\":\"enum GempadDutchAuction.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCalimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TGEPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cyclePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"__GempadDutchAuction_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256),address,bool,bool,address,address)\":{\"params\":{\"_feeReceiver\":\".\",\"_fundToken\":\".\",\"_id\":\".\",\"_isPrivateMode\":\".\",\"_liquidity\":\"add liquidaty terms\",\"_owner\":\".\",\"_refundType\":\"burn token balance or refund (0 refund and 1 burn)\",\"_vesting\":\"claim funds terms\",\"info\":\".\"}},\"addWhitelist(address[])\":{\"params\":{\"_participants\":\"address of users\"}},\"buyToken(uint256)\":{\"params\":{\"_amount\":\"in purchase currency\"}},\"enablePublicSale(uint256)\":{\"params\":{\"_startTime\":\"start time of public sale time if it is equalo to sale end time that means its priavte sale.\"}},\"getCurrentSatus()\":{\"returns\":{\"status\":\" current selling status\"}},\"isWhitelisted(address)\":{\"returns\":{\"_0\":\"bool return whitelist status of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelist(address[])\":{\"params\":{\"_participants\":\"address of users\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__GempadDutchAuction_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256),address,bool,bool,address,address)\":{\"notice\":\"initailze core params of auction\"},\"addWhitelist(address[])\":{\"notice\":\"add users to whitelist\"},\"buyToken(uint256)\":{\"notice\":\"user buy Tokens\"},\"cancel()\":{\"notice\":\"cancel the sale\"},\"claimTokens()\":{\"notice\":\"called by the investor the claim the tokens against investment as per vesting terms\"},\"claimUserRefund()\":{\"notice\":\"called by investor to get refund incase of sale cancellation or failure to reach soft cap\"},\"enablePublicSale(uint256)\":{\"notice\":\"enable public or private sale time.\"},\"finalize()\":{\"notice\":\"finalize the sale and withdraw sell funds and sell token balance\"},\"getCurrentMode()\":{\"notice\":\"called by owner to get refund incase of sale cancellation or failure to reach soft cap\"},\"removeWhitelist(address[])\":{\"notice\":\"remove usres from whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/dutchauction/contracts/GempadDutchAuction.sol\":\"GempadDutchAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/dutchauction/contracts/AuctionWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nabstract contract AuctionWhitelist is Initializable, OwnableUpgradeable {\\n    mapping(address => bool) internal _whitelist;\\n\\n    event WhitelistUpdated(address[] account, address sender);\\n\\n    /**\\n     * @notice  add users to whitelist\\n     * @param _participants  address of users\\n     */\\n    function addWhitelist(address[] memory _participants) external onlyOwner {\\n        uint256 length = _participants.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            require(_participants[i] != address(0), 'Invalid address');\\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\\n            _whitelist[_participants[i]] = true;\\n        }\\n        emit WhitelistUpdated(_participants, msg.sender);\\n    }\\n\\n    /**\\n     * @notice  remove usres from whitelist\\n     * @param _participants  address of users\\n     */\\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\\n        uint256 length = _participants.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            require(_participants[i] != address(0), 'Invalid address');\\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\\n            _whitelist[_participants[i]] = false;\\n        }\\n        emit WhitelistUpdated(_participants, msg.sender);\\n    }\\n\\n    /**\\n     * @return  bool return whitelist status of user\\n     */\\n    function isWhitelisted(address _address) public view returns (bool) {\\n        return _whitelist[_address];\\n    }\\n}\\n\",\"keccak256\":\"0x87ed44558e0bfb9483fedf21ab507b49ec6b0fdd3e7caa12597bbd7f2b862a29\",\"license\":\"UNLICENSED\"},\"@gempad/dutchauction/contracts/GempadDutchAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\r\\nimport './interfaces/IERC20Extented.sol';\\r\\nimport './interfaces/IUniswapV2Factory.sol';\\r\\nimport './interfaces/IUniswapV2Pair.sol';\\r\\nimport './interfaces/IUniswapV2Router02.sol';\\r\\nimport './interfaces/IGempadVestingLock.sol';\\r\\nimport './AuctionWhitelist.sol';\\r\\nimport 'hardhat/console.sol';\\r\\n\\r\\ncontract GempadDutchAuction is ServicePayer, AuctionWhitelist, ReentrancyGuardUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    bool public isInitialized = false;\\r\\n    uint256 public Id;\\r\\n\\r\\n    AuctionDetails public auction;\\r\\n    LiquidityDetails public liquidity;\\r\\n    VestingDetails public vesting;\\r\\n    Status public currentStatus;\\r\\n\\r\\n    IERC20Extented public fundToken;\\r\\n    bool public fundByTokens;\\r\\n\\r\\n    bool private refundType; //0 refund and 1 burn\\r\\n\\r\\n    bool private isPrivateMode;\\r\\n\\r\\n    address private feeReceiver;\\r\\n    uint256 public tokenFee;\\r\\n\\r\\n    uint8 private decimals;\\r\\n\\r\\n    uint256 public totalRaised;\\r\\n    uint256 public totalClaimed;\\r\\n    uint256 public totalTokensSold;\\r\\n    uint256 private tokenToReceive;\\r\\n\\r\\n    address[] public investors;\\r\\n\\r\\n    mapping(address => UserDetails) public userInfo;\\r\\n\\r\\n    struct AuctionDetails {\\r\\n        IERC20Extented token;\\r\\n        uint256 totalSaleAmount;\\r\\n        uint256 startPrice;\\r\\n        uint256 endPrice;\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 minBuyLimit;\\r\\n        uint256 maxBuyLimit;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 finalizeTime;\\r\\n        uint256 publicSaleTime;\\r\\n        uint256 decreaseInterval;\\r\\n    }\\r\\n    struct LiquidityDetails {\\r\\n        IUniswapV2Router02 router;\\r\\n        uint256 liquidityPercent;\\r\\n        uint256 lockTime;\\r\\n        address locker;\\r\\n        uint256 liquidityAdded;\\r\\n    }\\r\\n    struct VestingDetails {\\r\\n        bool isVestingEnable;\\r\\n        uint256 TGEPercent;\\r\\n        uint256 cyclePercent;\\r\\n        uint256 cycleInterval;\\r\\n    }\\r\\n\\r\\n    struct UserDetails {\\r\\n        uint256 userTokens;\\r\\n        uint256 userInvest;\\r\\n        uint256 userCalimed;\\r\\n        uint256 lastClaimTime;\\r\\n    }\\r\\n\\r\\n    enum Status {\\r\\n        INCOMMING,\\r\\n        ACTIVE,\\r\\n        CANCELLED,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    enum Mode {\\r\\n        PENDING,\\r\\n        PRIVATE,\\r\\n        PUBLIC\\r\\n    }\\r\\n\\r\\n    event Purachsed(uint256 id, address sender, uint256 _amount, uint256 amount);\\r\\n    event PublicSaleEnabled(uint256 id, uint256 time);\\r\\n    event liquidityAdded(uint256 id, address pair, uint256 liquidity);\\r\\n    event Cancelled(uint256 id, Status status, uint256 time);\\r\\n\\r\\n    /**\\r\\n     * @notice   initailze core params of auction\\r\\n     * @param   _id  .\\r\\n     * @param   info  .\\r\\n     * @param   _liquidity  add liquidaty terms\\r\\n     * @param   _vesting  claim funds terms\\r\\n     * @param   _fundToken  .\\r\\n     * @param   _isPrivateMode  .\\r\\n     * @param   _refundType  burn token balance or refund (0 refund and 1 burn)\\r\\n     * @param   _feeReceiver  .\\r\\n     * @param   _owner  .\\r\\n     */\\r\\n    function __GempadDutchAuction_init(\\r\\n        uint256 _id,\\r\\n        AuctionDetails memory info,\\r\\n        LiquidityDetails memory _liquidity,\\r\\n        VestingDetails memory _vesting,\\r\\n        address _fundToken,\\r\\n        bool _isPrivateMode,\\r\\n        bool _refundType,\\r\\n        address payable _feeReceiver,\\r\\n        address _owner\\r\\n    ) public payable initializer {\\r\\n        require(!isInitialized, 'Err: Already initialized');\\r\\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadDutchAuction');\\r\\n        //set custom Investment Token\\r\\n        Id = _id;\\r\\n        fundByTokens = _fundToken != address(0);\\r\\n        if (fundByTokens) {\\r\\n            fundToken = IERC20Extented(_fundToken);\\r\\n        }\\r\\n        require(info.totalSaleAmount > 0, \\\"Total selling amount can't be zero\\\");\\r\\n\\r\\n        decimals = (!fundByTokens) ? 18 : IERC20Extented(_fundToken).decimals();\\r\\n\\r\\n        require(\\r\\n            info.startPrice > 0 && info.endPrice < info.startPrice,\\r\\n            'End price must be less than start price'\\r\\n        );\\r\\n\\r\\n        require(info.softCap <= info.hardCap, 'Soft-Cap should be less than or equal to hardcap');\\r\\n\\r\\n        require(\\r\\n            info.softCap >= ((info.hardCap * 20e3) / 100e3),\\r\\n            'Softcap must be greater than or equal 20% of Hardcap'\\r\\n        );\\r\\n\\r\\n        uint256 endPrice = (info.totalSaleAmount * (10 ** decimals)) / info.softCap;\\r\\n        uint256 startPrice = (info.totalSaleAmount * (10 ** decimals)) / info.hardCap;\\r\\n\\r\\n        require(\\r\\n            ((info.softCap * endPrice) / 10 ** decimals) == info.totalSaleAmount,\\r\\n            'SoftCap * endPrice = TotalSaleAmount'\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            ((info.hardCap * startPrice) / 10 ** decimals) == info.totalSaleAmount,\\r\\n            'hardCap * startPrice = TotalSaleAmount'\\r\\n        );\\r\\n\\r\\n        require(info.minBuyLimit > 0 && info.minBuyLimit < info.maxBuyLimit, 'Invalid minimum buy limit');\\r\\n\\r\\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\\r\\n\\r\\n        require(\\r\\n            (info.endTime - info.startTime) > info.decreaseInterval,\\r\\n            'Auction duration must be greater than decrease price interval'\\r\\n        );\\r\\n\\r\\n        require(info.decreaseInterval > 0, \\\"Price decrease interval can't be zero\\\");\\r\\n\\r\\n        require(_liquidity.liquidityPercent > 50e3, 'Liquidity percentage must be greater than 50');\\r\\n        require(_liquidity.lockTime >= 300, \\\"Lock time can't be less than 5 minuts\\\");\\r\\n\\r\\n        if (_vesting.isVestingEnable) {\\r\\n            require(\\r\\n                _vesting.TGEPercent > 0 && _vesting.TGEPercent < 100e3,\\r\\n                'Invalid Initial Release pecentage'\\r\\n            );\\r\\n\\r\\n            require(_vesting.cyclePercent > 0, 'Cycle pecentage must be greater than zero');\\r\\n\\r\\n            require(_vesting.cycleInterval > 0, 'interval must be greater than zero');\\r\\n\\r\\n            require(\\r\\n                (_vesting.TGEPercent + _vesting.cyclePercent) <= 100e3,\\r\\n                'Sum of TGE and cycle should be less than 100'\\r\\n            );\\r\\n\\r\\n            vesting = _vesting;\\r\\n            isInitialized = true;\\r\\n        }\\r\\n\\r\\n        //whitelisting feature status\\r\\n        isPrivateMode = _isPrivateMode;\\r\\n\\r\\n        auction = info;\\r\\n        liquidity = _liquidity;\\r\\n\\r\\n        // Initialize the public sale start time;\\r\\n        info.publicSaleTime = (!_isPrivateMode) ? info.startTime : info.endTime;\\r\\n\\r\\n        // Initialize fee and refund type\\r\\n        feeReceiver = _feeReceiver;\\r\\n        tokenFee = IPayable(feeReceiver).getFee('GempadDutchAuction');\\r\\n        refundType = _refundType;\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  user buy Tokens\\r\\n     * @param   _amount  in purchase currency\\r\\n     */\\r\\n    function buyToken(uint256 _amount) external payable nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n        require(\\r\\n            block.timestamp >= auction.startTime && block.timestamp <= auction.endTime,\\r\\n            'Sale is not active'\\r\\n        );\\r\\n\\r\\n        if (block.timestamp < auction.publicSaleTime) {\\r\\n            require(_whitelist[msg.sender], 'User is not whitelisted');\\r\\n        }\\r\\n        require(_amount >= auction.minBuyLimit, 'Amount is less than min buy limit');\\r\\n\\r\\n        require(user.userInvest + _amount <= auction.maxBuyLimit, 'Maximum buy limit reached');\\r\\n\\r\\n        require((totalRaised + _amount) <= auction.hardCap, 'HardCap reached');\\r\\n\\r\\n        uint256 currentPrice = calculateCurrentPrice();\\r\\n\\r\\n        uint256 tokenAmount = ((_amount * currentPrice) / (10 ** decimals));\\r\\n\\r\\n        if (user.userTokens <= 0) investors.push(msg.sender);\\r\\n        user.userTokens += tokenAmount;\\r\\n        user.userInvest += _amount;\\r\\n\\r\\n        // Update the total sale amount\\r\\n        totalRaised += _amount;\\r\\n        totalTokensSold += tokenAmount;\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        } else {\\r\\n            // Ensure that the sender has sent enough Ether\\r\\n            require(msg.value == _amount, 'Insufficient funds sent');\\r\\n        }\\r\\n        emit Purachsed(Id, msg.sender, tokenAmount, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  enable public or private sale time.\\r\\n     * @param   _startTime   start time of public sale time if it is equalo to sale end time that means its priavte sale.\\r\\n     */\\r\\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\\r\\n        // require(_startTime >= block.timestamp, 'Start time must be greater than current time');\\r\\n        auction.publicSaleTime = _startTime;\\r\\n\\r\\n        emit PublicSaleEnabled(Id, auction.publicSaleTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  finalize the sale and withdraw sell funds and sell token balance\\r\\n     */\\r\\n    function finalize() external onlyOwner nonReentrant {\\r\\n        require(\\r\\n            (block.timestamp >= auction.endTime && totalRaised >= auction.softCap) ||\\r\\n                totalRaised >= auction.softCap,\\r\\n            'Sale End Time or cap not reached'\\r\\n        );\\r\\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\\r\\n\\r\\n        currentStatus = Status.CLOSED;\\r\\n        auction.finalizeTime = block.timestamp;\\r\\n\\r\\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        addLiquidity();\\r\\n        _transferFunds(feeReceiver, feeAmount);\\r\\n        withdrawFunds();\\r\\n        withdrawTokenBalance();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  cancel the sale\\r\\n     */\\r\\n    function cancel() external onlyOwner {\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\\r\\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\\r\\n\\r\\n        currentStatus = Status.CANCELLED;\\r\\n\\r\\n        emit Cancelled(Id, currentStatus, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by the investor the claim the tokens against investment as per vesting terms\\r\\n     */\\r\\n    function claimTokens() external nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\\r\\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\\r\\n\\r\\n        uint256 claimableAmount = _calculateClaimableTokens(msg.sender);\\r\\n        uint256 claimable = user.userCalimed + claimableAmount;\\r\\n\\r\\n        require(claimableAmount > 0 && claimable <= user.userTokens, 'Total tokens claimed');\\r\\n\\r\\n        user.userCalimed += claimableAmount;\\r\\n\\r\\n        user.lastClaimTime = block.timestamp;\\r\\n        totalClaimed += claimableAmount;\\r\\n\\r\\n        auction.token.transfer(msg.sender, claimableAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by investor to get refund incase of sale cancellation or failure to reach soft cap\\r\\n     */\\r\\n    function claimUserRefund() external {\\r\\n        UserDetails storage info = userInfo[msg.sender];\\r\\n        require(\\r\\n            (block.timestamp >= auction.endTime && totalRaised < auction.softCap) ||\\r\\n                currentStatus == Status.CANCELLED,\\r\\n            'Refund is not allowed'\\r\\n        );\\r\\n        require(info.userInvest > 0, 'User has not invested');\\r\\n\\r\\n        uint256 refund = info.userInvest;\\r\\n        info.userInvest = 0;\\r\\n\\r\\n        _transferFunds(msg.sender, refund);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  withdraw the funds raised\\r\\n     */\\r\\n    function withdrawFunds() internal {\\r\\n        require(currentStatus == Status.CLOSED, 'Sale in not finalized');\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            uint256 amount = fundToken.balanceOf(address(this));\\r\\n\\r\\n            fundToken.transfer(msg.sender, amount);\\r\\n        } else {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  transfer the unsold tokens to owner\\r\\n     */\\r\\n    function withdrawTokenBalance() internal {\\r\\n        uint256 balance = auction.token.balanceOf(address(this)).sub(totalTokensSold);\\r\\n\\r\\n        if (refundType) {\\r\\n            auction.token.transfer(msg.sender, balance);\\r\\n        } else {\\r\\n            auction.token.transfer(address(0x000000000000000000000000000000000000dEaD), balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawTokens() external nonReentrant onlyOwner {\\r\\n        require(\\r\\n            (block.timestamp >= auction.endTime && totalRaised < auction.softCap) ||\\r\\n                currentStatus == Status.CANCELLED,\\r\\n            'Sale is not cancelled or end Time not reached'\\r\\n        );\\r\\n\\r\\n        uint256 balance = auction.token.balanceOf(address(this));\\r\\n\\r\\n        auction.token.transfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by owner to get refund incase of sale cancellation or failure to reach soft cap\\r\\n     */\\r\\n    function getCurrentMode() public view returns (Mode mode) {\\r\\n        mode = (block.timestamp < auction.startTime)\\r\\n            ? Mode.PENDING //pending\\r\\n            : (block.timestamp >= auction.startTime && block.timestamp < auction.publicSaleTime)\\r\\n            ? Mode.PRIVATE //private\\r\\n            : Mode.PUBLIC; //public\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  status  current selling status\\r\\n     */\\r\\n    function getCurrentSatus() public view returns (Status status) {\\r\\n        status = (block.timestamp < auction.startTime && currentStatus != Status.CANCELLED)\\r\\n            ? Status.INCOMMING\\r\\n            : (currentStatus != Status.CANCELLED &&\\r\\n                currentStatus != Status.CLOSED &&\\r\\n                block.timestamp > auction.startTime)\\r\\n            ? Status.ACTIVE\\r\\n            : currentStatus;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  pairAddress  returnd the pair address to add liquidity.\\r\\n     */\\r\\n    function getTokenPair() internal view returns (address pairAddress) {\\r\\n        if (fundByTokens) {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                address(fundToken),\\r\\n                address(auction.token)\\r\\n            );\\r\\n        } else {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                liquidity.router.WETH(),\\r\\n                address(auction.token)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  to get share of sell tokens and purchase currency to create pair and add liquidity\\r\\n     * @return  uint256  sell tokens share\\r\\n     * @return  uint256  purchase currency share\\r\\n     */\\r\\n    function getTokenShare() internal view returns (uint256, uint256) {\\r\\n        uint256 currentPrice = calculateCurrentPrice();\\r\\n\\r\\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        uint256 shareEth = ((totalRaised - fee) * liquidity.liquidityPercent) / 100e3;\\r\\n\\r\\n        uint256 tokens = ((shareEth * currentPrice)) / (10 ** decimals);\\r\\n        return (shareEth, tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  add liquidity to given dex as per liquidity terms and also lock the LP tokens\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     */\\r\\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\\r\\n        if (totalRaised > 0) {\\r\\n            uint256 amountToken;\\r\\n            uint256 amountETH;\\r\\n            uint256 _liquidity;\\r\\n\\r\\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\\r\\n\\r\\n            auction.token.approve(address(liquidity.router), sellTokenShare);\\r\\n\\r\\n            if (!fundByTokens) {\\r\\n                // Create a DEX pair for this token\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\\r\\n                    value: fundTokenShare\\r\\n                }(\\r\\n                    address(auction.token),\\r\\n                    sellTokenShare,\\r\\n                    0, // slippage is unavoidable\\r\\n                    0, // slippage is unavoidable\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            } else {\\r\\n                fundToken.approve(address(liquidity.router), sellTokenShare);\\r\\n                fundToken.approve(address(liquidity.router), fundTokenShare);\\r\\n                // Create a DEX pair for this token\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\\r\\n                    address(auction.token),\\r\\n                    address(fundToken),\\r\\n                    sellTokenShare,\\r\\n                    fundTokenShare,\\r\\n                    0, // slippage is unavoidable\\r\\n                    0, // slippage is unavoidable\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            }\\r\\n            liquidity.liquidityAdded = fundTokenShare;\\r\\n            address pairAddress = getTokenPair();\\r\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n            uint256 pairBalance = pair.balanceOf(address(this));\\r\\n\\r\\n            IERC20Extented(pairAddress).approve(liquidity.locker, pairBalance);\\r\\n\\r\\n            IGempadVestingLock(liquidity.locker).lock(\\r\\n                owner(),\\r\\n                pairAddress,\\r\\n                true,\\r\\n                pairBalance,\\r\\n                (block.timestamp + liquidity.lockTime),\\r\\n                'Gempad liquidity'\\r\\n            );\\r\\n\\r\\n            emit liquidityAdded(Id, pairAddress, _liquidity);\\r\\n            return (amountToken, amountETH, _liquidity);\\r\\n        }\\r\\n\\r\\n        return (0, 0, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param   _user  .\\r\\n     * @return  withdrawable  the amount of tokens investor can withdraw as per vesting terms\\r\\n     */\\r\\n    function _calculateClaimableTokens(address _user) internal view returns (uint256 withdrawable) {\\r\\n        UserDetails memory user = userInfo[_user];\\r\\n\\r\\n        if (vesting.isVestingEnable) {\\r\\n            require(\\r\\n                (block.timestamp - user.lastClaimTime) >= vesting.cycleInterval,\\r\\n                'Tokens are not unlocked'\\r\\n            );\\r\\n\\r\\n            uint256 tgeReleaseAmount = (vesting.TGEPercent * user.userTokens) / 100e3;\\r\\n\\r\\n            uint256 cycleReleaseAmount = Math.mulDiv(user.userTokens, vesting.cyclePercent, 100e3);\\r\\n\\r\\n            uint256 currentTotal = 0;\\r\\n\\r\\n            if (block.timestamp >= auction.finalizeTime) {\\r\\n                currentTotal =\\r\\n                    (((block.timestamp - auction.finalizeTime) / vesting.cycleInterval) *\\r\\n                        cycleReleaseAmount) +\\r\\n                    tgeReleaseAmount;\\r\\n            }\\r\\n\\r\\n            if (currentTotal > user.userTokens) {\\r\\n                withdrawable = user.userTokens - user.userCalimed;\\r\\n            } else {\\r\\n                withdrawable = currentTotal - user.userCalimed;\\r\\n            }\\r\\n        } else {\\r\\n            withdrawable = user.userTokens;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  transfer purchase currency to receiver\\r\\n     * @param   _to  .\\r\\n     * @param   _amount  .\\r\\n     */\\r\\n    function _transferFunds(address _to, uint256 _amount) private {\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transfer(_to, _amount);\\r\\n        } else {\\r\\n            payable(_to).transfer(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  as price keep decreasing at the rate of auction terms\\r\\n     * @return  uint256  the current priceof token based on time\\r\\n     */\\r\\n    function calculateCurrentPrice() internal view returns (uint256) {\\r\\n        uint256 endPrice = (auction.totalSaleAmount * (10 ** decimals)) / auction.softCap;\\r\\n        uint256 startPrice = (auction.totalSaleAmount * (10 ** decimals)) / auction.hardCap;\\r\\n\\r\\n        uint256 totalIntervals = (auction.endTime - auction.startTime) / auction.decreaseInterval;\\r\\n\\r\\n        uint256 reductionAmount = (endPrice - startPrice) / totalIntervals;\\r\\n\\r\\n        uint256 intervalsElapsed = (block.timestamp - auction.startTime) / auction.decreaseInterval;\\r\\n\\r\\n        if (intervalsElapsed > totalIntervals) {\\r\\n            intervalsElapsed = totalIntervals;\\r\\n        }\\r\\n\\r\\n        if (intervalsElapsed <= 0) {\\r\\n            return startPrice;\\r\\n        } else {\\r\\n            uint256 newPrice = startPrice + (reductionAmount * intervalsElapsed);\\r\\n            return newPrice;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x59450c3741f89514dd2aee3479714fa101fc5719877c5c4a221dc2e677884aad\",\"license\":\"UNLICENSED\"},\"@gempad/dutchauction/contracts/interfaces/IERC20Extented.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IERC20Extented is IERC20 {\\r\\n\\r\\n    function decimals() external returns (uint8);\\r\\n}\",\"keccak256\":\"0xf40b553f98f2e1e12b78b21232f3a1f731f72c036767203c2bffb64fc9b44bce\",\"license\":\"MIT\"},\"@gempad/dutchauction/contracts/interfaces/IGempadVestingLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IGempadVestingLock {\\r\\n\\r\\n  function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external  payable returns (uint256 id);\\r\\n\\r\\n  function unlock(uint256 lockId) external;\\r\\n\\r\\n  function editLock(\\r\\n    uint256 lockId,\\r\\n    uint256 newAmount,\\r\\n    uint256 newUnlockDate\\r\\n  ) external payable;\\r\\n}\",\"keccak256\":\"0x89dd109edc8e9dfd87897dbd7bce5b35605896e7ee1ad31dcdd91f7a26a68df9\",\"license\":\"MIT\"},\"@gempad/dutchauction/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n\\r\\n//IUniswapV2Factory.sol\\r\\ninterface IUniswapV2Factory {\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2524e635cce09d03725e1f1d98ea49609fd772d1b7793228d78ceae5cc147145\",\"license\":\"UNLICENSED\"},\"@gempad/dutchauction/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n//IUniswapV2Pair.sol\\r\\ninterface IUniswapV2Pair {\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x8e27575eeabd09d2904855e02f799a8c1f8980d785d1ee5bb9b2f6b4a3fe45ee\",\"license\":\"UNLICENSED\"},\"@gempad/dutchauction/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n//IUniswapV2Router01.sol\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n\\r\\n}\\r\\n//IUnisapV2Router02.sol\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\r\\n}\",\"keccak256\":\"0x2a7db77239a2321b8a9ec297899d71dfeddad0190d77a4b0aa1c156e15492ee3\",\"license\":\"UNLICENSED\"},\"@gempad/services/contracts/ServicePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\n\\r\\ninterface IPayable {\\r\\n    function pay(string memory serviceName) external payable;\\r\\n\\r\\n    function getFee(string memory serviceName) external returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ServicePayer\\r\\n * @dev Implementation of the ServicePayer\\r\\n */\\r\\nabstract contract ServicePayer is Initializable {\\r\\n    function __ServicePayer_init(\\r\\n        address payable receiver,\\r\\n        string memory serviceName\\r\\n    ) public payable onlyInitializing {\\r\\n        IPayable(receiver).pay{ value: msg.value }(serviceName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd4167fa676ef90885db6c3e159cfdf1f4784085d1a587989a41eeb74339f169\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d75760003560e01c806363b2011711610102578063c5c4744c11610095578063ea8a1af011610064578063ea8a1af014610654578063edac985b14610669578063ef8a923514610689578063f2fde38b146106a357600080fd5b8063c5c4744c146105e6578063c979b61d146105fc578063cfed032a1461061e578063d54ad2a11461063e57600080fd5b80638d8f2adb116100d15780638d8f2adb1461058b5780638da5cb5b146105a0578063a35e3aec146105be578063a7e993eb146105d157600080fd5b806363b201171461049157806366c521db146104a7578063715018a6146104ba5780637d9f6db5146104cf57600080fd5b806339a090c91161017a5780634559913611610149578063455991361461042c57806348c54b9d146104425780634bb278f31461045757806350adcdb71461046c57600080fd5b806339a090c91461034f5780633af32abf146103735780633feb5f2b146103ac57806344c63eec146103e457600080fd5b80631a686502116101b65780631a6865021461029657806323245216146103005780632d296bf114610322578063392e53cd1461033557600080fd5b8062fed700146101dc57806315370598146102125780631959a00214610234575b600080fd5b3480156101e857600080fd5b5060b0546101fd90600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276106c3565b604051610209919061374b565b34801561024057600080fd5b5061027661024f36600461378a565b60b96020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610209565b3480156102a257600080fd5b5060a75460a85460a95460aa5460ab546102c9946001600160a01b03908116949392169085565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a001610209565b34801561030c57600080fd5b5061032061031b366004613818565b6106fa565b005b6103206103303660046138ca565b6108b2565b34801561034157600080fd5b506098546101fd9060ff1681565b34801561035b57600080fd5b5061036560995481565b604051908152602001610209565b34801561037f57600080fd5b506101fd61038e36600461378a565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156103b857600080fd5b506103cc6103c73660046138ca565b610d16565b6040516001600160a01b039091168152602001610209565b3480156103f057600080fd5b5060ac5460ad5460ae5460af5461040a9360ff1692919084565b6040805194151585526020850193909352918301526060820152608001610209565b34801561043857600080fd5b5061036560b25481565b34801561044e57600080fd5b50610320610d40565b34801561046357600080fd5b50610320610f5f565b34801561047857600080fd5b5060b0546103cc9061010090046001600160a01b031681565b34801561049d57600080fd5b5061036560b65481565b6103206104b53660046139ed565b6110b7565b3480156104c657600080fd5b50610320611eaf565b3480156104db57600080fd5b50609a54609b54609c54609d54609e54609f5460a05460a15460a25460a35460a45460a55460a65461051f9c6001600160a01b03169b9a999897969594939291908d565b604080516001600160a01b03909e168e5260208e019c909c529a8c019990995260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a001610209565b34801561059757600080fd5b50610320611ec1565b3480156105ac57600080fd5b506033546001600160a01b03166103cc565b6103206105cc366004613b3d565b612068565b3480156105dd57600080fd5b50610320612162565b3480156105f257600080fd5b5061036560b45481565b34801561060857600080fd5b50610611612260565b6040516102099190613bf9565b34801561062a57600080fd5b506103206106393660046138ca565b6122e8565b34801561064a57600080fd5b5061036560b55481565b34801561066057600080fd5b50610320612334565b34801561067557600080fd5b50610320610684366004613818565b61247c565b34801561069557600080fd5b5060b0546106119060ff1681565b3480156106af57600080fd5b506103206106be36600461378a565b612618565b60a25460009042106106f25760a25442108015906106e2575060a55442105b6106ec5750600290565b50600190565b60005b905090565b6107026126a5565b805160005b818110156108745760006001600160a01b031683828151811061072c5761072c613c07565b60200260200101516001600160a01b03160361078f5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b606560008483815181106107a5576107a5613c07565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166108185760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c697374656400006044820152606401610786565b60006065600085848151811061083057610830613c07565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061086c81613c33565b915050610707565b507f0c5a12c037597c1d2258bba4cf82c514e4e02fa76d7af223e59064e1d87e26aa82336040516108a6929190613c4c565b60405180910390a15050565b6108ba6126ff565b33600090815260b96020526040902060a25442108015906108dd575060a3544211155b6109295760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610786565b60a554421015610992573360009081526065602052604090205460ff166109925760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610786565b60a054821015610a0a5760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973206c657373207468616e206d696e20627579206c696d6960448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610786565b60a1546001820154610a1d908490613ca9565b1115610a6b5760405162461bcd60e51b815260206004820152601960248201527f4d6178696d756d20627579206c696d69742072656163686564000000000000006044820152606401610786565b609f5460b454610a7c908490613ca9565b1115610aca5760405162461bcd60e51b815260206004820152600f60248201527f48617264436170207265616368656400000000000000000000000000000000006044820152606401610786565b6000610ad4612758565b60b354909150600090610aeb9060ff16600a613da0565b610af58386613daf565b610aff9190613ddc565b8354909150610b585760b880546001810182556000919091527fd91d691c894f8266e3f2d5e558ad2349d6783327a752a4949bc554f514e3498801805473ffffffffffffffffffffffffffffffffffffffff1916331790555b80836000016000828254610b6c9190613ca9565b9250508190555083836001016000828254610b879190613ca9565b925050819055508360b46000828254610ba09190613ca9565b925050819055508060b66000828254610bb99190613ca9565b909155505060b054600160a81b900460ff1615610c6e5760b0546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190613dfe565b50610cbd565b833414610cbd5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610786565b609954604080519182523360208301528101829052606081018590527f4aa322ff0d145a308f21ff47aaecd2204d135dafa403788e9c2e9fe077a9c4979060800160405180910390a1505050610d136001606655565b50565b60b88181548110610d2657600080fd5b6000918252602090912001546001600160a01b0316905081565b610d486126ff565b33600090815260b960205260409020600260b05460ff166003811115610d7057610d70613735565b03610dbd5760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610786565b600360b05460ff166003811115610dd657610dd6613735565b14610e235760405162461bcd60e51b815260206004820152601560248201527f53616c65206973206e6f742066696e616c697a656400000000000000000000006044820152606401610786565b6000610e2e33612855565b90506000818360020154610e429190613ca9565b9050600082118015610e55575082548111155b610ea15760405162461bcd60e51b815260206004820152601460248201527f546f74616c20746f6b656e7320636c61696d65640000000000000000000000006044820152606401610786565b81836002016000828254610eb59190613ca9565b909155505042600384015560b58054839190600090610ed5908490613ca9565b9091555050609a5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190613dfe565b50505050610f5d6001606655565b565b610f676126a5565b610f6f6126ff565b60a3544210801590610f855750609e5460b45410155b80610f945750609e5460b45410155b610fe05760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610786565b600360b05460ff166003811115610ff957610ff9613735565b036110465760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a6564000000000000000000006044820152606401610786565b60b0805460ff191660031790554260a45560b25460b454600091620186a09161106f9190613daf565b6110799190613ddc565b90506110836129cf565b505060b15461109c91506001600160a01b031682612f6f565b6110a4613039565b6110ac6131cb565b50610f5d6001606655565b600054610100900460ff16158080156110d75750600054600160ff909116105b806110f15750303b1580156110f1575060005460ff166001145b6111635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610786565b6000805460ff191660011790558015611186576000805461ff0019166101001790555b60985460ff16156111d95760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920696e697469616c697a656400000000000000006044820152606401610786565b611218836040518060400160405280601281526020017f47656d706164447574636841756374696f6e0000000000000000000000000000815250612068565b60998a905560b080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff166001600160a01b0388161515600160a81b908102919091179182905560ff910416156112a15760b080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038916021790555b60008960200151116113005760405162461bcd60e51b815260206004820152602260248201527f546f74616c2073656c6c696e6720616d6f756e742063616e2774206265207a65604482015261726f60f01b6064820152608401610786565b60b054600160a81b900460ff161561137b57856001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113769190613e1b565b61137e565b60125b60b3805460ff191660ff929092169190911790556040890151158015906113ac575088604001518960600151105b61141e5760405162461bcd60e51b815260206004820152602760248201527f456e64207072696365206d757374206265206c657373207468616e207374617260448201527f74207072696365000000000000000000000000000000000000000000000000006064820152608401610786565b8860a001518960800151111561149c5760405162461bcd60e51b815260206004820152603060248201527f536f66742d4361702073686f756c64206265206c657373207468616e206f722060448201527f657175616c20746f2068617264636170000000000000000000000000000000006064820152608401610786565b620186a08960a00151614e206114b29190613daf565b6114bc9190613ddc565b896080015110156115355760405162461bcd60e51b815260206004820152603460248201527f536f6674636170206d7573742062652067726561746572207468616e206f722060448201527f657175616c20323025206f6620486172646361700000000000000000000000006064820152608401610786565b608089015160b3546000919061154f9060ff16600a613da0565b8b6020015161155e9190613daf565b6115689190613ddc565b60a08b015160b3549192506000916115849060ff16600a613da0565b8c602001516115939190613daf565b61159d9190613ddc565b60208c015160b354919250906115b79060ff16600a613da0565b838d608001516115c79190613daf565b6115d19190613ddc565b146116435760405162461bcd60e51b8152602060048201526024808201527f536f6674436170202a20656e645072696365203d20546f74616c53616c65416d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610786565b60208b015160b3546116599060ff16600a613da0565b828d60a001516116699190613daf565b6116739190613ddc565b146116e65760405162461bcd60e51b815260206004820152602660248201527f68617264436170202a2073746172745072696365203d20546f74616c53616c6560448201527f416d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610786565b60008b60c0015111801561170157508a60e001518b60c00151105b61174d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d696e696d756d20627579206c696d6974000000000000006044820152606401610786565b428b610100015111801561176a57508a61012001518b6101000151105b6117b65760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610786565b8a61018001518b61010001518c61012001516117d29190613e3e565b116118455760405162461bcd60e51b815260206004820152603d60248201527f41756374696f6e206475726174696f6e206d757374206265206772656174657260448201527f207468616e20646563726561736520707269636520696e74657276616c0000006064820152608401610786565b60008b6101800151116118c05760405162461bcd60e51b815260206004820152602560248201527f507269636520646563726561736520696e74657276616c2063616e277420626560448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610786565b61c3508a602001511161193b5760405162461bcd60e51b815260206004820152602c60248201527f4c69717569646974792070657263656e74616765206d7573742062652067726560448201527f61746572207468616e20353000000000000000000000000000000000000000006064820152608401610786565b61012c8a6040015110156119b75760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d652063616e2774206265206c657373207468616e2035206d60448201527f696e7574730000000000000000000000000000000000000000000000000000006064820152608401610786565b885115611be657600089602001511180156119d85750620186a08960200151105b611a4a5760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420496e697469616c2052656c6561736520706563656e74616760448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610786565b6000896040015111611ac45760405162461bcd60e51b815260206004820152602960248201527f4379636c6520706563656e74616765206d75737420626520677265617465722060448201527f7468616e207a65726f00000000000000000000000000000000000000000000006064820152608401610786565b6000896060015111611b235760405162461bcd60e51b815260206004820152602260248201527f696e74657276616c206d7573742062652067726561746572207468616e207a65604482015261726f60f01b6064820152608401610786565b620186a089604001518a60200151611b3b9190613ca9565b1115611baf5760405162461bcd60e51b815260206004820152602c60248201527f53756d206f662054474520616e64206379636c652073686f756c64206265206c60448201527f657373207468616e2031303000000000000000000000000000000000000000006064820152608401610786565b885160ac805491151560ff1992831617905560208a015160ad5560408a015160ae5560608a015160af556098805490911660011790555b8660b060176101000a81548160ff0219169083151502179055508a609a60008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01559050508960a760008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550608082015181600401559050508615611d3f578a6101200151611d46565b8a61010001515b6101608c015260b1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f47656d706164447574636841756374696f6e0000000000000000000000000000604482015263ed1eee68906064016020604051808303816000875af1158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d9190613e51565b60b25560b080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b88151502179055611e5b846132ce565b50508015611ea3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b611eb76126a5565b610f5d60006132ce565b611ec96126ff565b611ed16126a5565b60a3544210801590611ee65750609e5460b454105b80611f075750600260b05460ff166003811115611f0557611f05613735565b145b611f795760405162461bcd60e51b815260206004820152602d60248201527f53616c65206973206e6f742063616e63656c6c6564206f7220656e642054696d60448201527f65206e6f742072656163686564000000000000000000000000000000000000006064820152608401610786565b609a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe69190613e51565b609a5460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190613dfe565b5050610f5d6001606655565b600054610100900460ff166120e55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610786565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e90349061212c908590600401613e6a565b6000604051808303818588803b15801561214557600080fd5b505af1158015612159573d6000803e3d6000fd5b50505050505050565b33600090815260b96020526040902060a35442108015906121865750609e5460b454105b806121a75750600260b05460ff1660038111156121a5576121a5613735565b145b6121f35760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f77656400000000000000000000006044820152606401610786565b60008160010154116122475760405162461bcd60e51b815260206004820152601560248201527f5573657220686173206e6f7420696e76657374656400000000000000000000006044820152606401610786565b600181018054600090915561225c3382612f6f565b5050565b60a2546000904210801561228b5750600260b05460ff16600381111561228857612288613735565b14155b6106f257600260b05460ff1660038111156122a8576122a8613735565b141580156122cd5750600360b05460ff1660038111156122ca576122ca613735565b14155b80156122da575060a25442115b6106ec575060b05460ff1690565b6122f06126a5565b60a581905560995460408051918252602082018390527f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c1910160405180910390a150565b61233c6126a5565b600260b05460ff16600381111561235557612355613735565b036123a25760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792063616e63656c6c6564000000000000000000006044820152606401610786565b600360b05460ff1660038111156123bb576123bb613735565b0361242e5760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a65000000000000000000000000000000000000000000000000006064820152608401610786565b60b0805460ff191660029081179091556099546040517fd26ba0bea04be3cb1cdcae574e19959ae0485ae01aa6d67adbac4545b2874de19261247292914290613eb8565b60405180910390a1565b6124846126a5565b805160005b818110156108745760006001600160a01b03168382815181106124ae576124ae613c07565b60200260200101516001600160a01b03160361250c5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610786565b6065600084838151811061252257612522613c07565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156125bc5760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610786565b6001606560008584815181106125d4576125d4613c07565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061261081613c33565b915050612489565b6126206126a5565b6001600160a01b03811661269c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610786565b610d13816132ce565b6033546001600160a01b03163314610f5d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610786565b6002606654036127515760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610786565b6002606655565b609e5460b35460009182916127719060ff16600a613da0565b609b5461277e9190613daf565b6127889190613ddc565b609f5460b3549192506000916127a29060ff16600a613da0565b609b546127af9190613daf565b6127b99190613ddc565b60a65460a25460a3549293506000926127d29190613e3e565b6127dc9190613ddc565b90506000816127eb8486613e3e565b6127f59190613ddc565b60a65460a25491925060009161280b9042613e3e565b6128159190613ddc565b9050828111156128225750815b60008111612834575091949350505050565b60006128408284613daf565b61284a9086613ca9565b979650505050505050565b6001600160a01b038116600090815260b96020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015260ac5460ff16156129c45760af5460608201516128ba9042613e3e565b10156129085760405162461bcd60e51b815260206004820152601760248201527f546f6b656e7320617265206e6f7420756e6c6f636b65640000000000000000006044820152606401610786565b805160ad54600091620186a09161291f9190613daf565b6129299190613ddc565b90506000612944836000015160ac60020154620186a061332d565b90506000609a600a015442106129895760af5460a454849184916129689042613e3e565b6129729190613ddc565b61297c9190613daf565b6129869190613ca9565b90505b83518111156129aa57604084015184516129a39190613e3e565b94506129bc565b60408401516129b99082613e3e565b94505b5050506129c9565b805191505b50919050565b60008060008060b4541115612f635760008060008060006129ee613425565b609a5460a75460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052939550919350169063095ea7b3906044016020604051808303816000875af1158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190613dfe565b5060b054600160a81b900460ff16612b385760a754609a546040517ff305d7190000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810184905260006044820181905260648201523060848201524260a482015291169063f305d71990849060c40160606040518083038185885af1158015612b07573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b2c9190613eda565b91965094509250612d02565b60b05460a75460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052610100909204169063095ea7b3906044016020604051808303816000875af1158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb69190613dfe565b5060b05460a75460405163095ea7b360e01b81526001600160a01b03918216600482015260248101859052610100909204169063095ea7b3906044016020604051808303816000875af1158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190613dfe565b5060a754609a5460b0546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015261010090910482166024820152604481018490526064810185905260006084820181905260a48201523060c48201524260e482015291169063e8e3370090610104016060604051808303816000875af1158015612cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfa9190613eda565b919650945092505b60ab8290556000612d116134bc565b6040516370a0823160e01b815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190613e51565b60aa5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925084169063095ea7b3906044016020604051808303816000875af1158015612dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfa9190613dfe565b5060aa546001600160a01b03166307279357612e1e6033546001600160a01b031690565b8560018560a76002015442612e339190613ca9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015290151560448401526064830152608482015260c060a4820152601060c48201527f47656d706164206c69717569646974790000000000000000000000000000000060e4820152610104016020604051808303816000875af1158015612ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f059190613e51565b50609954604080519182526001600160a01b038516602083015281018790527f42b2be570423941aea98deb91552197964540c09a640255b47194c1cdf34915f9060600160405180910390a150959994985092965092945050505050565b50600092839250829150565b60b054600160a81b900460ff16156130035760b05460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af1158015612fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffe9190613dfe565b505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612ffe573d6000803e3d6000fd5b600360b05460ff16600381111561305257613052613735565b1461309f5760405162461bcd60e51b815260206004820152601560248201527f53616c6520696e206e6f742066696e616c697a656400000000000000000000006044820152606401610786565b60b054600160a81b900460ff161561319f5760b0546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190613e51565b60b05460405163a9059cbb60e01b81523360048201526024810183905291925061010090046001600160a01b03169063a9059cbb906044015b6020604051808303816000875af115801561317b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190613dfe565b60405133904780156108fc02916000818181858888f19350505050158015610d13573d6000803e3d6000fd5b60b654609a546040516370a0823160e01b81523060048201526000926132499290916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561321f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132439190613e51565b90613720565b60b054909150600160b01b900460ff161561329557609a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb9060440161315c565b609a5460405163a9059cbb60e01b815261dead6004820152602481018390526001600160a01b039091169063a9059cbb9060440161315c565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008080600019858709858702925082811083820303915050806000036133675783828161335d5761335d613dc6565b049250505061341e565b8084116133b65760405162461bcd60e51b815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152606401610786565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000806000613432612758565b90506000620186a060b25460b45461344a9190613daf565b6134549190613ddc565b90506000620186a060a7600101548360b4546134709190613e3e565b61347a9190613daf565b6134849190613ddc565b60b35490915060009061349b9060ff16600a613da0565b6134a58584613daf565b6134af9190613ddc565b9196919550909350505050565b60b054600090600160a81b900460ff16156135d65760a7546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa15801561351b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353f9190613f08565b60b054609a546040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0361010090930483166004820152908216602482015291169063e6a43905906044015b602060405180830381865afa1580156135b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190613f08565b60a7546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa158015613620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136449190613f08565b60a754604080517fad5c464800000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169363e6a4390593169163ad5c46489160048083019260209291908290030181865afa1580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d29190613f08565b609a5460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03928316600482015291166024820152604401613595565b600061372c8284613e3e565b90505b92915050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061375f5761375f613735565b91905290565b6001600160a01b0381168114610d1357600080fd5b803561378581613765565b919050565b60006020828403121561379c57600080fd5b813561341e81613765565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156137e1576137e16137a7565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613810576138106137a7565b604052919050565b6000602080838503121561382b57600080fd5b823567ffffffffffffffff8082111561384357600080fd5b818501915085601f83011261385757600080fd5b813581811115613869576138696137a7565b8060051b915061387a8483016137e7565b818152918301840191848101908884111561389457600080fd5b938501935b838510156138be57843592506138ae83613765565b8282529385019390850190613899565b98975050505050505050565b6000602082840312156138dc57600080fd5b5035919050565b600060a082840312156138f557600080fd5b60405160a0810181811067ffffffffffffffff82111715613918576139186137a7565b604052905080823561392981613765565b808252506020830135602082015260408301356040820152606083013561394f81613765565b6060820152608092830135920191909152919050565b8015158114610d1357600080fd5b803561378581613965565b60006080828403121561399057600080fd5b6040516080810181811067ffffffffffffffff821117156139b3576139b36137a7565b60405290508082356139c481613965565b808252506020830135602082015260408301356040820152606083013560608201525092915050565b6000806000806000806000806000898b03610380811215613a0d57600080fd5b8a3599506101a080601f1983011215613a2557600080fd5b613a2d6137bd565b9150613a3b60208d0161377a565b825260408c0135602083015260608c0135604083015260808c0135606083015260a08c0135608083015260c08c013560a083015260e08c013560c0830152610100808d013560e0840152610120808e0135828501526101409150818e01358185015250610160808e0135828501526101809150818e01358185015250818d013581840152505080985050613ad38b6101c08c016138e3565b9650613ae38b6102608c0161397e565b9550613af26102e08b0161377a565b9450613b016103008b01613973565b9350613b106103208b01613973565b9250613b1f6103408b0161377a565b9150613b2e6103608b0161377a565b90509295985092959850929598565b60008060408385031215613b5057600080fd5b8235613b5b81613765565b915060208381013567ffffffffffffffff80821115613b7957600080fd5b818601915086601f830112613b8d57600080fd5b813581811115613b9f57613b9f6137a7565b613bb1601f8201601f191685016137e7565b91508082528784828501011115613bc757600080fd5b80848401858401376000848284010152508093505050509250929050565b60048110613bf557613bf5613735565b9052565b6020810161372f8284613be5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c4557613c45613c1d565b5060010190565b604080825283519082018190526000906020906060840190828701845b82811015613c8e5781516001600160a01b031684529284019290840190600101613c69565b5050506001600160a01b039490941692019190915250919050565b8082018082111561372f5761372f613c1d565b600181815b80851115613cf7578160001904821115613cdd57613cdd613c1d565b80851615613cea57918102915b93841c9390800290613cc1565b509250929050565b600082613d0e5750600161372f565b81613d1b5750600061372f565b8160018114613d315760028114613d3b57613d57565b600191505061372f565b60ff841115613d4c57613d4c613c1d565b50506001821b61372f565b5060208310610133831016604e8410600b8410161715613d7a575081810a61372f565b613d848383613cbc565b8060001904821115613d9857613d98613c1d565b029392505050565b600061372c60ff841683613cff565b808202811582820484141761372f5761372f613c1d565b634e487b7160e01b600052601260045260246000fd5b600082613df957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613e1057600080fd5b815161341e81613965565b600060208284031215613e2d57600080fd5b815160ff8116811461341e57600080fd5b8181038181111561372f5761372f613c1d565b600060208284031215613e6357600080fd5b5051919050565b600060208083528351808285015260005b81811015613e9757858101830151858201604001528201613e7b565b506000604082860101526040601f19601f8301168501019250505092915050565b83815260608101613ecc6020830185613be5565b826040830152949350505050565b600080600060608486031215613eef57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215613f1a57600080fd5b815161341e8161376556fea2646970667358221220ab0ff0cde3849f83f0de97339f55b56a66f090544b11a08641d4b963e3a11a1c64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "__GempadDutchAuction_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256),address,bool,bool,address,address)": {
        "params": {
          "_feeReceiver": ".",
          "_fundToken": ".",
          "_id": ".",
          "_isPrivateMode": ".",
          "_liquidity": "add liquidaty terms",
          "_owner": ".",
          "_refundType": "burn token balance or refund (0 refund and 1 burn)",
          "_vesting": "claim funds terms",
          "info": "."
        }
      },
      "addWhitelist(address[])": {
        "params": {
          "_participants": "address of users"
        }
      },
      "buyToken(uint256)": {
        "params": {
          "_amount": "in purchase currency"
        }
      },
      "enablePublicSale(uint256)": {
        "params": {
          "_startTime": "start time of public sale time if it is equalo to sale end time that means its priavte sale."
        }
      },
      "getCurrentSatus()": {
        "returns": {
          "status": " current selling status"
        }
      },
      "isWhitelisted(address)": {
        "returns": {
          "_0": "bool return whitelist status of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelist(address[])": {
        "params": {
          "_participants": "address of users"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__GempadDutchAuction_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),(bool,uint256,uint256,uint256),address,bool,bool,address,address)": {
        "notice": "initailze core params of auction"
      },
      "addWhitelist(address[])": {
        "notice": "add users to whitelist"
      },
      "buyToken(uint256)": {
        "notice": "user buy Tokens"
      },
      "cancel()": {
        "notice": "cancel the sale"
      },
      "claimTokens()": {
        "notice": "called by the investor the claim the tokens against investment as per vesting terms"
      },
      "claimUserRefund()": {
        "notice": "called by investor to get refund incase of sale cancellation or failure to reach soft cap"
      },
      "enablePublicSale(uint256)": {
        "notice": "enable public or private sale time."
      },
      "finalize()": {
        "notice": "finalize the sale and withdraw sell funds and sell token balance"
      },
      "getCurrentMode()": {
        "notice": "called by owner to get refund incase of sale cancellation or failure to reach soft cap"
      },
      "removeWhitelist(address[])": {
        "notice": "remove usres from whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23634,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 23637,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24329,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23506,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 23626,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1995,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "_whitelist",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23810,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 23879,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2168,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "isInitialized",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 2170,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "Id",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "auction",
        "offset": 0,
        "slot": "154",
        "type": "t_struct(AuctionDetails)2241_storage"
      },
      {
        "astId": 2176,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "liquidity",
        "offset": 0,
        "slot": "167",
        "type": "t_struct(LiquidityDetails)2253_storage"
      },
      {
        "astId": 2179,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "vesting",
        "offset": 0,
        "slot": "172",
        "type": "t_struct(VestingDetails)2262_storage"
      },
      {
        "astId": 2182,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "currentStatus",
        "offset": 0,
        "slot": "176",
        "type": "t_enum(Status)2276"
      },
      {
        "astId": 2185,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "fundToken",
        "offset": 1,
        "slot": "176",
        "type": "t_contract(IERC20Extented)4341"
      },
      {
        "astId": 2187,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "fundByTokens",
        "offset": 21,
        "slot": "176",
        "type": "t_bool"
      },
      {
        "astId": 2189,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "refundType",
        "offset": 22,
        "slot": "176",
        "type": "t_bool"
      },
      {
        "astId": 2191,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "isPrivateMode",
        "offset": 23,
        "slot": "176",
        "type": "t_bool"
      },
      {
        "astId": 2193,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "177",
        "type": "t_address"
      },
      {
        "astId": 2195,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "tokenFee",
        "offset": 0,
        "slot": "178",
        "type": "t_uint256"
      },
      {
        "astId": 2197,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "decimals",
        "offset": 0,
        "slot": "179",
        "type": "t_uint8"
      },
      {
        "astId": 2199,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "totalRaised",
        "offset": 0,
        "slot": "180",
        "type": "t_uint256"
      },
      {
        "astId": 2201,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "181",
        "type": "t_uint256"
      },
      {
        "astId": 2203,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "totalTokensSold",
        "offset": 0,
        "slot": "182",
        "type": "t_uint256"
      },
      {
        "astId": 2205,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "tokenToReceive",
        "offset": 0,
        "slot": "183",
        "type": "t_uint256"
      },
      {
        "astId": 2208,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "investors",
        "offset": 0,
        "slot": "184",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2213,
        "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
        "label": "userInfo",
        "offset": 0,
        "slot": "185",
        "type": "t_mapping(t_address,t_struct(UserDetails)2271_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Extented)4341": {
        "encoding": "inplace",
        "label": "contract IERC20Extented",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)4477": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(Status)2276": {
        "encoding": "inplace",
        "label": "enum GempadDutchAuction.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserDetails)2271_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GempadDutchAuction.UserDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDetails)2271_storage"
      },
      "t_struct(AuctionDetails)2241_storage": {
        "encoding": "inplace",
        "label": "struct GempadDutchAuction.AuctionDetails",
        "members": [
          {
            "astId": 2216,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Extented)4341"
          },
          {
            "astId": 2218,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "totalSaleAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2220,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "startPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2222,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "endPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2224,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "softCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2226,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "hardCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2228,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "minBuyLimit",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2230,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "maxBuyLimit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2232,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2234,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "endTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2236,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "finalizeTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 2238,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "publicSaleTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 2240,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "decreaseInterval",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LiquidityDetails)2253_storage": {
        "encoding": "inplace",
        "label": "struct GempadDutchAuction.LiquidityDetails",
        "members": [
          {
            "astId": 2244,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IUniswapV2Router02)4477"
          },
          {
            "astId": 2246,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "liquidityPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2248,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "lockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2250,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "locker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2252,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "liquidityAdded",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserDetails)2271_storage": {
        "encoding": "inplace",
        "label": "struct GempadDutchAuction.UserDetails",
        "members": [
          {
            "astId": 2264,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "userTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2266,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "userInvest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2268,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "userCalimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2270,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VestingDetails)2262_storage": {
        "encoding": "inplace",
        "label": "struct GempadDutchAuction.VestingDetails",
        "members": [
          {
            "astId": 2255,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "isVestingEnable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2257,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "TGEPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2259,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "cyclePercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2261,
            "contract": "@gempad/dutchauction/contracts/GempadDutchAuction.sol:GempadDutchAuction",
            "label": "cycleInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}