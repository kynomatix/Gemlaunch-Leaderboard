{
  "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GempadSubscriptionPool.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Purachsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "UpdateTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "account",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extented",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userHardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalizeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadSubscriptionPool.SubscriptionPoolDetails",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "locker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAdded",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadSubscriptionPool.LiquidityDetails",
          "name": "_liquidity",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_fundToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPrivateMode",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isRefund",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "__GempadSubscriptionPool_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "__ServicePayer_init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalFunds",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "calculateShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUserRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStatus",
      "outputs": [
        {
          "internalType": "enum GempadSubscriptionPool.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "enablePublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundByTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundToken",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInvestors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMode",
      "outputs": [
        {
          "internalType": "enum GempadSubscriptionPool.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSatus",
      "outputs": [
        {
          "internalType": "enum GempadSubscriptionPool.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurplusData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAllocated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "surplusTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSurplusFunds",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "leftInvestors",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GempadSubscriptionPool.tokenDistribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserRemainingFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IERC20Extented",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalizeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publicSaleTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_participants",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        }
      ],
      "name": "updateCalculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userInvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb30a58a4b74d023d22c49f0d0271069038f7a8dcb5e7c9c6d468883d3941be6b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "transactionIndex": 0,
    "gasUsed": "3383460",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1b69bf654d39349ad9dc479fca1ffadc163e2caa56b149ca68c999e41923b877",
    "transactionHash": "0xb30a58a4b74d023d22c49f0d0271069038f7a8dcb5e7c9c6d468883d3941be6b",
    "logs": [],
    "blockNumber": 27,
    "cumulativeGasUsed": "3383460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19bc0a812d989bd2b38ed640ae41bece",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GempadSubscriptionPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Purachsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadSubscriptionPool.SubscriptionPoolDetails\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadSubscriptionPool.LiquidityDetails\",\"name\":\"_liquidity\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_fundToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPrivateMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isRefund\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"__GempadSubscriptionPool_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"__ServicePayer_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFunds\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUserRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enum GempadSubscriptionPool.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"enablePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundByTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"enum GempadSubscriptionPool.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSatus\",\"outputs\":[{\"internalType\":\"enum GempadSubscriptionPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurplusData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surplusTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSurplusFunds\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"leftInvestors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GempadSubscriptionPool.tokenDistribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserRemainingFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IERC20Extented\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"updateCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"__GempadSubscriptionPool_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),address,bool,bool,address,address)\":{\"params\":{\"_feeReceiver\":\".\",\"_fundToken\":\".\",\"_id\":\".\",\"_isPrivateMode\":\".\",\"_isRefund\":\"refund type burn or refund\",\"_liquidity\":\".\",\"_owner\":\".\",\"info\":\".\"}},\"addWhitelist(address[])\":{\"params\":{\"_participants\":\"address of users\"}},\"buyToken(uint256)\":{\"params\":{\"_amount\":\"amount in purchase currency\"}},\"calculateShare(uint256,uint256,address[],uint256[])\":{\"params\":{\"_amounts\":\".\",\"_contributors\":\".\",\"_totalFunds\":\".\",\"_totalTokens\":\".\"}},\"enablePublicSale(uint256)\":{\"params\":{\"_startTime\":\"start time of public sale time if it is equalo to sale end time that means its priavte sale.\"}},\"getAllInvestors()\":{\"returns\":{\"_0\":\"uint256  return the array of all investors\"}},\"getCurrentMode()\":{\"returns\":{\"mode\":\" the mode of sale right now\"}},\"getCurrentSatus()\":{\"returns\":{\"status\":\" current selling status\"}},\"getDistribution()\":{\"returns\":{\"_0\":\"uint256  totalAllocated\",\"_1\":\"uint256  surplusTokens\",\"_2\":\"uint256  totalSurplusFunds\"}},\"getSurplusData()\":{\"returns\":{\"_0\":\"tokenDistribution  surplus tokens and funds after distribution\"}},\"getUserRemainingFunds()\":{\"returns\":{\"_0\":\"uint256  .\"}},\"isWhitelisted(address)\":{\"returns\":{\"_0\":\"bool return whitelist status of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelist(address[])\":{\"params\":{\"_participants\":\"address of users\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTime(uint256,uint256)\":{\"params\":{\"_endTime\":\".\",\"_startTime\":\".\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCalculation(address[])\":{\"details\":\"distribution completes in three phases\",\"params\":{\"_contributors\":\"investors\"},\"returns\":{\"_0\":\"uint256  .\",\"_1\":\"uint256  .\",\"_2\":\"address[]  .\",\"_3\":\"uint256[]  .\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__GempadSubscriptionPool_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),address,bool,bool,address,address)\":{\"notice\":\"initialization of core params\"},\"addWhitelist(address[])\":{\"notice\":\"add users to whitelist\"},\"buyToken(uint256)\":{\"notice\":\"user buy Tokens\"},\"calculateShare(uint256,uint256,address[],uint256[])\":{\"notice\":\"after 1st two phases , its finnl phase where remaing user with amount in account get tokens\"},\"cancel()\":{\"notice\":\"cancel the sale\"},\"claimTokens()\":{\"notice\":\"called by the investor the claim the tokens against investment.\"},\"claimUserRefund()\":{\"notice\":\"called by investor to get refund incase of sale cancellation or failure to reach soft cap\"},\"enablePublicSale(uint256)\":{\"notice\":\"enable public or private sale time.\"},\"finalize()\":{\"notice\":\"finalize the sale and withdraw raised funds\"},\"getUserRemainingFunds()\":{\"notice\":\"pout of total invested by user, how much amount left after paying for allocated tokens\"},\"removeWhitelist(address[])\":{\"notice\":\"remove usres from whitelist\"},\"setTime(uint256,uint256)\":{\"notice\":\"update start and end time before sale start\"},\"updateCalculation(address[])\":{\"notice\":\"update the user tokens share as per total investment\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol\":\"GempadSubscriptionPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/services/contracts/ServicePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\n\\r\\ninterface IPayable {\\r\\n    function pay(string memory serviceName) external payable;\\r\\n\\r\\n    function getFee(string memory serviceName) external returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ServicePayer\\r\\n * @dev Implementation of the ServicePayer\\r\\n */\\r\\nabstract contract ServicePayer is Initializable {\\r\\n    function __ServicePayer_init(\\r\\n        address payable receiver,\\r\\n        string memory serviceName\\r\\n    ) public payable onlyInitializing {\\r\\n        IPayable(receiver).pay{ value: msg.value }(serviceName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd4167fa676ef90885db6c3e159cfdf1f4784085d1a587989a41eeb74339f169\",\"license\":\"MIT\"},\"@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport { ServicePayer, IPayable } from '@gempad/services/contracts/ServicePayer.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport './interfaces/IERC20Extented.sol';\\r\\nimport './interfaces/IUniswapV2Factory.sol';\\r\\nimport './interfaces/IUniswapV2Pair.sol';\\r\\nimport './interfaces/IUniswapV2Router02.sol';\\r\\nimport './interfaces/IGempadVestingLock.sol';\\r\\nimport './GempadWhitelist.sol';\\r\\nimport 'hardhat/console.sol';\\r\\n\\r\\ncontract GempadSubscriptionPool is ServicePayer, GempadWhitelist, ReentrancyGuardUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 public Id;\\r\\n    bool public isInitialized = false;\\r\\n\\r\\n    SubscriptionPoolDetails public pool;\\r\\n    LiquidityDetails public liquidity;\\r\\n    Status public currentStatus;\\r\\n\\r\\n    tokenDistribution private distribution;\\r\\n\\r\\n    IERC20Extented public fundToken;\\r\\n\\r\\n    bool public fundByTokens;\\r\\n\\r\\n    uint8 private decimals;\\r\\n\\r\\n    // bool private canFinalize;\\r\\n    bool private canCalculate;\\r\\n\\r\\n    bool private isPrivateMode;\\r\\n    bool private isRefund; //true refund and false burn\\r\\n\\r\\n    address private feeReceiver;\\r\\n    uint256 private tokenFee;\\r\\n\\r\\n    uint256 public totalRaised;\\r\\n    uint256 public totalContribution;\\r\\n\\r\\n    uint256 public totalClaimed;\\r\\n\\r\\n    address[] private investors;\\r\\n\\r\\n    mapping(address => UserDetails) public userInfo;\\r\\n\\r\\n    struct SubscriptionPoolDetails {\\r\\n        IERC20Extented token;\\r\\n        uint256 hardCap;\\r\\n        uint256 softCap;\\r\\n        uint256 userHardCap;\\r\\n        uint256 sellRate;\\r\\n        uint256 listingRate;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 finalizeTime;\\r\\n        uint256 publicSaleTime;\\r\\n    }\\r\\n    struct LiquidityDetails {\\r\\n        IUniswapV2Router02 router;\\r\\n        uint256 liquidityPercent;\\r\\n        uint256 lockTime;\\r\\n        address locker;\\r\\n        uint256 liquidityAdded;\\r\\n    }\\r\\n\\r\\n    struct UserDetails {\\r\\n        uint256 userInvest;\\r\\n        uint256 userDeposit;\\r\\n        uint256 userAllocation;\\r\\n        uint256 userClaimed;\\r\\n    }\\r\\n\\r\\n    struct tokenDistribution {\\r\\n        uint256 totalAllocated;\\r\\n        uint256 surplusTokens;\\r\\n        uint256 totalSurplusFunds;\\r\\n        address[] leftInvestors;\\r\\n        uint256[] amounts;\\r\\n    }\\r\\n\\r\\n    enum Status {\\r\\n        INCOMMING,\\r\\n        ACTIVE,\\r\\n        CANCELLED,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    enum Mode {\\r\\n        PENDING,\\r\\n        PRIVATE,\\r\\n        PUBLIC\\r\\n    }\\r\\n\\r\\n    event Purachsed(uint256 Id, address sender, uint256 _amount);\\r\\n    event PublicSaleEnabled(uint256 Id, uint256 time);\\r\\n    event liquidityAdded(uint256 Id, address pair, uint256 liquidity);\\r\\n    event UpdateTime(uint256 Id, uint256 start, uint256 end);\\r\\n    event Cancelled(uint256 Id, Status status);\\r\\n\\r\\n    /**\\r\\n     * @notice  initialization of core params\\r\\n     * @param   _id  .\\r\\n     * @param   info  .\\r\\n     * @param   _liquidity  .\\r\\n     * @param   _fundToken  .\\r\\n     * @param   _isPrivateMode  .\\r\\n     * @param   _isRefund  refund type burn or refund\\r\\n     * @param   _feeReceiver  .\\r\\n     * @param   _owner  .\\r\\n     */\\r\\n    function __GempadSubscriptionPool_init(\\r\\n        uint256 _id,\\r\\n        SubscriptionPoolDetails memory info,\\r\\n        LiquidityDetails memory _liquidity,\\r\\n        address _fundToken,\\r\\n        bool _isPrivateMode,\\r\\n        bool _isRefund,\\r\\n        address payable _feeReceiver,\\r\\n        address _owner\\r\\n    ) public payable initializer {\\r\\n        require(!isInitialized, 'Err: Already initialized');\\r\\n        ServicePayer.__ServicePayer_init(_feeReceiver, 'GempadSubscriptionPool');\\r\\n\\r\\n        Id = _id;\\r\\n\\r\\n        //set custom Investment Token\\r\\n        fundByTokens = _fundToken != address(0);\\r\\n        if (fundByTokens) {\\r\\n            fundToken = IERC20Extented(_fundToken);\\r\\n        }\\r\\n\\r\\n        decimals = info.token.decimals();\\r\\n\\r\\n        require(info.listingRate < info.sellRate, 'Listing rate must be less than sell rate');\\r\\n        require(\\r\\n            (info.softCap >= (info.hardCap * 51e3) / 100e3) && (info.softCap < info.hardCap),\\r\\n            'SoftCap must be greater than 50% of hardh cap'\\r\\n        );\\r\\n        require(info.userHardCap <= info.hardCap, 'Invalid User max buy limit');\\r\\n        require(info.startTime > block.timestamp && info.startTime < info.endTime, 'Invalid start time');\\r\\n\\r\\n        require(\\r\\n            _liquidity.liquidityPercent > 50e3 && _liquidity.liquidityPercent <= 100e3,\\r\\n            'Invalid liquidity percentage'\\r\\n        );\\r\\n        require(_liquidity.lockTime >= 300, \\\"Lock time can't be less than 5 minuts\\\");\\r\\n\\r\\n        liquidity = _liquidity;\\r\\n        pool = info;\\r\\n        // Initialize the public sale start time;\\r\\n        pool.publicSaleTime = (_isPrivateMode) ? info.endTime : info.startTime;\\r\\n        //whitelisting feature status\\r\\n        isPrivateMode = _isPrivateMode;\\r\\n        isRefund = _isRefund;\\r\\n\\r\\n        // Initialize fee and refund type\\r\\n        feeReceiver = _feeReceiver;\\r\\n        tokenFee = IPayable(feeReceiver).getFee('GempadSubscriptionPool');\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n        isInitialized = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  user buy Tokens\\r\\n     * @param   _amount  amount in purchase currency\\r\\n     */\\r\\n    function buyToken(uint256 _amount) external payable nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(block.timestamp >= pool.startTime && block.timestamp <= pool.endTime, 'Sale is not active');\\r\\n\\r\\n        if (block.timestamp < pool.publicSaleTime) {\\r\\n            require(_whitelist[msg.sender], 'User is not whitelisted');\\r\\n        }\\r\\n\\r\\n        if (user.userInvest <= 0) investors.push(msg.sender);\\r\\n        user.userInvest += _amount;\\r\\n\\r\\n        // Update the total sale amount\\r\\n        totalContribution += _amount;\\r\\n\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        } else {\\r\\n            // Ensure that the sender has sent enough Ether\\r\\n            require(msg.value == _amount, 'Insufficient funds sent');\\r\\n        }\\r\\n        emit Purachsed(Id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  enable public or private sale time.\\r\\n     * @param   _startTime   start time of public sale time if it is equalo to sale end time that means its priavte sale.\\r\\n     */\\r\\n    function enablePublicSale(uint256 _startTime) external onlyOwner {\\r\\n        pool.publicSaleTime = _startTime;\\r\\n\\r\\n        emit PublicSaleEnabled(Id, pool.publicSaleTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  cancel the sale\\r\\n     */\\r\\n    function cancel() external onlyOwner {\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale already cancelled');\\r\\n        require(currentStatus != Status.CLOSED, 'Sale cannot be cancelled after finalize');\\r\\n\\r\\n        currentStatus = Status.CANCELLED;\\r\\n\\r\\n        emit Cancelled(Id, currentStatus);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  update the user tokens share as per total investment\\r\\n     * @dev     distribution completes in three phases\\r\\n     * @param   _contributors   investors\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     * @return  address[]  .\\r\\n     * @return  uint256[]  .\\r\\n     */\\r\\n    function updateCalculation(\\r\\n        address[] memory _contributors\\r\\n    ) public onlyOwner returns (uint256, uint256, address[] memory, uint256[] memory) {\\r\\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\\r\\n        require(\\r\\n            (block.timestamp > pool.endTime && totalContribution >= scap) || totalContribution >= scap,\\r\\n            'Sale End Time or cap not reached'\\r\\n        );\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\\r\\n\\r\\n        // uint256 length = investors.length;\\r\\n        uint256 length = _contributors.length;\\r\\n\\r\\n        for (uint i = 0; i < length; i++) {\\r\\n            // UserDetails storage user = userInfo[investors[i]];\\r\\n            UserDetails storage user = userInfo[_contributors[i]];\\r\\n\\r\\n            require(user.userInvest > 0, 'Invalid User');\\r\\n\\r\\n            uint256 allocation = (user.userInvest * pool.hardCap) / totalContribution;\\r\\n            if (allocation > pool.userHardCap) {\\r\\n                allocation = pool.userHardCap;\\r\\n            }\\r\\n\\r\\n            uint256 value = (allocation * 1e18) / pool.sellRate;\\r\\n            user.userDeposit = value;\\r\\n            user.userAllocation = allocation;\\r\\n            distribution.totalAllocated += user.userAllocation;\\r\\n            totalRaised += value;\\r\\n\\r\\n            if (user.userAllocation < pool.userHardCap && user.userDeposit < user.userInvest) {\\r\\n                distribution.totalSurplusFunds += (user.userInvest - user.userDeposit);\\r\\n                // distribution.leftInvestors.push(investors[i]);\\r\\n                distribution.leftInvestors.push(_contributors[i]);\\r\\n                distribution.amounts.push(user.userInvest - user.userDeposit);\\r\\n\\r\\n                distribution.totalSurplusFunds += (user.userInvest - user.userDeposit);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        canCalculate = true;\\r\\n\\r\\n        distribution.surplusTokens = pool.hardCap - distribution.totalAllocated;\\r\\n        // distribution.totalSurplusFunds = totalContribution - totalRaised;\\r\\n\\r\\n        return (\\r\\n            distribution.totalSurplusFunds,\\r\\n            distribution.surplusTokens,\\r\\n            distribution.leftInvestors,\\r\\n            distribution.amounts\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  after 1st two phases , its finnl phase where remaing user with amount in account get tokens\\r\\n     * @param   _totalTokens  .\\r\\n     * @param   _totalFunds  .\\r\\n     * @param   _contributors  .\\r\\n     * @param   _amounts  .\\r\\n     */\\r\\n    function calculateShare(\\r\\n        uint256 _totalTokens,\\r\\n        uint256 _totalFunds,\\r\\n        address[] memory _contributors,\\r\\n        uint256[] memory _amounts\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        require(_contributors.length == _amounts.length, 'length mismatch');\\r\\n\\r\\n        require(canCalculate, 'Allocation not updated');\\r\\n\\r\\n        uint256 length = _contributors.length;\\r\\n\\r\\n        for (uint i = 0; i < length; i++) {\\r\\n            UserDetails storage user = userInfo[_contributors[i]];\\r\\n\\r\\n            if (user.userDeposit < user.userInvest && user.userAllocation < pool.userHardCap) {\\r\\n                uint256 allocation = (_amounts[i] * _totalTokens) / _totalFunds;\\r\\n\\r\\n                if ((user.userAllocation + allocation) > pool.userHardCap) {\\r\\n                    allocation = pool.userHardCap - user.userAllocation;\\r\\n                }\\r\\n\\r\\n                require(user.userAllocation + allocation <= pool.userHardCap, 'User hardCap reached');\\r\\n\\r\\n                uint256 value = (allocation * 1e18) / pool.sellRate;\\r\\n\\r\\n                user.userDeposit += value;\\r\\n\\r\\n                user.userAllocation += allocation;\\r\\n\\r\\n                distribution.totalAllocated += allocation;\\r\\n\\r\\n                totalRaised += value;\\r\\n\\r\\n                if (user.userAllocation < pool.userHardCap && user.userDeposit < user.userInvest) {\\r\\n                    distribution.leftInvestors.push(_contributors[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        distribution.totalSurplusFunds = totalContribution - totalRaised;\\r\\n        distribution.surplusTokens = pool.hardCap - distribution.totalAllocated;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  uint256  totalAllocated\\r\\n     * @return  uint256  surplusTokens\\r\\n     * @return  uint256  totalSurplusFunds\\r\\n     */\\r\\n    function getDistribution() public view returns (uint256, uint256, uint256) {\\r\\n        return (distribution.totalAllocated, distribution.surplusTokens, distribution.totalSurplusFunds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  tokenDistribution  surplus tokens and funds after distribution\\r\\n     */\\r\\n    function getSurplusData() public view returns (tokenDistribution memory) {\\r\\n        return distribution;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  finalize the sale and withdraw raised funds\\r\\n     */\\r\\n    function finalize() external onlyOwner nonReentrant {\\r\\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\\r\\n\\r\\n        // require(canFinalize, 'Finalization not approved');\\r\\n        require(\\r\\n            (block.timestamp > pool.endTime && totalContribution >= scap) || totalContribution >= scap,\\r\\n            'Sale End Time or cap not reached'\\r\\n        );\\r\\n        require(currentStatus != Status.CLOSED, 'Sale already finalized');\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale CANCELLED');\\r\\n\\r\\n        currentStatus = Status.CLOSED;\\r\\n        pool.finalizeTime = block.timestamp;\\r\\n\\r\\n        uint256 feeAmount = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        addLiquidity();\\r\\n\\r\\n        //transfer token fee;\\r\\n        _transferFunds(feeReceiver, feeAmount);\\r\\n\\r\\n        withdrawFunds();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  withdraw the funds raised\\r\\n     */\\r\\n    function withdrawFunds() internal {\\r\\n        uint256 amount = (fundByTokens) ? fundToken.balanceOf(address(this)) : address(this).balance;\\r\\n\\r\\n        uint256 withdrawable = amount - (totalContribution - totalRaised);\\r\\n\\r\\n        _transferFunds(msg.sender, withdrawable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by the investor the claim the tokens against investment.\\r\\n     */\\r\\n    function claimTokens() external nonReentrant {\\r\\n        UserDetails storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(currentStatus != Status.CANCELLED, 'Sale in cancelled');\\r\\n        require(currentStatus == Status.CLOSED, 'Sale is not finalized');\\r\\n\\r\\n        require((user.userClaimed + user.userAllocation) <= user.userAllocation, 'All tokens claimed');\\r\\n\\r\\n        user.userClaimed = user.userAllocation;\\r\\n\\r\\n        totalClaimed += user.userAllocation;\\r\\n\\r\\n        uint256 allocation = (user.userAllocation * (10 ** decimals)) / 1e18;\\r\\n\\r\\n        _transferFunds(msg.sender, (user.userInvest - user.userDeposit));\\r\\n\\r\\n        pool.token.transfer(msg.sender, allocation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  called by investor to get refund incase of sale cancellation or failure to reach soft cap\\r\\n     */\\r\\n    function claimUserRefund() external {\\r\\n        UserDetails storage info = userInfo[msg.sender];\\r\\n        uint256 scap = (pool.softCap * 1e18) / pool.sellRate;\\r\\n\\r\\n        require(\\r\\n            (block.timestamp >= pool.endTime && totalContribution < scap) ||\\r\\n                currentStatus == Status.CANCELLED,\\r\\n            'Refund is not allowed'\\r\\n        );\\r\\n        require(info.userInvest > 0, 'User has not invested');\\r\\n\\r\\n        uint256 refund = info.userInvest;\\r\\n\\r\\n        info.userInvest = 0;\\r\\n        _transferFunds(msg.sender, refund);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  update start and end time before sale start\\r\\n     * @param   _startTime  .\\r\\n     * @param   _endTime  .\\r\\n     */\\r\\n    function setTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        require(block.timestamp < pool.startTime, 'Sale already started');\\r\\n        require(_startTime > block.timestamp && _startTime < _endTime, 'Invalid start time');\\r\\n\\r\\n        pool.startTime = _startTime;\\r\\n        pool.endTime = _endTime;\\r\\n\\r\\n        emit UpdateTime(Id, _startTime, _endTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  pout of total invested by user, how much amount left after paying for allocated tokens\\r\\n     * @return  uint256  .\\r\\n     */\\r\\n    function getUserRemainingFunds() public pure returns (uint256) {\\r\\n        UserDetails memory user;\\r\\n        return user.userInvest - user.userDeposit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  pairAddress  returnd the pair address to add liquidity.\\r\\n     */\\r\\n    function getTokenPair() internal view returns (address pairAddress) {\\r\\n        if (fundByTokens) {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                address(fundToken),\\r\\n                address(pool.token)\\r\\n            );\\r\\n        } else {\\r\\n            pairAddress = IUniswapV2Factory(liquidity.router.factory()).getPair(\\r\\n                liquidity.router.WETH(),\\r\\n                address(pool.token)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  to get share of sell tokens and purchase currency to create pair and add liquidity\\r\\n     * @return  share  sell tokens share\\r\\n     * @return  tokens  purchase currency share\\r\\n     */\\r\\n    function getTokenShare() internal view returns (uint256 share, uint256 tokens) {\\r\\n        uint256 fee = (totalRaised * tokenFee) / 100e3;\\r\\n\\r\\n        share = ((totalRaised - fee) * liquidity.liquidityPercent) / 100e3;\\r\\n\\r\\n        tokens = (share * pool.listingRate) / (1e36 / 10 ** decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  add liquidity to given dex as per liquidity terms and also lock the LP tokens\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     * @return  uint256  .\\r\\n     */\\r\\n    function addLiquidity() internal returns (uint256, uint256, uint256) {\\r\\n        if (totalRaised > 0) {\\r\\n            uint256 amountToken;\\r\\n            uint256 amountETH;\\r\\n            uint256 _liquidity;\\r\\n\\r\\n            (uint256 fundTokenShare, uint256 sellTokenShare) = getTokenShare();\\r\\n\\r\\n            pool.token.approve(address(liquidity.router), sellTokenShare);\\r\\n\\r\\n            if (!fundByTokens) {\\r\\n                // Create a DEX pair for this token\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidityETH{\\r\\n                    value: fundTokenShare\\r\\n                }(address(pool.token), sellTokenShare, 0, 0, address(this), block.timestamp);\\r\\n            } else {\\r\\n                fundToken.approve(address(liquidity.router), fundTokenShare);\\r\\n\\r\\n                (amountToken, amountETH, _liquidity) = liquidity.router.addLiquidity(\\r\\n                    address(pool.token),\\r\\n                    address(fundToken),\\r\\n                    sellTokenShare,\\r\\n                    fundTokenShare,\\r\\n                    0,\\r\\n                    0,\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            }\\r\\n\\r\\n            liquidity.liquidityAdded = fundTokenShare;\\r\\n\\r\\n            address pairAddress = getTokenPair();\\r\\n\\r\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n\\r\\n            uint256 pairBalance = pair.balanceOf(address(this));\\r\\n\\r\\n            pair.approve(liquidity.locker, pairBalance);\\r\\n\\r\\n            IGempadVestingLock(liquidity.locker).lock(\\r\\n                owner(),\\r\\n                pairAddress,\\r\\n                true,\\r\\n                pairBalance,\\r\\n                (block.timestamp + liquidity.lockTime),\\r\\n                'Gempad liquidity'\\r\\n            );\\r\\n\\r\\n            emit liquidityAdded(Id, pairAddress, _liquidity);\\r\\n\\r\\n            return (amountToken, amountETH, _liquidity);\\r\\n        }\\r\\n\\r\\n        return (0, 0, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  mode  the mode of sale right now\\r\\n     */\\r\\n    function getCurrentMode() public view returns (Mode mode) {\\r\\n        mode = (block.timestamp < pool.startTime)\\r\\n            ? Mode.PENDING //pending\\r\\n            : (block.timestamp >= pool.startTime && block.timestamp < pool.publicSaleTime)\\r\\n            ? Mode.PRIVATE //private\\r\\n            : Mode.PUBLIC; //public\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  status  current selling status\\r\\n     */\\r\\n    function getCurrentSatus() public view returns (Status status) {\\r\\n        status = (block.timestamp < pool.startTime && currentStatus != Status.CANCELLED)\\r\\n            ? Status.INCOMMING\\r\\n            : (currentStatus != Status.CANCELLED &&\\r\\n                currentStatus != Status.CLOSED &&\\r\\n                block.timestamp > pool.startTime)\\r\\n            ? Status.ACTIVE\\r\\n            : currentStatus;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  uint256  return the array of all investors\\r\\n     */\\r\\n    function getAllInvestors() public view returns (address[] memory) {\\r\\n        return investors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  transfer purchase currency to receiver\\r\\n     * @param   _to  .\\r\\n     * @param   _amount  .\\r\\n     */\\r\\n    function _transferFunds(address _to, uint256 _amount) private {\\r\\n        if (fundByTokens) {\\r\\n            fundToken.transfer(_to, _amount);\\r\\n        } else {\\r\\n            payable(_to).transfer(_amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a8ea7373d8651dd33374c29f770f86ac59d63d112d3c00618fa433e0d5bf50b\",\"license\":\"UNLICENSED\"},\"@gempad/subscriptionpool/contracts/GempadWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\n\\r\\nabstract contract GempadWhitelist is Initializable, OwnableUpgradeable {\\r\\n    mapping(address => bool) internal _whitelist;\\r\\n\\r\\n    event WhitelistUpdated(address[] account, address sender);\\r\\n\\r\\n    /**\\r\\n     * @notice  add users to whitelist\\r\\n     * @param _participants  address of users\\r\\n     */\\r\\n    function addWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(!_whitelist[_participants[i]], 'Participant is already whitelisted');\\r\\n            _whitelist[_participants[i]] = true;\\r\\n        }\\r\\n        emit WhitelistUpdated(_participants, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  remove usres from whitelist\\r\\n     * @param _participants  address of users\\r\\n     */\\r\\n    function removeWhitelist(address[] memory _participants) external onlyOwner {\\r\\n        uint256 length = _participants.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(_participants[i] != address(0), 'Invalid address');\\r\\n            require(_whitelist[_participants[i]], 'Participant is not whitelisted');\\r\\n            _whitelist[_participants[i]] = false;\\r\\n        }\\r\\n        emit WhitelistUpdated(_participants, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  bool return whitelist status of user\\r\\n     */\\r\\n    function isWhitelisted(address _address) public view returns (bool) {\\r\\n        return _whitelist[_address];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb669acbcaefbac847c455d46921c246f9e63d64231589ae9dc232847bf4669a8\",\"license\":\"UNLICENSED\"},\"@gempad/subscriptionpool/contracts/interfaces/IERC20Extented.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IERC20Extented is IERC20 {\\r\\n\\r\\n    function decimals() external returns (uint8);\\r\\n}\",\"keccak256\":\"0xf40b553f98f2e1e12b78b21232f3a1f731f72c036767203c2bffb64fc9b44bce\",\"license\":\"MIT\"},\"@gempad/subscriptionpool/contracts/interfaces/IGempadVestingLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IGempadVestingLock {\\r\\n\\r\\n  function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external  payable returns (uint256 id);\\r\\n\\r\\n  function unlock(uint256 lockId) external;\\r\\n\\r\\n  function editLock(\\r\\n    uint256 lockId,\\r\\n    uint256 newAmount,\\r\\n    uint256 newUnlockDate\\r\\n  ) external payable;\\r\\n}\",\"keccak256\":\"0x89dd109edc8e9dfd87897dbd7bce5b35605896e7ee1ad31dcdd91f7a26a68df9\",\"license\":\"MIT\"},\"@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n\\r\\n//IUniswapV2Factory.sol\\r\\ninterface IUniswapV2Factory {\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2524e635cce09d03725e1f1d98ea49609fd772d1b7793228d78ceae5cc147145\",\"license\":\"UNLICENSED\"},\"@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n//IUniswapV2Pair.sol\\r\\ninterface IUniswapV2Pair {\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x8e27575eeabd09d2904855e02f799a8c1f8980d785d1ee5bb9b2f6b4a3fe45ee\",\"license\":\"UNLICENSED\"},\"@gempad/subscriptionpool/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n\\r\\n//IUniswapV2Router01.sol\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n\\r\\n}\\r\\n//IUnisapV2Router02.sol\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\r\\n}\",\"keccak256\":\"0x2a7db77239a2321b8a9ec297899d71dfeddad0190d77a4b0aa1c156e15492ee3\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526099805460ff1916905534801561001a57600080fd5b50613c598061002a6000396000f3fe6080604052600436106102185760003560e01c806350adcdb71161011d578063c979b61d116100b0578063ea8a1af01161007f578063ef8a923511610064578063ef8a9235146106f5578063f217c7091461070f578063f2fde38b1461072257600080fd5b8063ea8a1af0146106c0578063edac985b146106d557600080fd5b8063c979b61d14610646578063cfed032a14610668578063d0a2f2c414610688578063d54ad2a1146106aa57600080fd5b8063a0355eca116100ec578063a0355eca146105e8578063a35e3aec14610608578063a7e993eb1461061b578063c5c4744c1461063057600080fd5b806350adcdb71461054d5780636842380814610585578063715018a6146105b55780638da5cb5b146105ca57600080fd5b806323245216116101b057806339a090c91161017f578063448a550a11610164578063448a550a1461050157806348c54b9d146105235780634bb278f31461053857600080fd5b806339a090c9146104b25780633af32abf146104c857600080fd5b80632324521614610443578063288f6c5e146104655780632d296bf114610485578063392e53cd1461049857600080fd5b806316f0115b116101ec57806316f0115b146102ae5780631959a002146103465780631a686502146103a85780631cced51b1461041257600080fd5b8062fed7001461021d57806301634c30146102535780630dcf4b8f14610276578063153705981461028c575b600080fd5b34801561022957600080fd5b5060af5461023e90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b50610268610742565b60405190815260200161024a565b34801561028257600080fd5b5061026860b35481565b34801561029857600080fd5b506102a1610786565b60405161024a91906132d9565b3480156102ba57600080fd5b50609a54609b54609c54609d54609e54609f5460a05460a15460a25460a3546102f2996001600160a01b03169897969594939291908a565b604080516001600160a01b03909b168b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400161024a565b34801561035257600080fd5b50610388610361366004613318565b60b66020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161024a565b3480156103b457600080fd5b5060a45460a55460a65460a75460a8546103db946001600160a01b03908116949392169085565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a00161024a565b34801561041e57600080fd5b5060aa5460ab5460ac546040805193845260208401929092529082015260600161024a565b34801561044f57600080fd5b5061046361045e366004613445565b6107bd565b005b34801561047157600080fd5b50610463610480366004613482565b610975565b61046361049336600461354d565b610caf565b3480156104a457600080fd5b5060995461023e9060ff1681565b3480156104be57600080fd5b5061026860985481565b3480156104d457600080fd5b5061023e6104e3366004613318565b6001600160a01b031660009081526065602052604090205460ff1690565b34801561050d57600080fd5b50610516610f55565b60405161024a91906135a1565b34801561052f57600080fd5b50610463611066565b34801561054457600080fd5b506104636112b0565b34801561055957600080fd5b5060af5461056d906001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b34801561059157600080fd5b506105a56105a0366004613445565b61148b565b60405161024a9493929190613672565b3480156105c157600080fd5b506104636118d8565b3480156105d657600080fd5b506033546001600160a01b031661056d565b3480156105f457600080fd5b506104636106033660046136a3565b6118ea565b6104636106163660046136c5565b6119e7565b34801561062757600080fd5b50610463611ae1565b34801561063c57600080fd5b5061026860b25481565b34801561065257600080fd5b5061065b611bfb565b60405161024a9190613781565b34801561067457600080fd5b5061046361068336600461354d565b611c83565b34801561069457600080fd5b5061069d611ccf565b60405161024a9190613795565b3480156106b657600080fd5b5061026860b45481565b3480156106cc57600080fd5b50610463611d31565b3480156106e157600080fd5b506104636106f0366004613445565b611e77565b34801561070157600080fd5b5060a95461065b9060ff1681565b61046361071d366004613843565b612013565b34801561072e57600080fd5b5061046361073d366004613318565b6127a1565b600061076f6040518060800160405280600081526020016000815260200160008152602001600081525090565b602081015181516107809190613971565b91505090565b60a05460009042106107b55760a05442108015906107a5575060a35442105b6107af5750600290565b50600190565b60005b905090565b6107c561282e565b805160005b818110156109375760006001600160a01b03168382815181106107ef576107ef613984565b60200260200101516001600160a01b0316036108525760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061086857610868613984565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166108db5760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c697374656400006044820152606401610849565b6000606560008584815181106108f3576108f3613984565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061092f8161399a565b9150506107ca565b507f0c5a12c037597c1d2258bba4cf82c514e4e02fa76d7af223e59064e1d87e26aa82336040516109699291906139b3565b60405180910390a15050565b61097d61282e565b610985612888565b80518251146109d65760405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606401610849565b60af54600160b01b900460ff16610a2f5760405162461bcd60e51b815260206004820152601660248201527f416c6c6f636174696f6e206e6f742075706461746564000000000000000000006044820152606401610849565b815160005b81811015610c7757600060b66000868481518110610a5457610a54613984565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905080600001548160010154108015610a9a5750609d546002820154105b15610c645760008688868581518110610ab557610ab5613984565b6020026020010151610ac791906139de565b610ad191906139f5565b9050609a60030154818360020154610ae99190613a17565b1115610b04576002820154609d54610b019190613971565b90505b609d546002830154610b17908390613a17565b1115610b655760405162461bcd60e51b815260206004820152601460248201527f55736572206861726443617020726561636865640000000000000000000000006044820152606401610849565b609e54600090610b7d83670de0b6b3a76400006139de565b610b8791906139f5565b905080836001016000828254610b9d9190613a17565b9250508190555081836002016000828254610bb89190613a17565b909155505060aa8054839190600090610bd2908490613a17565b925050819055508060b26000828254610beb9190613a17565b9091555050609d546002840154108015610c09575082546001840154105b15610c615760aa600301878581518110610c2557610c25613984565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b50505b5080610c6f8161399a565b915050610a34565b5060b25460b354610c889190613971565b60ac5560aa54609b54610c9b9190613971565b60ab5550610ca96001606655565b50505050565b610cb7612888565b33600090815260b66020526040902060a0544210801590610cda575060a1544211155b610d265760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610849565b60a354421015610d8f573360009081526065602052604090205460ff16610d8f5760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610849565b8054610dd85760b580546001810182556000919091527f22b88d74a6b23be687aa96340c881253c2e9873c526eec7366dc5f733ada306a0180546001600160a01b031916331790555b81816000016000828254610dec9190613a17565b925050819055508160b36000828254610e059190613a17565b909155505060af54600160a01b900460ff1615610eb65760af546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190613a2a565b50610f05565b813414610f055760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610849565b6098546040805191825233602083015281018390527f988c30a8baeec0ea77c156f23bb177d68f0e44bef8b9b62ff0acf0b687568a1e9060600160405180910390a150610f526001606655565b50565b610f876040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6040805160a08101825260aa8054825260ab5460208084019190915260ac548385015260ad80548551818402810184019096528086529394929360608601939283018282801561100057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe2575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561105857602002820191906000526020600020905b815481526020019060010190808311611044575b505050505081525050905090565b61106e612888565b33600090815260b660205260409020600260a95460ff166003811115611096576110966132c3565b036110e35760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610849565b600360a95460ff1660038111156110fc576110fc6132c3565b146111495760405162461bcd60e51b815260206004820152601560248201527f53616c65206973206e6f742066696e616c697a656400000000000000000000006044820152606401610849565b6002810154600382015461115e908290613a17565b11156111ac5760405162461bcd60e51b815260206004820152601260248201527f416c6c20746f6b656e7320636c61696d656400000000000000000000000000006044820152606401610849565b60028101546003820181905560b480546000906111ca908490613a17565b909155505060af54600090670de0b6b3a7640000906111f490600160a81b900460ff16600a613b2b565b836002015461120391906139de565b61120d91906139f5565b905061122c33836001015484600001546112279190613971565b6128e1565b609a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a19190613a2a565b5050506112ae6001606655565b565b6112b861282e565b6112c0612888565b609e54609c54600091906112dc90670de0b6b3a76400006139de565b6112e691906139f5565b60a154909150421180156112fc57508060b35410155b8061130957508060b35410155b6113555760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610849565b600360a95460ff16600381111561136e5761136e6132c3565b036113bb5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a6564000000000000000000006044820152606401610849565b600260a95460ff1660038111156113d4576113d46132c3565b036114215760405162461bcd60e51b815260206004820152600e60248201527f53616c652043414e43454c4c45440000000000000000000000000000000000006044820152606401610849565b60a9805460ff191660031790554260a25560b15460b254600091620186a09161144a91906139de565b61145491906139f5565b905061145e6129a4565b505060b05461147791506001600160a01b0316826128e1565b61147f612ebf565b50506112ae6001606655565b60008060608061149961282e565b609e54609c54600091906114b590670de0b6b3a76400006139de565b6114bf91906139f5565b60a154909150421180156114d557508060b35410155b806114e257508060b35410155b61152e5760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610849565b600260a95460ff166003811115611547576115476132c3565b036115945760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610849565b855160005b818110156117cc57600060b660008a84815181106115b9576115b9613984565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160000154116116375760405162461bcd60e51b815260206004820152600c60248201527f496e76616c6964205573657200000000000000000000000000000000000000006044820152606401610849565b60b354609b5482546000929161164c916139de565b61165691906139f5565b609d549091508111156116685750609d545b609e5460009061168083670de0b6b3a76400006139de565b61168a91906139f5565b600184018190556002840183905560aa805491925083916000906116af908490613a17565b925050819055508060b260008282546116c89190613a17565b9091555050609d5460028401541080156116e6575082546001840154105b156117b657600183015483546116fc9190613971565b60ac805460009061170e908490613a17565b90915550508a5160ad908c908690811061172a5761172a613984565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155830154835460ae9161177a91613971565b815460018181018455600093845260209093200155830154835461179e9190613971565b60ac80546000906117b0908490613a17565b90915550505b50505080806117c49061399a565b915050611599565b5060af80547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b17905560aa54609b5461180b9190613971565b60ab81905560ac5460ad80546040805160208084028201810190925282815293949360ae92909184919083018282801561186e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611850575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156118c057602002820191906000526020600020905b8154815260200190600101908083116118ac575b50505050509050955095509550955050509193509193565b6118e061282e565b6112ae6000612f6f565b6118f261282e565b60a05442106119435760405162461bcd60e51b815260206004820152601460248201527f53616c6520616c726561647920737461727465640000000000000000000000006044820152606401610849565b428211801561195157508082105b61199d5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610849565b60a082905560a1819055609854604080519182526020820184905281018290527fe42616d35e911a9bddf11a60118c262326e1ba63e75cec829e684104d35e1fa690606001610969565b600054610100900460ff16611a645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610849565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e903490611aab908590600401613b3a565b6000604051808303818588803b158015611ac457600080fd5b505af1158015611ad8573d6000803e3d6000fd5b50505050505050565b33600090815260b660205260408120609e54609c54919291611b0b90670de0b6b3a76400006139de565b611b1591906139f5565b60a1549091504210801590611b2b57508060b354105b80611b4c5750600260a95460ff166003811115611b4a57611b4a6132c3565b145b611b985760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f77656400000000000000000000006044820152606401610849565b8154611be65760405162461bcd60e51b815260206004820152601560248201527f5573657220686173206e6f7420696e76657374656400000000000000000000006044820152606401610849565b815460008355611bf633826128e1565b505050565b60a05460009042108015611c265750600260a95460ff166003811115611c2357611c236132c3565b14155b6107b557600260a95460ff166003811115611c4357611c436132c3565b14158015611c685750600360a95460ff166003811115611c6557611c656132c3565b14155b8015611c75575060a05442115b6107af575060a95460ff1690565b611c8b61282e565b60a381905560985460408051918252602082018390527f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c1910160405180910390a150565b606060b5805480602002602001604051908101604052809291908181526020018280548015611d2757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d09575b5050505050905090565b611d3961282e565b600260a95460ff166003811115611d5257611d526132c3565b03611d9f5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792063616e63656c6c6564000000000000000000006044820152606401610849565b600360a95460ff166003811115611db857611db86132c3565b03611e2b5760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a65000000000000000000000000000000000000000000000000006064820152608401610849565b60a9805460ff191660029081179091556098546040517ff8f7fcba8ab018b753ab5098154d39a8ef2b120fbc02282664dfa97c900d736792611e6d9291613b88565b60405180910390a1565b611e7f61282e565b805160005b818110156109375760006001600160a01b0316838281518110611ea957611ea9613984565b60200260200101516001600160a01b031603611f075760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610849565b60656000848381518110611f1d57611f1d613984565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611fb75760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610849565b600160656000858481518110611fcf57611fcf613984565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061200b8161399a565b915050611e84565b600054610100900460ff16158080156120335750600054600160ff909116105b8061204d5750303b15801561204d575060005460ff166001145b6120bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610849565b6000805460ff1916600117905580156120e2576000805461ff0019166101001790555b60995460ff16156121355760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920696e697469616c697a656400000000000000006044820152606401610849565b612174836040518060400160405280601681526020017f47656d706164537562736372697074696f6e506f6f6c000000000000000000008152506119e7565b609889905560af80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff166001600160a01b0388161515600160a01b908102919091179182905560ff910416156121e15760af80546001600160a01b0319166001600160a01b0388161790555b87600001516001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190613b9c565b60af60156101000a81548160ff021916908360ff16021790555087608001518860a00151106122e05760405162461bcd60e51b815260206004820152602860248201527f4c697374696e672072617465206d757374206265206c657373207468616e207360448201527f656c6c20726174650000000000000000000000000000000000000000000000006064820152608401610849565b620186a0886020015161c7386122f691906139de565b61230091906139f5565b88604001511015801561231a575087602001518860400151105b61238c5760405162461bcd60e51b815260206004820152602d60248201527f536f6674436170206d7573742062652067726561746572207468616e2035302560448201527f206f6620686172646820636170000000000000000000000000000000000000006064820152608401610849565b8760200151886060015111156123e45760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642055736572206d617820627579206c696d69740000000000006044820152606401610849565b428860c001511180156123fe57508760e001518860c00151105b61244a5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610849565b61c35087602001511180156124665750620186a0876020015111155b6124b25760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610849565b61012c8760400151101561252e5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d652063616e2774206265206c657373207468616e2035206d60448201527f696e7574730000000000000000000000000000000000000000000000000000006064820152608401610849565b865160a480546001600160a01b03199081166001600160a01b03938416179091556020808a015160a5556040808b015160a6556060808c015160a7805486169187169190911790556080808d015160a8558d51609a8054909616961695909517909355908b0151609b558a0151609c55890151609d55880151609e5560a080890151609f5560c0890151905560e088015160a15561010088015160a25561012088015160a355846125e3578760c001516125e9565b8760e001515b60a35560af80547fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff1677010000000000000000000000000000000000000000000000871515027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff161778010000000000000000000000000000000000000000000000008615150217905560b080546001600160a01b0319166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f47656d706164537562736372697074696f6e506f6f6c00000000000000000000604482015263ed1eee68906064016020604051808303816000875af1158015612713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127379190613bbf565b60b15561274382612f6f565b6099805460ff191660011790558015612796576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6127a961282e565b6001600160a01b0381166128255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610849565b610f5281612f6f565b6033546001600160a01b031633146112ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610849565b6002606654036128da5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610849565b6002606655565b60af54600160a01b900460ff161561296a5760af5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015612946573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf69190613a2a565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611bf6573d6000803e3d6000fd5b5050565b60008060008060b2541115612eb35760008060008060006129c3612fc1565b609a5460a45460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052939550919350169063095ea7b3906044016020604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a419190613a2a565b5060af54600160a01b900460ff16612b0f5760a48054609a546040517ff305d7190000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810185905260006044820181905260648201523060848201524293810193909352169063f305d71990849060c40160606040518083038185885af1158015612ade573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b039190613bd8565b91965094509250612c52565b60af5460a45460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190613a2a565b5060a48054609a5460af546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526044810185905260648101869052600060848201819052938101939093523060c48401524260e4840152169063e8e3370090610104016060604051808303816000875af1158015612c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4a9190613bd8565b919650945092505b60a88290556000612c61613064565b6040516370a0823160e01b815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd19190613bbf565b60a75460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925083169063095ea7b3906044016020604051808303816000875af1158015612d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4a9190613a2a565b5060a7546001600160a01b03166307279357612d6e6033546001600160a01b031690565b8560018560a46002015442612d839190613a17565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015290151560448401526064830152608482015260c060a4820152601060c48201527f47656d706164206c69717569646974790000000000000000000000000000000060e4820152610104016020604051808303816000875af1158015612e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e559190613bbf565b50609854604080519182526001600160a01b038516602083015281018790527f42b2be570423941aea98deb91552197964540c09a640255b47194c1cdf34915f9060600160405180910390a150959994985092965092945050505050565b50600092839250829150565b60af54600090600160a01b900460ff16612ed95747612f45565b60af546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f459190613bbf565b9050600060b25460b354612f599190613971565b612f639083613971565b90506129a033826128e1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000620186a060b15460b254612fda91906139de565b612fe491906139f5565b9050620186a060a4600101548260b254612ffe9190613971565b61300891906139de565b61301291906139f5565b60af5490935061302d90600160a81b900460ff16600a613b2b565b613046906ec097ce7bc90715b34b9f10000000006139f5565b609f5461305390856139de565b61305d91906139f5565b9150509091565b60af54600090600160a01b900460ff16156131795760a4546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa1580156130c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e79190613c06565b60af54609a546040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015291169063e6a43905906044015b602060405180830381865afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190613c06565b60a4546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa1580156131c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e79190613c06565b60a454604080517fad5c464800000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169363e6a4390593169163ad5c46489160048083019260209291908290030181865afa158015613251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132759190613c06565b609a5460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03928316600482015291166024820152604401613138565b634e487b7160e01b600052602160045260246000fd5b60208101600383106132ed576132ed6132c3565b91905290565b6001600160a01b0381168114610f5257600080fd5b8035613313816132f3565b919050565b60006020828403121561332a57600080fd5b8135613335816132f3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156133765761337661333c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156133a5576133a561333c565b604052919050565b600067ffffffffffffffff8211156133c7576133c761333c565b5060051b60200190565b600082601f8301126133e257600080fd5b813560206133f76133f2836133ad565b61337c565b82815260059290921b8401810191818101908684111561341657600080fd5b8286015b8481101561343a57803561342d816132f3565b835291830191830161341a565b509695505050505050565b60006020828403121561345757600080fd5b813567ffffffffffffffff81111561346e57600080fd5b61347a848285016133d1565b949350505050565b6000806000806080858703121561349857600080fd5b843593506020808601359350604086013567ffffffffffffffff808211156134bf57600080fd5b6134cb89838a016133d1565b945060608801359150808211156134e157600080fd5b508601601f810188136134f357600080fd5b80356135016133f2826133ad565b81815260059190911b8201830190838101908a83111561352057600080fd5b928401925b8284101561353e57833582529284019290840190613525565b979a9699509497505050505050565b60006020828403121561355f57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156135965781518752958201959082019060010161357a565b509495945050505050565b6000602080835260c0830184518285015281850151604085015260408501516060850152606085015160a0608086015281815180845260e0870191508483019350600092505b808310156136105783516001600160a01b031682529284019260019290920191908401906135e7565b506080870151868203601f190160a0880152935061362e8185613566565b979650505050505050565b600081518084526020808501945080840160005b838110156135965781516001600160a01b03168752958201959082019060010161364d565b8481528360208201526080604082015260006136916080830185613639565b828103606084015261362e8185613566565b600080604083850312156136b657600080fd5b50508035926020909101359150565b600080604083850312156136d857600080fd5b82356136e3816132f3565b915060208381013567ffffffffffffffff8082111561370157600080fd5b818601915086601f83011261371557600080fd5b8135818111156137275761372761333c565b613739601f8201601f1916850161337c565b9150808252878482850101111561374f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6004811061377d5761377d6132c3565b9052565b6020810161378f828461376d565b92915050565b6020815260006133356020830184613639565b600060a082840312156137ba57600080fd5b60405160a0810181811067ffffffffffffffff821117156137dd576137dd61333c565b60405290508082356137ee816132f3565b8082525060208301356020820152604083013560408201526060830135613814816132f3565b6060820152608092830135920191909152919050565b8015158114610f5257600080fd5b80356133138161382a565b600080600080600080600080888a036102a081121561386157600080fd5b8935985061014080601f198301121561387957600080fd5b613881613352565b915061388f60208c01613308565b825260408b0135602083015260608b0135604083015260808b0135606083015260a08b0135608083015260c08b013560a083015260e08b013560c0830152610100808c013560e0840152610120808d013582850152828d013581850152505050809750506139018a6101608b016137a8565b95506139106102008a01613308565b945061391f6102208a01613838565b935061392e6102408a01613838565b925061393d6102608a01613308565b915061394c6102808a01613308565b90509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561378f5761378f61395b565b634e487b7160e01b600052603260045260246000fd5b6000600182016139ac576139ac61395b565b5060010190565b6040815260006139c66040830185613639565b90506001600160a01b03831660208301529392505050565b808202811582820484141761378f5761378f61395b565b600082613a1257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561378f5761378f61395b565b600060208284031215613a3c57600080fd5b81516133358161382a565b600181815b80851115613a82578160001904821115613a6857613a6861395b565b80851615613a7557918102915b93841c9390800290613a4c565b509250929050565b600082613a995750600161378f565b81613aa65750600061378f565b8160018114613abc5760028114613ac657613ae2565b600191505061378f565b60ff841115613ad757613ad761395b565b50506001821b61378f565b5060208310610133831016604e8410600b8410161715613b05575081810a61378f565b613b0f8383613a47565b8060001904821115613b2357613b2361395b565b029392505050565b600061333560ff841683613a8a565b600060208083528351808285015260005b81811015613b6757858101830151858201604001528201613b4b565b506000604082860101526040601f19601f8301168501019250505092915050565b82815260408101613335602083018461376d565b600060208284031215613bae57600080fd5b815160ff8116811461333557600080fd5b600060208284031215613bd157600080fd5b5051919050565b600080600060608486031215613bed57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215613c1857600080fd5b8151613335816132f356fea264697066735822122074a89df16486c2eb18487cc323da9676de480b9a606c7d8d002fa086ff04137264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102185760003560e01c806350adcdb71161011d578063c979b61d116100b0578063ea8a1af01161007f578063ef8a923511610064578063ef8a9235146106f5578063f217c7091461070f578063f2fde38b1461072257600080fd5b8063ea8a1af0146106c0578063edac985b146106d557600080fd5b8063c979b61d14610646578063cfed032a14610668578063d0a2f2c414610688578063d54ad2a1146106aa57600080fd5b8063a0355eca116100ec578063a0355eca146105e8578063a35e3aec14610608578063a7e993eb1461061b578063c5c4744c1461063057600080fd5b806350adcdb71461054d5780636842380814610585578063715018a6146105b55780638da5cb5b146105ca57600080fd5b806323245216116101b057806339a090c91161017f578063448a550a11610164578063448a550a1461050157806348c54b9d146105235780634bb278f31461053857600080fd5b806339a090c9146104b25780633af32abf146104c857600080fd5b80632324521614610443578063288f6c5e146104655780632d296bf114610485578063392e53cd1461049857600080fd5b806316f0115b116101ec57806316f0115b146102ae5780631959a002146103465780631a686502146103a85780631cced51b1461041257600080fd5b8062fed7001461021d57806301634c30146102535780630dcf4b8f14610276578063153705981461028c575b600080fd5b34801561022957600080fd5b5060af5461023e90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b50610268610742565b60405190815260200161024a565b34801561028257600080fd5b5061026860b35481565b34801561029857600080fd5b506102a1610786565b60405161024a91906132d9565b3480156102ba57600080fd5b50609a54609b54609c54609d54609e54609f5460a05460a15460a25460a3546102f2996001600160a01b03169897969594939291908a565b604080516001600160a01b03909b168b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400161024a565b34801561035257600080fd5b50610388610361366004613318565b60b66020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161024a565b3480156103b457600080fd5b5060a45460a55460a65460a75460a8546103db946001600160a01b03908116949392169085565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a00161024a565b34801561041e57600080fd5b5060aa5460ab5460ac546040805193845260208401929092529082015260600161024a565b34801561044f57600080fd5b5061046361045e366004613445565b6107bd565b005b34801561047157600080fd5b50610463610480366004613482565b610975565b61046361049336600461354d565b610caf565b3480156104a457600080fd5b5060995461023e9060ff1681565b3480156104be57600080fd5b5061026860985481565b3480156104d457600080fd5b5061023e6104e3366004613318565b6001600160a01b031660009081526065602052604090205460ff1690565b34801561050d57600080fd5b50610516610f55565b60405161024a91906135a1565b34801561052f57600080fd5b50610463611066565b34801561054457600080fd5b506104636112b0565b34801561055957600080fd5b5060af5461056d906001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b34801561059157600080fd5b506105a56105a0366004613445565b61148b565b60405161024a9493929190613672565b3480156105c157600080fd5b506104636118d8565b3480156105d657600080fd5b506033546001600160a01b031661056d565b3480156105f457600080fd5b506104636106033660046136a3565b6118ea565b6104636106163660046136c5565b6119e7565b34801561062757600080fd5b50610463611ae1565b34801561063c57600080fd5b5061026860b25481565b34801561065257600080fd5b5061065b611bfb565b60405161024a9190613781565b34801561067457600080fd5b5061046361068336600461354d565b611c83565b34801561069457600080fd5b5061069d611ccf565b60405161024a9190613795565b3480156106b657600080fd5b5061026860b45481565b3480156106cc57600080fd5b50610463611d31565b3480156106e157600080fd5b506104636106f0366004613445565b611e77565b34801561070157600080fd5b5060a95461065b9060ff1681565b61046361071d366004613843565b612013565b34801561072e57600080fd5b5061046361073d366004613318565b6127a1565b600061076f6040518060800160405280600081526020016000815260200160008152602001600081525090565b602081015181516107809190613971565b91505090565b60a05460009042106107b55760a05442108015906107a5575060a35442105b6107af5750600290565b50600190565b60005b905090565b6107c561282e565b805160005b818110156109375760006001600160a01b03168382815181106107ef576107ef613984565b60200260200101516001600160a01b0316036108525760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642061646472657373000000000000000000000000000000000060448201526064015b60405180910390fd5b6065600084838151811061086857610868613984565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166108db5760405162461bcd60e51b815260206004820152601e60248201527f5061727469636970616e74206973206e6f742077686974656c697374656400006044820152606401610849565b6000606560008584815181106108f3576108f3613984565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061092f8161399a565b9150506107ca565b507f0c5a12c037597c1d2258bba4cf82c514e4e02fa76d7af223e59064e1d87e26aa82336040516109699291906139b3565b60405180910390a15050565b61097d61282e565b610985612888565b80518251146109d65760405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606401610849565b60af54600160b01b900460ff16610a2f5760405162461bcd60e51b815260206004820152601660248201527f416c6c6f636174696f6e206e6f742075706461746564000000000000000000006044820152606401610849565b815160005b81811015610c7757600060b66000868481518110610a5457610a54613984565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905080600001548160010154108015610a9a5750609d546002820154105b15610c645760008688868581518110610ab557610ab5613984565b6020026020010151610ac791906139de565b610ad191906139f5565b9050609a60030154818360020154610ae99190613a17565b1115610b04576002820154609d54610b019190613971565b90505b609d546002830154610b17908390613a17565b1115610b655760405162461bcd60e51b815260206004820152601460248201527f55736572206861726443617020726561636865640000000000000000000000006044820152606401610849565b609e54600090610b7d83670de0b6b3a76400006139de565b610b8791906139f5565b905080836001016000828254610b9d9190613a17565b9250508190555081836002016000828254610bb89190613a17565b909155505060aa8054839190600090610bd2908490613a17565b925050819055508060b26000828254610beb9190613a17565b9091555050609d546002840154108015610c09575082546001840154105b15610c615760aa600301878581518110610c2557610c25613984565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b50505b5080610c6f8161399a565b915050610a34565b5060b25460b354610c889190613971565b60ac5560aa54609b54610c9b9190613971565b60ab5550610ca96001606655565b50505050565b610cb7612888565b33600090815260b66020526040902060a0544210801590610cda575060a1544211155b610d265760405162461bcd60e51b815260206004820152601260248201527f53616c65206973206e6f742061637469766500000000000000000000000000006044820152606401610849565b60a354421015610d8f573360009081526065602052604090205460ff16610d8f5760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610849565b8054610dd85760b580546001810182556000919091527f22b88d74a6b23be687aa96340c881253c2e9873c526eec7366dc5f733ada306a0180546001600160a01b031916331790555b81816000016000828254610dec9190613a17565b925050819055508160b36000828254610e059190613a17565b909155505060af54600160a01b900460ff1615610eb65760af546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190613a2a565b50610f05565b813414610f055760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610849565b6098546040805191825233602083015281018390527f988c30a8baeec0ea77c156f23bb177d68f0e44bef8b9b62ff0acf0b687568a1e9060600160405180910390a150610f526001606655565b50565b610f876040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6040805160a08101825260aa8054825260ab5460208084019190915260ac548385015260ad80548551818402810184019096528086529394929360608601939283018282801561100057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe2575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561105857602002820191906000526020600020905b815481526020019060010190808311611044575b505050505081525050905090565b61106e612888565b33600090815260b660205260409020600260a95460ff166003811115611096576110966132c3565b036110e35760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610849565b600360a95460ff1660038111156110fc576110fc6132c3565b146111495760405162461bcd60e51b815260206004820152601560248201527f53616c65206973206e6f742066696e616c697a656400000000000000000000006044820152606401610849565b6002810154600382015461115e908290613a17565b11156111ac5760405162461bcd60e51b815260206004820152601260248201527f416c6c20746f6b656e7320636c61696d656400000000000000000000000000006044820152606401610849565b60028101546003820181905560b480546000906111ca908490613a17565b909155505060af54600090670de0b6b3a7640000906111f490600160a81b900460ff16600a613b2b565b836002015461120391906139de565b61120d91906139f5565b905061122c33836001015484600001546112279190613971565b6128e1565b609a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a19190613a2a565b5050506112ae6001606655565b565b6112b861282e565b6112c0612888565b609e54609c54600091906112dc90670de0b6b3a76400006139de565b6112e691906139f5565b60a154909150421180156112fc57508060b35410155b8061130957508060b35410155b6113555760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610849565b600360a95460ff16600381111561136e5761136e6132c3565b036113bb5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792066696e616c697a6564000000000000000000006044820152606401610849565b600260a95460ff1660038111156113d4576113d46132c3565b036114215760405162461bcd60e51b815260206004820152600e60248201527f53616c652043414e43454c4c45440000000000000000000000000000000000006044820152606401610849565b60a9805460ff191660031790554260a25560b15460b254600091620186a09161144a91906139de565b61145491906139f5565b905061145e6129a4565b505060b05461147791506001600160a01b0316826128e1565b61147f612ebf565b50506112ae6001606655565b60008060608061149961282e565b609e54609c54600091906114b590670de0b6b3a76400006139de565b6114bf91906139f5565b60a154909150421180156114d557508060b35410155b806114e257508060b35410155b61152e5760405162461bcd60e51b815260206004820181905260248201527f53616c6520456e642054696d65206f7220636170206e6f7420726561636865646044820152606401610849565b600260a95460ff166003811115611547576115476132c3565b036115945760405162461bcd60e51b815260206004820152601160248201527f53616c6520696e2063616e63656c6c65640000000000000000000000000000006044820152606401610849565b855160005b818110156117cc57600060b660008a84815181106115b9576115b9613984565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160000154116116375760405162461bcd60e51b815260206004820152600c60248201527f496e76616c6964205573657200000000000000000000000000000000000000006044820152606401610849565b60b354609b5482546000929161164c916139de565b61165691906139f5565b609d549091508111156116685750609d545b609e5460009061168083670de0b6b3a76400006139de565b61168a91906139f5565b600184018190556002840183905560aa805491925083916000906116af908490613a17565b925050819055508060b260008282546116c89190613a17565b9091555050609d5460028401541080156116e6575082546001840154105b156117b657600183015483546116fc9190613971565b60ac805460009061170e908490613a17565b90915550508a5160ad908c908690811061172a5761172a613984565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155830154835460ae9161177a91613971565b815460018181018455600093845260209093200155830154835461179e9190613971565b60ac80546000906117b0908490613a17565b90915550505b50505080806117c49061399a565b915050611599565b5060af80547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b17905560aa54609b5461180b9190613971565b60ab81905560ac5460ad80546040805160208084028201810190925282815293949360ae92909184919083018282801561186e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611850575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156118c057602002820191906000526020600020905b8154815260200190600101908083116118ac575b50505050509050955095509550955050509193509193565b6118e061282e565b6112ae6000612f6f565b6118f261282e565b60a05442106119435760405162461bcd60e51b815260206004820152601460248201527f53616c6520616c726561647920737461727465640000000000000000000000006044820152606401610849565b428211801561195157508082105b61199d5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610849565b60a082905560a1819055609854604080519182526020820184905281018290527fe42616d35e911a9bddf11a60118c262326e1ba63e75cec829e684104d35e1fa690606001610969565b600054610100900460ff16611a645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610849565b6040517f2b66d72e0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632b66d72e903490611aab908590600401613b3a565b6000604051808303818588803b158015611ac457600080fd5b505af1158015611ad8573d6000803e3d6000fd5b50505050505050565b33600090815260b660205260408120609e54609c54919291611b0b90670de0b6b3a76400006139de565b611b1591906139f5565b60a1549091504210801590611b2b57508060b354105b80611b4c5750600260a95460ff166003811115611b4a57611b4a6132c3565b145b611b985760405162461bcd60e51b815260206004820152601560248201527f526566756e64206973206e6f7420616c6c6f77656400000000000000000000006044820152606401610849565b8154611be65760405162461bcd60e51b815260206004820152601560248201527f5573657220686173206e6f7420696e76657374656400000000000000000000006044820152606401610849565b815460008355611bf633826128e1565b505050565b60a05460009042108015611c265750600260a95460ff166003811115611c2357611c236132c3565b14155b6107b557600260a95460ff166003811115611c4357611c436132c3565b14158015611c685750600360a95460ff166003811115611c6557611c656132c3565b14155b8015611c75575060a05442115b6107af575060a95460ff1690565b611c8b61282e565b60a381905560985460408051918252602082018390527f1b00aa34af117b63885012db1060a3aad14e052462daab8ac939c370978206c1910160405180910390a150565b606060b5805480602002602001604051908101604052809291908181526020018280548015611d2757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d09575b5050505050905090565b611d3961282e565b600260a95460ff166003811115611d5257611d526132c3565b03611d9f5760405162461bcd60e51b815260206004820152601660248201527f53616c6520616c72656164792063616e63656c6c6564000000000000000000006044820152606401610849565b600360a95460ff166003811115611db857611db86132c3565b03611e2b5760405162461bcd60e51b815260206004820152602760248201527f53616c652063616e6e6f742062652063616e63656c6c6564206166746572206660448201527f696e616c697a65000000000000000000000000000000000000000000000000006064820152608401610849565b60a9805460ff191660029081179091556098546040517ff8f7fcba8ab018b753ab5098154d39a8ef2b120fbc02282664dfa97c900d736792611e6d9291613b88565b60405180910390a1565b611e7f61282e565b805160005b818110156109375760006001600160a01b0316838281518110611ea957611ea9613984565b60200260200101516001600160a01b031603611f075760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606401610849565b60656000848381518110611f1d57611f1d613984565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611fb75760405162461bcd60e51b815260206004820152602260248201527f5061727469636970616e7420697320616c72656164792077686974656c69737460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610849565b600160656000858481518110611fcf57611fcf613984565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061200b8161399a565b915050611e84565b600054610100900460ff16158080156120335750600054600160ff909116105b8061204d5750303b15801561204d575060005460ff166001145b6120bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610849565b6000805460ff1916600117905580156120e2576000805461ff0019166101001790555b60995460ff16156121355760405162461bcd60e51b815260206004820152601860248201527f4572723a20416c726561647920696e697469616c697a656400000000000000006044820152606401610849565b612174836040518060400160405280601681526020017f47656d706164537562736372697074696f6e506f6f6c000000000000000000008152506119e7565b609889905560af80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff166001600160a01b0388161515600160a01b908102919091179182905560ff910416156121e15760af80546001600160a01b0319166001600160a01b0388161790555b87600001516001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190613b9c565b60af60156101000a81548160ff021916908360ff16021790555087608001518860a00151106122e05760405162461bcd60e51b815260206004820152602860248201527f4c697374696e672072617465206d757374206265206c657373207468616e207360448201527f656c6c20726174650000000000000000000000000000000000000000000000006064820152608401610849565b620186a0886020015161c7386122f691906139de565b61230091906139f5565b88604001511015801561231a575087602001518860400151105b61238c5760405162461bcd60e51b815260206004820152602d60248201527f536f6674436170206d7573742062652067726561746572207468616e2035302560448201527f206f6620686172646820636170000000000000000000000000000000000000006064820152608401610849565b8760200151886060015111156123e45760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642055736572206d617820627579206c696d69740000000000006044820152606401610849565b428860c001511180156123fe57508760e001518860c00151105b61244a5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073746172742074696d6500000000000000000000000000006044820152606401610849565b61c35087602001511180156124665750620186a0876020015111155b6124b25760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206c69717569646974792070657263656e74616765000000006044820152606401610849565b61012c8760400151101561252e5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b2074696d652063616e2774206265206c657373207468616e2035206d60448201527f696e7574730000000000000000000000000000000000000000000000000000006064820152608401610849565b865160a480546001600160a01b03199081166001600160a01b03938416179091556020808a015160a5556040808b015160a6556060808c015160a7805486169187169190911790556080808d015160a8558d51609a8054909616961695909517909355908b0151609b558a0151609c55890151609d55880151609e5560a080890151609f5560c0890151905560e088015160a15561010088015160a25561012088015160a355846125e3578760c001516125e9565b8760e001515b60a35560af80547fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff1677010000000000000000000000000000000000000000000000871515027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff161778010000000000000000000000000000000000000000000000008615150217905560b080546001600160a01b0319166001600160a01b0385169081179091556040517fed1eee6800000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f47656d706164537562736372697074696f6e506f6f6c00000000000000000000604482015263ed1eee68906064016020604051808303816000875af1158015612713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127379190613bbf565b60b15561274382612f6f565b6099805460ff191660011790558015612796576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6127a961282e565b6001600160a01b0381166128255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610849565b610f5281612f6f565b6033546001600160a01b031633146112ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610849565b6002606654036128da5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610849565b6002606655565b60af54600160a01b900460ff161561296a5760af5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015612946573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf69190613a2a565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611bf6573d6000803e3d6000fd5b5050565b60008060008060b2541115612eb35760008060008060006129c3612fc1565b609a5460a45460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052939550919350169063095ea7b3906044016020604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a419190613a2a565b5060af54600160a01b900460ff16612b0f5760a48054609a546040517ff305d7190000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810185905260006044820181905260648201523060848201524293810193909352169063f305d71990849060c40160606040518083038185885af1158015612ade573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b039190613bd8565b91965094509250612c52565b60af5460a45460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190613a2a565b5060a48054609a5460af546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526044810185905260648101869052600060848201819052938101939093523060c48401524260e4840152169063e8e3370090610104016060604051808303816000875af1158015612c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4a9190613bd8565b919650945092505b60a88290556000612c61613064565b6040516370a0823160e01b815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd19190613bbf565b60a75460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925083169063095ea7b3906044016020604051808303816000875af1158015612d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4a9190613a2a565b5060a7546001600160a01b03166307279357612d6e6033546001600160a01b031690565b8560018560a46002015442612d839190613a17565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015290151560448401526064830152608482015260c060a4820152601060c48201527f47656d706164206c69717569646974790000000000000000000000000000000060e4820152610104016020604051808303816000875af1158015612e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e559190613bbf565b50609854604080519182526001600160a01b038516602083015281018790527f42b2be570423941aea98deb91552197964540c09a640255b47194c1cdf34915f9060600160405180910390a150959994985092965092945050505050565b50600092839250829150565b60af54600090600160a01b900460ff16612ed95747612f45565b60af546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f459190613bbf565b9050600060b25460b354612f599190613971565b612f639083613971565b90506129a033826128e1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000620186a060b15460b254612fda91906139de565b612fe491906139f5565b9050620186a060a4600101548260b254612ffe9190613971565b61300891906139de565b61301291906139f5565b60af5490935061302d90600160a81b900460ff16600a613b2b565b613046906ec097ce7bc90715b34b9f10000000006139f5565b609f5461305390856139de565b61305d91906139f5565b9150509091565b60af54600090600160a01b900460ff16156131795760a4546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa1580156130c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e79190613c06565b60af54609a546040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015291169063e6a43905906044015b602060405180830381865afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190613c06565b60a4546040805163c45a015560e01b815290516001600160a01b039092169163c45a0155916004808201926020929091908290030181865afa1580156131c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e79190613c06565b60a454604080517fad5c464800000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169363e6a4390593169163ad5c46489160048083019260209291908290030181865afa158015613251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132759190613c06565b609a5460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03928316600482015291166024820152604401613138565b634e487b7160e01b600052602160045260246000fd5b60208101600383106132ed576132ed6132c3565b91905290565b6001600160a01b0381168114610f5257600080fd5b8035613313816132f3565b919050565b60006020828403121561332a57600080fd5b8135613335816132f3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156133765761337661333c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156133a5576133a561333c565b604052919050565b600067ffffffffffffffff8211156133c7576133c761333c565b5060051b60200190565b600082601f8301126133e257600080fd5b813560206133f76133f2836133ad565b61337c565b82815260059290921b8401810191818101908684111561341657600080fd5b8286015b8481101561343a57803561342d816132f3565b835291830191830161341a565b509695505050505050565b60006020828403121561345757600080fd5b813567ffffffffffffffff81111561346e57600080fd5b61347a848285016133d1565b949350505050565b6000806000806080858703121561349857600080fd5b843593506020808601359350604086013567ffffffffffffffff808211156134bf57600080fd5b6134cb89838a016133d1565b945060608801359150808211156134e157600080fd5b508601601f810188136134f357600080fd5b80356135016133f2826133ad565b81815260059190911b8201830190838101908a83111561352057600080fd5b928401925b8284101561353e57833582529284019290840190613525565b979a9699509497505050505050565b60006020828403121561355f57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156135965781518752958201959082019060010161357a565b509495945050505050565b6000602080835260c0830184518285015281850151604085015260408501516060850152606085015160a0608086015281815180845260e0870191508483019350600092505b808310156136105783516001600160a01b031682529284019260019290920191908401906135e7565b506080870151868203601f190160a0880152935061362e8185613566565b979650505050505050565b600081518084526020808501945080840160005b838110156135965781516001600160a01b03168752958201959082019060010161364d565b8481528360208201526080604082015260006136916080830185613639565b828103606084015261362e8185613566565b600080604083850312156136b657600080fd5b50508035926020909101359150565b600080604083850312156136d857600080fd5b82356136e3816132f3565b915060208381013567ffffffffffffffff8082111561370157600080fd5b818601915086601f83011261371557600080fd5b8135818111156137275761372761333c565b613739601f8201601f1916850161337c565b9150808252878482850101111561374f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6004811061377d5761377d6132c3565b9052565b6020810161378f828461376d565b92915050565b6020815260006133356020830184613639565b600060a082840312156137ba57600080fd5b60405160a0810181811067ffffffffffffffff821117156137dd576137dd61333c565b60405290508082356137ee816132f3565b8082525060208301356020820152604083013560408201526060830135613814816132f3565b6060820152608092830135920191909152919050565b8015158114610f5257600080fd5b80356133138161382a565b600080600080600080600080888a036102a081121561386157600080fd5b8935985061014080601f198301121561387957600080fd5b613881613352565b915061388f60208c01613308565b825260408b0135602083015260608b0135604083015260808b0135606083015260a08b0135608083015260c08b013560a083015260e08b013560c0830152610100808c013560e0840152610120808d013582850152828d013581850152505050809750506139018a6101608b016137a8565b95506139106102008a01613308565b945061391f6102208a01613838565b935061392e6102408a01613838565b925061393d6102608a01613308565b915061394c6102808a01613308565b90509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561378f5761378f61395b565b634e487b7160e01b600052603260045260246000fd5b6000600182016139ac576139ac61395b565b5060010190565b6040815260006139c66040830185613639565b90506001600160a01b03831660208301529392505050565b808202811582820484141761378f5761378f61395b565b600082613a1257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561378f5761378f61395b565b600060208284031215613a3c57600080fd5b81516133358161382a565b600181815b80851115613a82578160001904821115613a6857613a6861395b565b80851615613a7557918102915b93841c9390800290613a4c565b509250929050565b600082613a995750600161378f565b81613aa65750600061378f565b8160018114613abc5760028114613ac657613ae2565b600191505061378f565b60ff841115613ad757613ad761395b565b50506001821b61378f565b5060208310610133831016604e8410600b8410161715613b05575081810a61378f565b613b0f8383613a47565b8060001904821115613b2357613b2361395b565b029392505050565b600061333560ff841683613a8a565b600060208083528351808285015260005b81811015613b6757858101830151858201604001528201613b4b565b506000604082860101526040601f19601f8301168501019250505092915050565b82815260408101613335602083018461376d565b600060208284031215613bae57600080fd5b815160ff8116811461333557600080fd5b600060208284031215613bd157600080fd5b5051919050565b600080600060608486031215613bed57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215613c1857600080fd5b8151613335816132f356fea264697066735822122074a89df16486c2eb18487cc323da9676de480b9a606c7d8d002fa086ff04137264736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "__GempadSubscriptionPool_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),address,bool,bool,address,address)": {
        "params": {
          "_feeReceiver": ".",
          "_fundToken": ".",
          "_id": ".",
          "_isPrivateMode": ".",
          "_isRefund": "refund type burn or refund",
          "_liquidity": ".",
          "_owner": ".",
          "info": "."
        }
      },
      "addWhitelist(address[])": {
        "params": {
          "_participants": "address of users"
        }
      },
      "buyToken(uint256)": {
        "params": {
          "_amount": "amount in purchase currency"
        }
      },
      "calculateShare(uint256,uint256,address[],uint256[])": {
        "params": {
          "_amounts": ".",
          "_contributors": ".",
          "_totalFunds": ".",
          "_totalTokens": "."
        }
      },
      "enablePublicSale(uint256)": {
        "params": {
          "_startTime": "start time of public sale time if it is equalo to sale end time that means its priavte sale."
        }
      },
      "getAllInvestors()": {
        "returns": {
          "_0": "uint256  return the array of all investors"
        }
      },
      "getCurrentMode()": {
        "returns": {
          "mode": " the mode of sale right now"
        }
      },
      "getCurrentSatus()": {
        "returns": {
          "status": " current selling status"
        }
      },
      "getDistribution()": {
        "returns": {
          "_0": "uint256  totalAllocated",
          "_1": "uint256  surplusTokens",
          "_2": "uint256  totalSurplusFunds"
        }
      },
      "getSurplusData()": {
        "returns": {
          "_0": "tokenDistribution  surplus tokens and funds after distribution"
        }
      },
      "getUserRemainingFunds()": {
        "returns": {
          "_0": "uint256  ."
        }
      },
      "isWhitelisted(address)": {
        "returns": {
          "_0": "bool return whitelist status of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelist(address[])": {
        "params": {
          "_participants": "address of users"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTime(uint256,uint256)": {
        "params": {
          "_endTime": ".",
          "_startTime": "."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCalculation(address[])": {
        "details": "distribution completes in three phases",
        "params": {
          "_contributors": "investors"
        },
        "returns": {
          "_0": "uint256  .",
          "_1": "uint256  .",
          "_2": "address[]  .",
          "_3": "uint256[]  ."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__GempadSubscriptionPool_init(uint256,(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256,uint256,address,uint256),address,bool,bool,address,address)": {
        "notice": "initialization of core params"
      },
      "addWhitelist(address[])": {
        "notice": "add users to whitelist"
      },
      "buyToken(uint256)": {
        "notice": "user buy Tokens"
      },
      "calculateShare(uint256,uint256,address[],uint256[])": {
        "notice": "after 1st two phases , its finnl phase where remaing user with amount in account get tokens"
      },
      "cancel()": {
        "notice": "cancel the sale"
      },
      "claimTokens()": {
        "notice": "called by the investor the claim the tokens against investment."
      },
      "claimUserRefund()": {
        "notice": "called by investor to get refund incase of sale cancellation or failure to reach soft cap"
      },
      "enablePublicSale(uint256)": {
        "notice": "enable public or private sale time."
      },
      "finalize()": {
        "notice": "finalize the sale and withdraw raised funds"
      },
      "getUserRemainingFunds()": {
        "notice": "pout of total invested by user, how much amount left after paying for allocated tokens"
      },
      "removeWhitelist(address[])": {
        "notice": "remove usres from whitelist"
      },
      "setTime(uint256,uint256)": {
        "notice": "update start and end time before sale start"
      },
      "updateCalculation(address[])": {
        "notice": "update the user tokens share as per total investment"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23634,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 23637,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24966,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23506,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 23626,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22808,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "_whitelist",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23810,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 23879,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21107,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "Id",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 21110,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "isInitialized",
        "offset": 0,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 21113,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "pool",
        "offset": 0,
        "slot": "154",
        "type": "t_struct(SubscriptionPoolDetails)21175_storage"
      },
      {
        "astId": 21116,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "liquidity",
        "offset": 0,
        "slot": "164",
        "type": "t_struct(LiquidityDetails)21187_storage"
      },
      {
        "astId": 21119,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "currentStatus",
        "offset": 0,
        "slot": "169",
        "type": "t_enum(Status)21214"
      },
      {
        "astId": 21122,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "distribution",
        "offset": 0,
        "slot": "170",
        "type": "t_struct(tokenDistribution)21209_storage"
      },
      {
        "astId": 21125,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "fundToken",
        "offset": 0,
        "slot": "175",
        "type": "t_contract(IERC20Extented)23359"
      },
      {
        "astId": 21127,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "fundByTokens",
        "offset": 20,
        "slot": "175",
        "type": "t_bool"
      },
      {
        "astId": 21129,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "decimals",
        "offset": 21,
        "slot": "175",
        "type": "t_uint8"
      },
      {
        "astId": 21131,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "canCalculate",
        "offset": 22,
        "slot": "175",
        "type": "t_bool"
      },
      {
        "astId": 21133,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "isPrivateMode",
        "offset": 23,
        "slot": "175",
        "type": "t_bool"
      },
      {
        "astId": 21135,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "isRefund",
        "offset": 24,
        "slot": "175",
        "type": "t_bool"
      },
      {
        "astId": 21137,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "176",
        "type": "t_address"
      },
      {
        "astId": 21139,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "tokenFee",
        "offset": 0,
        "slot": "177",
        "type": "t_uint256"
      },
      {
        "astId": 21141,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "totalRaised",
        "offset": 0,
        "slot": "178",
        "type": "t_uint256"
      },
      {
        "astId": 21143,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "totalContribution",
        "offset": 0,
        "slot": "179",
        "type": "t_uint256"
      },
      {
        "astId": 21145,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "180",
        "type": "t_uint256"
      },
      {
        "astId": 21148,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "investors",
        "offset": 0,
        "slot": "181",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21153,
        "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "182",
        "type": "t_mapping(t_address,t_struct(UserDetails)21196_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Extented)23359": {
        "encoding": "inplace",
        "label": "contract IERC20Extented",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)23495": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(Status)21214": {
        "encoding": "inplace",
        "label": "enum GempadSubscriptionPool.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserDetails)21196_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GempadSubscriptionPool.UserDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDetails)21196_storage"
      },
      "t_struct(LiquidityDetails)21187_storage": {
        "encoding": "inplace",
        "label": "struct GempadSubscriptionPool.LiquidityDetails",
        "members": [
          {
            "astId": 21178,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IUniswapV2Router02)23495"
          },
          {
            "astId": 21180,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "liquidityPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21182,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "lockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21184,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "locker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 21186,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "liquidityAdded",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SubscriptionPoolDetails)21175_storage": {
        "encoding": "inplace",
        "label": "struct GempadSubscriptionPool.SubscriptionPoolDetails",
        "members": [
          {
            "astId": 21156,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Extented)23359"
          },
          {
            "astId": 21158,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "hardCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21160,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "softCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21162,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "userHardCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21164,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "sellRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21166,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "listingRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21168,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 21170,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "endTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 21172,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "finalizeTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 21174,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "publicSaleTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(UserDetails)21196_storage": {
        "encoding": "inplace",
        "label": "struct GempadSubscriptionPool.UserDetails",
        "members": [
          {
            "astId": 21189,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "userInvest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21191,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "userDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21193,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "userAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21195,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "userClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(tokenDistribution)21209_storage": {
        "encoding": "inplace",
        "label": "struct GempadSubscriptionPool.tokenDistribution",
        "members": [
          {
            "astId": 21198,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "totalAllocated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21200,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "surplusTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21202,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "totalSurplusFunds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21205,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "leftInvestors",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21208,
            "contract": "@gempad/subscriptionpool/contracts/GempadSubscriptionPool.sol:GempadSubscriptionPool",
            "label": "amounts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}