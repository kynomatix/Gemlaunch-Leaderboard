{
  "address": "0x20dA9c74d4C7624eC7943199B865D564D9eB669f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "taxFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidityFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "charityBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "pinkAntiBot_",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceivingAddress",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFlatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c0c2b1fae80465da0a01ba439038fd0f2492a9ffc115ec58975bd16defba634",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0x20dA9c74d4C7624eC7943199B865D564D9eB669f",
    "transactionIndex": 9,
    "gasUsed": "3492660",
    "logsBloom": "0x
    "blockHash": "0x391aec75b7cbc7e8de00ab061130b19adf1d3b24244e9c145a47bbbecc59aca1",
    "transactionHash": "0x8c0c2b1fae80465da0a01ba439038fd0f2492a9ffc115ec58975bd16defba634",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 38679165,
        "transactionHash": "0x8c0c2b1fae80465da0a01ba439038fd0f2492a9ffc115ec58975bd16defba634",
        "address": "0x20dA9c74d4C7624eC7943199B865D564D9eB669f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d36409486efa4cc32c0472efa7871ed03b8bed0"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x391aec75b7cbc7e8de00ab061130b19adf1d3b24244e9c145a47bbbecc59aca1"
      }
    ],
    "blockNumber": 38679165,
    "cumulativeGasUsed": "6613939",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfc3f631C16dAeAf1135Eb56fd0612735e64d463D",
    "0xB79e0a67CBeF5e92888e84eC7AB21A313F87605f"
  ],
  "numDeployments": 1,
  "solcInputHash": "1388602b70d805f9d7c0820efb67716c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"taxFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"charityBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"pinkAntiBot_\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceivingAddress\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol\":\"AntibotLiquidityGeneratorTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/generatetokens/contracts/AntiBotLiquidityGeneratorToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../interfaces/IGemAntiBot.sol\\\";\\r\\nimport \\\"./BaseToken.sol\\\";\\r\\n\\r\\ncontract AntiBotLiquidityGeneratorToken is IERC20, Ownable, BaseToken {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    uint256 public constant VERSION = 8;\\r\\n\\r\\n    uint256 public constant MAX_FEE = 10**4 / 4;\\r\\n\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n    mapping(address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal;\\r\\n    uint256 private _rTotal;\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    uint256 public _taxFee;\\r\\n    uint256 private _previousTaxFee;\\r\\n\\r\\n    uint256 public _liquidityFee;\\r\\n    uint256 private _previousLiquidityFee;\\r\\n\\r\\n    uint256 public _charityFee;\\r\\n    uint256 private _previousCharityFee;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n    address public _charityAddress;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled;\\r\\n\\r\\n    uint256 private numTokensSellToAddToLiquidity;\\r\\n\\r\\n    IGemAntiBot public gemAntiBot;\\r\\n    bool public enableAntiBot;\\r\\n\\r\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n    event SwapAndLiquifyAmountUpdated(uint256 amount);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address owner_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        address router_,\\r\\n        address charityAddress_,\\r\\n        uint16 taxFeeBps_,\\r\\n        uint16 liquidityFeeBps_,\\r\\n        uint16 charityFeeBps_,\\r\\n        address pinkAntiBot_\\r\\n    ) payable {\\r\\n        if (charityAddress_ == address(0)) {\\r\\n            require(\\r\\n                charityFeeBps_ == 0,\\r\\n                \\\"Cant set both charity address to address 0 and charity percent more than 0\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            taxFeeBps_ + liquidityFeeBps_ + charityFeeBps_ <= MAX_FEE,\\r\\n            \\\"Total fee is over 25%\\\"\\r\\n        );\\r\\n\\r\\n        gemAntiBot = IGemAntiBot(pinkAntiBot_);\\r\\n        gemAntiBot.setTokenOwner(owner_);\\r\\n        enableAntiBot = true;\\r\\n\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 9;\\r\\n\\r\\n        _tTotal = totalSupply_;\\r\\n        _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\r\\n        _taxFee = taxFeeBps_;\\r\\n        _previousTaxFee = _taxFee;\\r\\n\\r\\n        _liquidityFee = liquidityFeeBps_;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n        _charityAddress = charityAddress_;\\r\\n        _charityFee = charityFeeBps_;\\r\\n        _previousCharityFee = _charityFee;\\r\\n\\r\\n        numTokensSellToAddToLiquidity = totalSupply_.div(10**3); // 0.1%\\r\\n\\r\\n        swapAndLiquifyEnabled = true;\\r\\n\\r\\n        _rOwned[owner_] = _rTotal;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\\r\\n        // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        // exclude owner and this contract from fee\\r\\n        _isExcludedFromFee[owner_] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        emit Transfer(address(0), owner_, _tTotal);\\r\\n\\r\\n        emit TokenCreated(\\r\\n            owner_,\\r\\n            address(this),\\r\\n            TokenType.antiBotLiquidityGenerator,\\r\\n            VERSION\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function setEnableAntiBot(bool _enable) external onlyOwner {\\r\\n        enableAntiBot = _enable;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            !_isExcluded[sender],\\r\\n            \\\"Excluded addresses cannot call this function\\\"\\r\\n        );\\r\\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tCharity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeCharityFee(tCharity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function setTaxFeePercent(uint256 taxFeeBps) external onlyOwner {\\r\\n        _taxFee = taxFeeBps;\\r\\n        require(\\r\\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\\r\\n            \\\"Total fee is over 25%\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setLiquidityFeePercent(uint256 liquidityFeeBps)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _liquidityFee = liquidityFeeBps;\\r\\n        require(\\r\\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\\r\\n            \\\"Total fee is over 25%\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setCharityFeePercent(uint256 charityFeeBps) external onlyOwner {\\r\\n        _charityFee = charityFeeBps;\\r\\n        require(\\r\\n            _taxFee + _liquidityFee + _charityFee <= MAX_FEE,\\r\\n            \\\"Total fee is over 25%\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(uint256 _amount) external onlyOwner {\\r\\n        require(\\r\\n            _amount >= totalSupply().mul(5).div(10**4),\\r\\n            \\\"Swapback amount should be at least 0.05% of total supply\\\"\\r\\n        );\\r\\n        numTokensSellToAddToLiquidity = _amount;\\r\\n        emit SwapAndLiquifyAmountUpdated(_amount);\\r\\n    }\\r\\n\\r\\n    //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tCharity\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tCharity,\\r\\n            _getRate()\\r\\n        );\\r\\n        return (\\r\\n            rAmount,\\r\\n            rTransferAmount,\\r\\n            rFee,\\r\\n            tTransferAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tCharity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n        uint256 tCharityFee = calculateCharityFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(\\r\\n            tCharityFee\\r\\n        );\\r\\n        return (tTransferAmount, tFee, tLiquidity, tCharityFee);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 tCharity,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        uint256 rCharity = tCharity.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(\\r\\n            rCharity\\r\\n        );\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _takeCharityFee(uint256 tCharity) private {\\r\\n        if (tCharity > 0) {\\r\\n            uint256 currentRate = _getRate();\\r\\n            uint256 rCharity = tCharity.mul(currentRate);\\r\\n            _rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\\r\\n            if (_isExcluded[_charityAddress])\\r\\n                _tOwned[_charityAddress] = _tOwned[_charityAddress].add(\\r\\n                    tCharity\\r\\n                );\\r\\n            emit Transfer(_msgSender(), _charityAddress, tCharity);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount.mul(_taxFee).div(10**4);\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount.mul(_liquidityFee).div(10**4);\\r\\n    }\\r\\n\\r\\n    function calculateCharityFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_charityAddress == address(0)) return 0;\\r\\n        return _amount.mul(_charityFee).div(10**4);\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousCharityFee = _charityFee;\\r\\n\\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _charityFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _charityFee = _previousCharityFee;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        if (enableAntiBot) {\\r\\n            gemAntiBot.onPreTransferCheck(from, to, amount);\\r\\n        }\\r\\n\\r\\n        // is the token balance of this contract address over the min number of\\r\\n        // tokens that we need to initiate a swap + liquidity lock?\\r\\n        // also, don't get caught in a circular liquidity event.\\r\\n        // also, don't swap & liquify if sender is uniswap pair.\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool overMinTokenBalance = contractTokenBalance >=\\r\\n            numTokensSellToAddToLiquidity;\\r\\n        if (\\r\\n            overMinTokenBalance &&\\r\\n            !inSwapAndLiquify &&\\r\\n            from != uniswapV2Pair &&\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            //add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n\\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n\\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0xdead),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        if (!takeFee) removeAllFee();\\r\\n\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (!takeFee) restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tCharity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeCharityFee(tCharity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tCharity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeCharityFee(tCharity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tCharity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeCharityFee(tCharity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9940752da9407a1a639114b496e4cf631e2dc96db152e1e87bcbb66624bad683\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nenum TokenType {\\r\\n    standard,\\r\\n    antiBotStandard,\\r\\n    liquidityGenerator,\\r\\n    antiBotLiquidityGenerator,\\r\\n    baby,\\r\\n    antiBotBaby,\\r\\n    buybackBaby,\\r\\n    antiBotBuybackBaby\\r\\n}\\r\\n\\r\\nabstract contract BaseToken {\\r\\n    event TokenCreated(\\r\\n        address indexed owner,\\r\\n        address indexed token,\\r\\n        TokenType tokenType,\\r\\n        uint256 version\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xe57aac125279fbc2477f980a9e1d25fe5cd641590a78079f18c3466275a78de3\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/proxy/Clones.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport './TokenFactoryBase.sol';\\r\\nimport '../AntiBotLiquidityGeneratorToken.sol';\\r\\nimport '../../interfaces/ILiquidityGeneratorToken.sol';\\r\\n\\r\\ncontract AntibotLiquidityGeneratorTokenFactory is TokenFactoryBase {\\r\\n    using Address for address payable;\\r\\n\\r\\n    constructor(\\r\\n        address factoryManager_,\\r\\n        address implementation_\\r\\n    ) TokenFactoryBase(factoryManager_, implementation_) {}\\r\\n\\r\\n    function create(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 totalSupply,\\r\\n        address router,\\r\\n        address charity,\\r\\n        uint16 taxFeeBps,\\r\\n        uint16 liquidityFeeBps,\\r\\n        uint16 charityBps,\\r\\n        address pinkAntiBot_\\r\\n    ) external payable enoughFee nonReentrant returns (address) {\\r\\n        refundExcessiveFee();\\r\\n        payable(feeTo).sendValue(flatFee);\\r\\n        AntiBotLiquidityGeneratorToken ltoken = new AntiBotLiquidityGeneratorToken(\\r\\n            msg.sender,\\r\\n            name,\\r\\n            symbol,\\r\\n            totalSupply,\\r\\n            router,\\r\\n            charity,\\r\\n            taxFeeBps,\\r\\n            liquidityFeeBps,\\r\\n            charityBps,\\r\\n            pinkAntiBot_\\r\\n        );\\r\\n        ltoken.transferOwnership(msg.sender);\\r\\n        assignTokenToOwner(msg.sender, address(ltoken), 8);\\r\\n        emit TokenCreated(msg.sender, address(ltoken), 8);\\r\\n        return address(ltoken);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbfe5f5b57246c3ed752b808c8db3c70dd28364270ad7520f04547d5beda75495\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/contracts/factories/TokenFactoryBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4; \\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../../interfaces/IFactoryManager.sol\\\";\\r\\n\\r\\n\\r\\ncontract TokenFactoryBase is Ownable, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address payable;\\r\\n\\r\\n  address public factoryManager;\\r\\n  address public implementation;\\r\\n  address public feeTo;\\r\\n  uint256 public flatFee;\\r\\n\\r\\n  event TokenCreated(\\r\\n      address indexed owner,\\r\\n      address indexed token,\\r\\n      uint8 tokenType\\r\\n  );\\r\\n\\r\\n  modifier enoughFee() {\\r\\n    require(msg.value >= flatFee, \\\"Flat fee\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address factoryManager_, address implementation_) {\\r\\n    factoryManager = factoryManager_;\\r\\n    implementation = implementation_;\\r\\n    feeTo = msg.sender;\\r\\n    flatFee = 10_000_000 gwei;\\r\\n  }\\r\\n\\r\\n  function setImplementation(address implementation_) external onlyOwner {\\r\\n    implementation = implementation_;\\r\\n  }\\r\\n\\r\\n  function setFeeTo(address feeReceivingAddress) external onlyOwner {\\r\\n    feeTo = feeReceivingAddress;\\r\\n  }\\r\\n\\r\\n  function setFlatFee(uint256 fee) external onlyOwner {\\r\\n    flatFee = fee;\\r\\n  }\\r\\n\\r\\n  function assignTokenToOwner(address owner, address token, uint8 tokenType) internal {\\r\\n    IFactoryManager(factoryManager).assignTokensToOwner(owner, token, tokenType);\\r\\n  }\\r\\n\\r\\n  function refundExcessiveFee() internal {\\r\\n    uint256 refund = msg.value.sub(flatFee);\\r\\n    if (refund > 0) {\\r\\n      payable(msg.sender).sendValue(refund);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe8af90de5def92b069e656fae61c3943f289f91a73dd76784261d759d2b5d672\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IFactoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IFactoryManager {\\r\\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) external;\\r\\n}\",\"keccak256\":\"0x234fb96bdce3a973a14a19ae737ee46547abbeeb12d6ba29069505d615728bd3\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IGemAntiBot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IGemAntiBot {\\r\\n  function setTokenOwner(address owner) external;\\r\\n\\r\\n  function onPreTransferCheck(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x484d7da019f09702770c1680193b8bb4e23a5f1ad90692cbc775231105f7b15e\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/ILiquidityGeneratorToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILiquidityGeneratorToken {\\r\\n    function initialize (\\r\\n        address owner_,\\r\\n        string memory name_, \\r\\n        string memory symbol_, \\r\\n        uint256 totalSupply_, \\r\\n        address router_,\\r\\n        address charityAddress_,\\r\\n        uint16 taxFeeBps_, \\r\\n        uint16 liquidityFeeBps_,\\r\\n        uint16 charityFeeBps_\\r\\n        // uint16 maxTxBps_\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x850e3f702eeeea1a62039aa1419b84366da2906eddff97d0832011bd32b1ee50\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x58d783f30f4153c76592c809489a96ea3f58aa8f403653be4fd6e9c511d5424e\",\"license\":\"UNLICENSED\"},\"@gempad/generatetokens/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x36f8de121bb2e11f10c39f6d1039d02ee02a9c7924bb6002fd247803762aca21\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613d10380380613d1083398101604081905261002f916100f8565b818161003a3361008c565b60018055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169181169190911790915560048054909116331790555050662386f26fc1000060055561012b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f357600080fd5b919050565b6000806040838503121561010b57600080fd5b610114836100dc565b9150610122602084016100dc565b90509250929050565b613bd68061013a6000396000f3fe608060405260043610620000cb5760003560e01c80638da5cb5b116200007d578063d9eb59471162000054578063d9eb594714620001ee578063f2fde38b1462000215578063f46901ed146200023a57600080fd5b80638da5cb5b1462000192578063a7b228e714620001b2578063d784d42614620001c957600080fd5b806323fa495a11620000b257806323fa495a14620001315780635c60da1b1462000158578063715018a6146200017a57600080fd5b8063017e7e5814620000d0578063032b5a73146200010f575b600080fd5b348015620000dd57600080fd5b50600454620000f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200011c57600080fd5b50600254620000f2906001600160a01b031681565b3480156200013e57600080fd5b5062000156620001503660046200085b565b6200025f565b005b3480156200016557600080fd5b50600354620000f2906001600160a01b031681565b3480156200018757600080fd5b50620001566200026e565b3480156200019f57600080fd5b506000546001600160a01b0316620000f2565b620000f2620001c336600462000950565b62000286565b348015620001d657600080fd5b5062000156620001e836600462000a35565b6200043d565b348015620001fb57600080fd5b506200020660055481565b60405190815260200162000106565b3480156200022257600080fd5b50620001566200023436600462000a35565b62000476565b3480156200024757600080fd5b50620001566200025936600462000a35565b6200050c565b6200026962000545565b600555565b6200027862000545565b620002846000620005a1565b565b6000600554341015620002e05760405162461bcd60e51b815260206004820152600860248201527f466c61742066656500000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b620002ea620005fe565b620002f462000659565b60055460045462000311916001600160a01b039091169062000682565b6000338b8b8b8b8b8b8b8b8b6040516200032b906200084d565b620003409a9998979695949392919062000a9b565b604051809103906000f0801580156200035d573d6000803e3d6000fd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b158015620003bc57600080fd5b505af1158015620003d1573d6000803e3d6000fd5b50505050620003e333826008620007a6565b604051600881526001600160a01b0382169033907f49fab9e82f453b3b0e1b0e507a645552d8b351f9b3cb0c9a7b4df572780c6b2f9060200160405180910390a390506200043060018055565b9998505050505050505050565b6200044762000545565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6200048062000545565b6001600160a01b038116620004fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620002d7565b6200050981620005a1565b50565b6200051662000545565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620002845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002d7565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403620006525760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620002d7565b6002600155565b600062000672600554346200083690919063ffffffff16565b9050801562000509576200050933825b80471015620006d45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401620002d7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811462000723576040519150601f19603f3d011682016040523d82523d6000602084013e62000728565b606091505b5050905080620007a15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620002d7565b505050565b6002546040517f28220dea0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152848116602483015260ff84166044830152909116906328220dea90606401600060405180830381600087803b1580156200081857600080fd5b505af11580156200082d573d6000803e3d6000fd5b50505050505050565b600062000844828462000b1e565b90505b92915050565b6130608062000b4183390190565b6000602082840312156200086e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200089d57600080fd5b813567ffffffffffffffff80821115620008bb57620008bb62000875565b604051601f8301601f19908116603f01168101908282118183101715620008e657620008e662000875565b816040528381528660208588010111156200090057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200093857600080fd5b919050565b803561ffff811681146200093857600080fd5b60008060008060008060008060006101208a8c0312156200097057600080fd5b893567ffffffffffffffff808211156200098957600080fd5b620009978d838e016200088b565b9a5060208c0135915080821115620009ae57600080fd5b50620009bd8c828d016200088b565b98505060408a01359650620009d560608b0162000920565b9550620009e560808b0162000920565b9450620009f560a08b016200093d565b935062000a0560c08b016200093d565b925062000a1560e08b016200093d565b915062000a266101008b0162000920565b90509295985092959850929598565b60006020828403121562000a4857600080fd5b620008448262000920565b6000815180845260005b8181101562000a7b5760208185018101518683018201520162000a5d565b506000602082860101526020601f19601f83011685010191505092915050565b60006101406001600160a01b03808e16845281602085015262000ac18285018e62000a53565b9150838203604085015262000ad7828d62000a53565b606085019b909b529889166080840152505094861660a086015261ffff93841660c086015291831660e0850152909116610100830152909116610120909101529392505050565b818103818111156200084757634e487b7160e01b600052601160045260246000fdfe60806040526040516200306038038062003060833981016040819052620000269162000635565b6200003133620004d9565b6001600160a01b038516620000d15761ffff821615620000d15760405162461bcd60e51b815260206004820152604a60248201527f43616e742073657420626f74682063686172697479206164647265737320746f60448201527f2061646472657373203020616e6420636861726974792070657263656e74206d60648201526906f7265207468616e20360b41b608482015260a4015b60405180910390fd5b6109c482620000e1858762000744565b620000ed919062000744565b61ffff161115620001415760405162461bcd60e51b815260206004820152601560248201527f546f74616c20666565206973206f7665722032352500000000000000000000006044820152606401620000c8565b601780546001600160a01b0319166001600160a01b038381169182179092556040516318e02bd960e01b8152918c166004830152906318e02bd990602401600060405180830381600087803b1580156200019a57600080fd5b505af1158015620001af573d6000803e3d6000fd5b50506017805460ff60a01b1916600160a01b17905550600a9050620001d58a82620007f8565b50600b620001e48982620007f8565b50600c805460ff1916600917905560078790556200020587600019620008da565b6200021390600019620008f1565b60085561ffff848116600d819055600e55838116600f819055601055601580546001600160a01b0319166001600160a01b0388161790558216601181905560125562000262876103e862000529565b6016556015805460ff60a81b1916600160a81b1790556008546001600160a01b03808c1660009081526001602090815260409182902093909355805163c45a015560e01b8152905189939284169263c45a015592600480820193918290030181865afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd919062000907565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000371919062000907565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620003bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e5919062000907565b601480546001600160a01b03199081166001600160a01b0393841617909155601380549091168383161790558b166000818152600460209081526040808320805460ff1990811660019081179092553085528285208054909116909117905560075490519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3306001600160a01b03168b6001600160a01b03167f56358b41df5fa59f5639228f0930994cbdde383c8a8fd74e06c04e1deebe356260036008604051620004c092919062000925565b60405180910390a3505050505050505050505062000969565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000537828462000952565b90505b92915050565b80516001600160a01b03811681146200055857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200058557600080fd5b81516001600160401b0380821115620005a257620005a26200055d565b604051601f8301601f19908116603f01168101908282118183101715620005cd57620005cd6200055d565b81604052838152602092508683858801011115620005ea57600080fd5b600091505b838210156200060e5785820183015181830184015290820190620005ef565b600093810190920192909252949350505050565b805161ffff811681146200055857600080fd5b6000806000806000806000806000806101408b8d0312156200065657600080fd5b620006618b62000540565b60208c0151909a506001600160401b03808211156200067f57600080fd5b6200068d8e838f0162000573565b9a5060408d0151915080821115620006a457600080fd5b50620006b38d828e0162000573565b98505060608b01519650620006cb60808c0162000540565b9550620006db60a08c0162000540565b9450620006eb60c08c0162000622565b9350620006fb60e08c0162000622565b92506200070c6101008c0162000622565b91506200071d6101208c0162000540565b90509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156200076257620007626200072e565b5092915050565b600181811c908216806200077e57607f821691505b6020821081036200079f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007f357600081815260208120601f850160051c81016020861015620007ce5750805b601f850160051c820191505b81811015620007ef57828155600101620007da565b5050505b505050565b81516001600160401b038111156200081457620008146200055d565b6200082c8162000825845462000769565b84620007a5565b602080601f8311600181146200086457600084156200084b5750858301515b600019600386901b1c1916600185901b178555620007ef565b600085815260208120601f198616915b82811015620008955788860151825594840194600190910190840162000874565b5085821015620008b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601260045260246000fd5b600082620008ec57620008ec620008c4565b500690565b818103818111156200053a576200053a6200072e565b6000602082840312156200091a57600080fd5b620005378262000540565b60408101600884106200094857634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600082620009645762000964620008c4565b500490565b6126e780620009796000396000f3fe6080604052600436106102a45760003560e01c806349bd5a5e1161016e5780638da5cb5b116100cb578063af41063b1161007f578063dd62ed3e11610064578063dd62ed3e1461074f578063f2fde38b14610795578063ffa1ad74146107b557600080fd5b8063af41063b14610719578063bc063e1a1461073957600080fd5b806395d89b41116100b057806395d89b41146106c4578063a457c2d7146106d9578063a9059cbb146106f957600080fd5b80638da5cb5b146106865780638ee88c53146106a457600080fd5b806370a082311161012257806377ec74491161010757806377ec74491461060d578063796431d01461062d57806388f820201461064d57600080fd5b806370a08231146105d8578063715018a6146105f857600080fd5b806352390c021161015357806352390c02146105695780635342acb4146105895780636bc87c3a146105c257600080fd5b806349bd5a5e146105285780634a74bb021461054857600080fd5b8063241ec3be1161021c5780633b124fe7116101d057806340f8007a116101b557806340f8007a146104d2578063437823ec146104e85780634549b0391461050857600080fd5b80633b124fe71461049c5780633bd5d173146104b257600080fd5b8063313ce56711610201578063313ce5671461043a5780633685d4191461045c578063395093511461047c57600080fd5b8063241ec3be146103f95780632d8381191461041a57600080fd5b80631694505e1161027357806319a8ac9e1161025857806319a8ac9e146103995780631f46b1c6146103b957806323b872dd146103d957600080fd5b80631694505e1461034c57806318160ddd1461038457600080fd5b8063061c82d0146102b057806306fdde03146102d2578063095ea7b3146102fd57806313114a9d1461032d57600080fd5b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb366004612319565b6107ca565b005b3480156102de57600080fd5b506102e761084c565b6040516102f49190612332565b60405180910390f35b34801561030957600080fd5b5061031d610318366004612395565b6108de565b60405190151581526020016102f4565b34801561033957600080fd5b506009545b6040519081526020016102f4565b34801561035857600080fd5b5060135461036c906001600160a01b031681565b6040516001600160a01b0390911681526020016102f4565b34801561039057600080fd5b5060075461033e565b3480156103a557600080fd5b5060155461036c906001600160a01b031681565b3480156103c557600080fd5b506102d06103d43660046123d6565b6108f5565b3480156103e557600080fd5b5061031d6103f43660046123f1565b61091b565b34801561040557600080fd5b5060175461031d90600160a01b900460ff1681565b34801561042657600080fd5b5061033e610435366004612319565b610984565b34801561044657600080fd5b50600c5460405160ff90911681526020016102f4565b34801561046857600080fd5b506102d0610477366004612432565b610a1b565b34801561048857600080fd5b5061031d610497366004612395565b610bc9565b3480156104a857600080fd5b5061033e600d5481565b3480156104be57600080fd5b506102d06104cd366004612319565b610bff565b3480156104de57600080fd5b5061033e60115481565b3480156104f457600080fd5b506102d0610503366004612432565b610cfc565b34801561051457600080fd5b5061033e61052336600461244f565b610d28565b34801561053457600080fd5b5060145461036c906001600160a01b031681565b34801561055457600080fd5b5060155461031d90600160a81b900460ff1681565b34801561057557600080fd5b506102d0610584366004612432565b610db7565b34801561059557600080fd5b5061031d6105a4366004612432565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156105ce57600080fd5b5061033e600f5481565b3480156105e457600080fd5b5061033e6105f3366004612432565b610ef5565b34801561060457600080fd5b506102d0610f54565b34801561061957600080fd5b5060175461036c906001600160a01b031681565b34801561063957600080fd5b506102d0610648366004612319565b610f68565b34801561065957600080fd5b5061031d610668366004612432565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561069257600080fd5b506000546001600160a01b031661036c565b3480156106b057600080fd5b506102d06106bf366004612319565b611040565b3480156106d057600080fd5b506102e7611063565b3480156106e557600080fd5b5061031d6106f4366004612395565b611072565b34801561070557600080fd5b5061031d610714366004612395565b6110c1565b34801561072557600080fd5b506102d0610734366004612319565b6110ce565b34801561074557600080fd5b5061033e6109c481565b34801561075b57600080fd5b5061033e61076a36600461247b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b3480156107a157600080fd5b506102d06107b0366004612432565b6110f1565b3480156107c157600080fd5b5061033e600881565b6107d261117e565b600d819055601154600f546109c491906107ec90846124ca565b6107f691906124ca565b11156108495760405162461bcd60e51b815260206004820152601560248201527f546f74616c20666565206973206f76657220323525000000000000000000000060448201526064015b60405180910390fd5b50565b6060600a805461085b906124dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610887906124dd565b80156108d45780601f106108a9576101008083540402835291602001916108d4565b820191906000526020600020905b8154815290600101906020018083116108b757829003601f168201915b5050505050905090565b60006108eb3384846111d8565b5060015b92915050565b6108fd61117e565b60178054911515600160a01b0260ff60a01b19909216919091179055565b6000610928848484611331565b61097a843361097585604051806060016040528060288152602001612665602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611606565b6111d8565b5060019392505050565b60006008548211156109fe5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201527f65666c656374696f6e73000000000000000000000000000000000000000000006064820152608401610840565b6000610a08611632565b9050610a148382611655565b9392505050565b610a2361117e565b6001600160a01b03811660009081526005602052604090205460ff16610a8b5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610840565b60005b600654811015610bc557816001600160a01b031660068281548110610ab557610ab5612517565b6000918252602090912001546001600160a01b031603610bb35760068054610adf9060019061252d565b81548110610aef57610aef612517565b600091825260209091200154600680546001600160a01b039092169183908110610b1b57610b1b612517565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610b8057610b80612540565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190555050565b80610bbd81612556565b915050610a8e565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916108eb9185906109759086611661565b3360008181526005602052604090205460ff1615610c855760405162461bcd60e51b815260206004820152602c60248201527f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460448201527f6869732066756e6374696f6e00000000000000000000000000000000000000006064820152608401610840565b6000610c908361166d565b5050506001600160a01b038616600090815260016020526040902054939450610cbe939250849150506116c8565b6001600160a01b038316600090815260016020526040902055600854610ce490826116c8565b600855600954610cf49084611661565b600955505050565b610d0461117e565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600754831115610d7c5760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401610840565b81610d9c576000610d8c8461166d565b509496506108ef95505050505050565b6000610da78461166d565b509396506108ef95505050505050565b610dbf61117e565b6001600160a01b03811660009081526005602052604090205460ff1615610e285760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610840565b6001600160a01b03811660009081526001602052604090205415610e82576001600160a01b038116600090815260016020526040902054610e6890610984565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b6001600160a01b03811660009081526005602052604081205460ff1615610f3257506001600160a01b031660009081526002602052604090205490565b6001600160a01b0382166000908152600160205260409020546108ef90610984565b610f5c61117e565b610f6660006116d4565b565b610f7061117e565b610f90612710610f8a6005610f8460075490565b90611731565b90611655565b8110156110055760405162461bcd60e51b815260206004820152603860248201527f537761706261636b20616d6f756e742073686f756c64206265206174206c656160448201527f737420302e303525206f6620746f74616c20737570706c7900000000000000006064820152608401610840565b60168190556040518181527ff7edd1a72d399eb95c56c07c5a26f00a9096735269c96c75caa8fc4e15bcd5d29060200160405180910390a150565b61104861117e565b600f819055601154600d546109c491906107ec9084906124ca565b6060600b805461085b906124dd565b60006108eb33846109758560405180606001604052806025815260200161268d602591393360009081526003602090815260408083206001600160a01b038d1684529091529020549190611606565b60006108eb338484611331565b6110d661117e565b6011819055600f54600d546109c49183916107ec91906124ca565b6110f961117e565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610840565b610849816116d4565b6000546001600160a01b03163314610f665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610840565b6001600160a01b0383166112535760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0382166112cf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166113ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0382166114295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610840565b6000811161149f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e207a65726f00000000000000000000000000000000000000000000006064820152608401610840565b601754600160a01b900460ff1615611539576017546040517f487608580000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301526044820184905290911690634876085890606401600060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b505050505b600061154430610ef5565b601654909150811080159081906115655750601554600160a01b900460ff16155b801561157f57506014546001600160a01b03868116911614155b80156115945750601554600160a81b900460ff165b156115a75760165491506115a78261173d565b6001600160a01b03851660009081526004602052604090205460019060ff16806115e957506001600160a01b03851660009081526004602052604090205460ff165b156115f2575060005b6115fe868686846117e4565b505050505050565b6000818484111561162a5760405162461bcd60e51b81526004016108409190612332565b505050900390565b600080600061163f611984565b909250905061164e8282611655565b9250505090565b6000610a14828461256f565b6000610a1482846124ca565b60008060008060008060008060008060006116878c611b06565b935093509350935060008060006116a88f8787876116a3611632565b611b5b565b919f509d509b509599509397509195509350505050919395979092949650565b6000610a14828461252d565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610a148284612591565b6015805460ff60a01b1916600160a01b179055600061175d826002611655565b9050600061176b83836116c8565b90504761177783611bbd565b600061178347836116c8565b905061178f8382611d41565b60408051858152602081018390529081018490527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a150506015805460ff60a01b19169055505050565b8061180e5761180e600d8054600e55600f8054601055601180546012556000928390559082905555565b6001600160a01b03841660009081526005602052604090205460ff16801561184f57506001600160a01b03831660009081526005602052604090205460ff16155b156118645761185f848484611e0c565b611962565b6001600160a01b03841660009081526005602052604090205460ff161580156118a557506001600160a01b03831660009081526005602052604090205460ff165b156118b55761185f848484611f52565b6001600160a01b03841660009081526005602052604090205460ff161580156118f757506001600160a01b03831660009081526005602052604090205460ff16155b156119075761185f848484612011565b6001600160a01b03841660009081526005602052604090205460ff16801561194757506001600160a01b03831660009081526005602052604090205460ff165b156119575761185f84848461206b565b611962848484612011565b8061197e5761197e600e54600d55601054600f55601254601155565b50505050565b6008546007546000918291825b600654811015611ad6578260016000600684815481106119b3576119b3612517565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611a1e57508160026000600684815481106119f7576119f7612517565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611a3457600854600754945094505050509091565b611a7a6001600060068481548110611a4e57611a4e612517565b60009182526020808320909101546001600160a01b0316835282019290925260400190205484906116c8565b9250611ac26002600060068481548110611a9657611a96612517565b60009182526020808320909101546001600160a01b0316835282019290925260400190205483906116c8565b915080611ace81612556565b915050611991565b50600754600854611ae691611655565b821015611afd576008546007549350935050509091565b90939092509050565b6000806000806000611b17866120f4565b90506000611b2487612111565b90506000611b318861212e565b90506000611b4b82611b4585818d896116c8565b906116c8565b9993985091965094509092505050565b6000808080611b6a8986611731565b90506000611b788987611731565b90506000611b868988611731565b90506000611b948989611731565b90506000611ba882611b45858189896116c8565b949d949c50929a509298505050505050505050565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611bf257611bf2612517565b6001600160a01b03928316602091820292909201810191909152601354604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051919093169263ad5c46489260048083019391928290030181865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8891906125a8565b81600181518110611c9b57611c9b612517565b6001600160a01b039283166020918202929092010152601354611cc191309116846111d8565b6013546040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063791ac94790611d139085906000908690309042906004016125c5565b600060405180830381600087803b158015611d2d57600080fd5b505af11580156115fe573d6000803e3d6000fd5b601354611d599030906001600160a01b0316846111d8565b6013546040517ff305d71900000000000000000000000000000000000000000000000000000000815230600482015260248101849052600060448201819052606482015261dead60848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af1158015611de0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e059190612636565b5050505050565b6000806000806000806000611e208861166d565b9650965096509650965096509650611e6688600260008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b038b16600090815260026020908152604080832093909355600190522054611e9590886116c8565b6001600160a01b03808c1660009081526001602052604080822093909355908b1681522054611ec49087611661565b6001600160a01b038a16600090815260016020526040902055611ee682612164565b611eef816121ed565b611ef985846122f5565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051611f3e91815260200190565b60405180910390a350505050505050505050565b6000806000806000806000611f668861166d565b9650965096509650965096509650611fac87600160008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b03808c16600090815260016020908152604080832094909455918c16815260029091522054611fe29085611661565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611ec49087611661565b60008060008060008060006120258861166d565b9650965096509650965096509650611e9587600160008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b600080600080600080600061207f8861166d565b96509650965096509650965096506120c588600260008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b038b16600090815260026020908152604080832093909355600190522054611fac90886116c8565b60006108ef612710610f8a600d548561173190919063ffffffff16565b60006108ef612710610f8a600f548561173190919063ffffffff16565b6015546000906001600160a01b031661214957506000919050565b6108ef612710610f8a6011548561173190919063ffffffff16565b600061216e611632565b9050600061217c8383611731565b306000908152600160205260409020549091506121999082611661565b3060009081526001602090815260408083209390935560059052205460ff16156121e857306000908152600260205260409020546121d79084611661565b306000908152600260205260409020555b505050565b80156108495760006121fd611632565b9050600061220b8383611731565b6015546001600160a01b03166000908152600160205260409020549091506122339082611661565b601580546001600160a01b03908116600090815260016020908152604080832095909555925490911681526005909152205460ff16156122ae576015546001600160a01b03166000908152600260205260409020546122929084611661565b6015546001600160a01b03166000908152600260205260409020555b6015546001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161132491815260200190565b60085461230290836116c8565b6008556009546123129082611661565b6009555050565b60006020828403121561232b57600080fd5b5035919050565b600060208083528351808285015260005b8181101561235f57858101830151858201604001528201612343565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461084957600080fd5b600080604083850312156123a857600080fd5b82356123b381612380565b946020939093013593505050565b803580151581146123d157600080fd5b919050565b6000602082840312156123e857600080fd5b610a14826123c1565b60008060006060848603121561240657600080fd5b833561241181612380565b9250602084013561242181612380565b929592945050506040919091013590565b60006020828403121561244457600080fd5b8135610a1481612380565b6000806040838503121561246257600080fd5b82359150612472602084016123c1565b90509250929050565b6000806040838503121561248e57600080fd5b823561249981612380565b915060208301356124a981612380565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108ef576108ef6124b4565b600181811c908216806124f157607f821691505b60208210810361251157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b818103818111156108ef576108ef6124b4565b634e487b7160e01b600052603160045260246000fd5b600060018201612568576125686124b4565b5060010190565b60008261258c57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176108ef576108ef6124b4565b6000602082840312156125ba57600080fd5b8151610a1481612380565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156126155784516001600160a01b0316835293830193918301916001016125f0565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561264b57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122041e4fbe34c0f421596e40b3e93565fee2809dfd2381ba56d952550888413dcaf64736f6c63430008140033a2646970667358221220db24c42aee71396c91314c1b8f381461658175b19e1d3003b6f36d9635248f6d64736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000cb5760003560e01c80638da5cb5b116200007d578063d9eb59471162000054578063d9eb594714620001ee578063f2fde38b1462000215578063f46901ed146200023a57600080fd5b80638da5cb5b1462000192578063a7b228e714620001b2578063d784d42614620001c957600080fd5b806323fa495a11620000b257806323fa495a14620001315780635c60da1b1462000158578063715018a6146200017a57600080fd5b8063017e7e5814620000d0578063032b5a73146200010f575b600080fd5b348015620000dd57600080fd5b50600454620000f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200011c57600080fd5b50600254620000f2906001600160a01b031681565b3480156200013e57600080fd5b5062000156620001503660046200085b565b6200025f565b005b3480156200016557600080fd5b50600354620000f2906001600160a01b031681565b3480156200018757600080fd5b50620001566200026e565b3480156200019f57600080fd5b506000546001600160a01b0316620000f2565b620000f2620001c336600462000950565b62000286565b348015620001d657600080fd5b5062000156620001e836600462000a35565b6200043d565b348015620001fb57600080fd5b506200020660055481565b60405190815260200162000106565b3480156200022257600080fd5b50620001566200023436600462000a35565b62000476565b3480156200024757600080fd5b50620001566200025936600462000a35565b6200050c565b6200026962000545565b600555565b6200027862000545565b620002846000620005a1565b565b6000600554341015620002e05760405162461bcd60e51b815260206004820152600860248201527f466c61742066656500000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b620002ea620005fe565b620002f462000659565b60055460045462000311916001600160a01b039091169062000682565b6000338b8b8b8b8b8b8b8b8b6040516200032b906200084d565b620003409a9998979695949392919062000a9b565b604051809103906000f0801580156200035d573d6000803e3d6000fd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b158015620003bc57600080fd5b505af1158015620003d1573d6000803e3d6000fd5b50505050620003e333826008620007a6565b604051600881526001600160a01b0382169033907f49fab9e82f453b3b0e1b0e507a645552d8b351f9b3cb0c9a7b4df572780c6b2f9060200160405180910390a390506200043060018055565b9998505050505050505050565b6200044762000545565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6200048062000545565b6001600160a01b038116620004fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620002d7565b6200050981620005a1565b50565b6200051662000545565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620002845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002d7565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403620006525760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620002d7565b6002600155565b600062000672600554346200083690919063ffffffff16565b9050801562000509576200050933825b80471015620006d45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401620002d7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811462000723576040519150601f19603f3d011682016040523d82523d6000602084013e62000728565b606091505b5050905080620007a15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620002d7565b505050565b6002546040517f28220dea0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152848116602483015260ff84166044830152909116906328220dea90606401600060405180830381600087803b1580156200081857600080fd5b505af11580156200082d573d6000803e3d6000fd5b50505050505050565b600062000844828462000b1e565b90505b92915050565b6130608062000b4183390190565b6000602082840312156200086e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200089d57600080fd5b813567ffffffffffffffff80821115620008bb57620008bb62000875565b604051601f8301601f19908116603f01168101908282118183101715620008e657620008e662000875565b816040528381528660208588010111156200090057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200093857600080fd5b919050565b803561ffff811681146200093857600080fd5b60008060008060008060008060006101208a8c0312156200097057600080fd5b893567ffffffffffffffff808211156200098957600080fd5b620009978d838e016200088b565b9a5060208c0135915080821115620009ae57600080fd5b50620009bd8c828d016200088b565b98505060408a01359650620009d560608b0162000920565b9550620009e560808b0162000920565b9450620009f560a08b016200093d565b935062000a0560c08b016200093d565b925062000a1560e08b016200093d565b915062000a266101008b0162000920565b90509295985092959850929598565b60006020828403121562000a4857600080fd5b620008448262000920565b6000815180845260005b8181101562000a7b5760208185018101518683018201520162000a5d565b506000602082860101526020601f19601f83011685010191505092915050565b60006101406001600160a01b03808e16845281602085015262000ac18285018e62000a53565b9150838203604085015262000ad7828d62000a53565b606085019b909b529889166080840152505094861660a086015261ffff93841660c086015291831660e0850152909116610100830152909116610120909101529392505050565b818103818111156200084757634e487b7160e01b600052601160045260246000fdfe60806040526040516200306038038062003060833981016040819052620000269162000635565b6200003133620004d9565b6001600160a01b038516620000d15761ffff821615620000d15760405162461bcd60e51b815260206004820152604a60248201527f43616e742073657420626f74682063686172697479206164647265737320746f60448201527f2061646472657373203020616e6420636861726974792070657263656e74206d60648201526906f7265207468616e20360b41b608482015260a4015b60405180910390fd5b6109c482620000e1858762000744565b620000ed919062000744565b61ffff161115620001415760405162461bcd60e51b815260206004820152601560248201527f546f74616c20666565206973206f7665722032352500000000000000000000006044820152606401620000c8565b601780546001600160a01b0319166001600160a01b038381169182179092556040516318e02bd960e01b8152918c166004830152906318e02bd990602401600060405180830381600087803b1580156200019a57600080fd5b505af1158015620001af573d6000803e3d6000fd5b50506017805460ff60a01b1916600160a01b17905550600a9050620001d58a82620007f8565b50600b620001e48982620007f8565b50600c805460ff1916600917905560078790556200020587600019620008da565b6200021390600019620008f1565b60085561ffff848116600d819055600e55838116600f819055601055601580546001600160a01b0319166001600160a01b0388161790558216601181905560125562000262876103e862000529565b6016556015805460ff60a81b1916600160a81b1790556008546001600160a01b03808c1660009081526001602090815260409182902093909355805163c45a015560e01b8152905189939284169263c45a015592600480820193918290030181865afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd919062000907565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000371919062000907565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620003bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e5919062000907565b601480546001600160a01b03199081166001600160a01b0393841617909155601380549091168383161790558b166000818152600460209081526040808320805460ff1990811660019081179092553085528285208054909116909117905560075490519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3306001600160a01b03168b6001600160a01b03167f56358b41df5fa59f5639228f0930994cbdde383c8a8fd74e06c04e1deebe356260036008604051620004c092919062000925565b60405180910390a3505050505050505050505062000969565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000537828462000952565b90505b92915050565b80516001600160a01b03811681146200055857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200058557600080fd5b81516001600160401b0380821115620005a257620005a26200055d565b604051601f8301601f19908116603f01168101908282118183101715620005cd57620005cd6200055d565b81604052838152602092508683858801011115620005ea57600080fd5b600091505b838210156200060e5785820183015181830184015290820190620005ef565b600093810190920192909252949350505050565b805161ffff811681146200055857600080fd5b6000806000806000806000806000806101408b8d0312156200065657600080fd5b620006618b62000540565b60208c0151909a506001600160401b03808211156200067f57600080fd5b6200068d8e838f0162000573565b9a5060408d0151915080821115620006a457600080fd5b50620006b38d828e0162000573565b98505060608b01519650620006cb60808c0162000540565b9550620006db60a08c0162000540565b9450620006eb60c08c0162000622565b9350620006fb60e08c0162000622565b92506200070c6101008c0162000622565b91506200071d6101208c0162000540565b90509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156200076257620007626200072e565b5092915050565b600181811c908216806200077e57607f821691505b6020821081036200079f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007f357600081815260208120601f850160051c81016020861015620007ce5750805b601f850160051c820191505b81811015620007ef57828155600101620007da565b5050505b505050565b81516001600160401b038111156200081457620008146200055d565b6200082c8162000825845462000769565b84620007a5565b602080601f8311600181146200086457600084156200084b5750858301515b600019600386901b1c1916600185901b178555620007ef565b600085815260208120601f198616915b82811015620008955788860151825594840194600190910190840162000874565b5085821015620008b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601260045260246000fd5b600082620008ec57620008ec620008c4565b500690565b818103818111156200053a576200053a6200072e565b6000602082840312156200091a57600080fd5b620005378262000540565b60408101600884106200094857634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600082620009645762000964620008c4565b500490565b6126e780620009796000396000f3fe6080604052600436106102a45760003560e01c806349bd5a5e1161016e5780638da5cb5b116100cb578063af41063b1161007f578063dd62ed3e11610064578063dd62ed3e1461074f578063f2fde38b14610795578063ffa1ad74146107b557600080fd5b8063af41063b14610719578063bc063e1a1461073957600080fd5b806395d89b41116100b057806395d89b41146106c4578063a457c2d7146106d9578063a9059cbb146106f957600080fd5b80638da5cb5b146106865780638ee88c53146106a457600080fd5b806370a082311161012257806377ec74491161010757806377ec74491461060d578063796431d01461062d57806388f820201461064d57600080fd5b806370a08231146105d8578063715018a6146105f857600080fd5b806352390c021161015357806352390c02146105695780635342acb4146105895780636bc87c3a146105c257600080fd5b806349bd5a5e146105285780634a74bb021461054857600080fd5b8063241ec3be1161021c5780633b124fe7116101d057806340f8007a116101b557806340f8007a146104d2578063437823ec146104e85780634549b0391461050857600080fd5b80633b124fe71461049c5780633bd5d173146104b257600080fd5b8063313ce56711610201578063313ce5671461043a5780633685d4191461045c578063395093511461047c57600080fd5b8063241ec3be146103f95780632d8381191461041a57600080fd5b80631694505e1161027357806319a8ac9e1161025857806319a8ac9e146103995780631f46b1c6146103b957806323b872dd146103d957600080fd5b80631694505e1461034c57806318160ddd1461038457600080fd5b8063061c82d0146102b057806306fdde03146102d2578063095ea7b3146102fd57806313114a9d1461032d57600080fd5b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb366004612319565b6107ca565b005b3480156102de57600080fd5b506102e761084c565b6040516102f49190612332565b60405180910390f35b34801561030957600080fd5b5061031d610318366004612395565b6108de565b60405190151581526020016102f4565b34801561033957600080fd5b506009545b6040519081526020016102f4565b34801561035857600080fd5b5060135461036c906001600160a01b031681565b6040516001600160a01b0390911681526020016102f4565b34801561039057600080fd5b5060075461033e565b3480156103a557600080fd5b5060155461036c906001600160a01b031681565b3480156103c557600080fd5b506102d06103d43660046123d6565b6108f5565b3480156103e557600080fd5b5061031d6103f43660046123f1565b61091b565b34801561040557600080fd5b5060175461031d90600160a01b900460ff1681565b34801561042657600080fd5b5061033e610435366004612319565b610984565b34801561044657600080fd5b50600c5460405160ff90911681526020016102f4565b34801561046857600080fd5b506102d0610477366004612432565b610a1b565b34801561048857600080fd5b5061031d610497366004612395565b610bc9565b3480156104a857600080fd5b5061033e600d5481565b3480156104be57600080fd5b506102d06104cd366004612319565b610bff565b3480156104de57600080fd5b5061033e60115481565b3480156104f457600080fd5b506102d0610503366004612432565b610cfc565b34801561051457600080fd5b5061033e61052336600461244f565b610d28565b34801561053457600080fd5b5060145461036c906001600160a01b031681565b34801561055457600080fd5b5060155461031d90600160a81b900460ff1681565b34801561057557600080fd5b506102d0610584366004612432565b610db7565b34801561059557600080fd5b5061031d6105a4366004612432565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156105ce57600080fd5b5061033e600f5481565b3480156105e457600080fd5b5061033e6105f3366004612432565b610ef5565b34801561060457600080fd5b506102d0610f54565b34801561061957600080fd5b5060175461036c906001600160a01b031681565b34801561063957600080fd5b506102d0610648366004612319565b610f68565b34801561065957600080fd5b5061031d610668366004612432565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561069257600080fd5b506000546001600160a01b031661036c565b3480156106b057600080fd5b506102d06106bf366004612319565b611040565b3480156106d057600080fd5b506102e7611063565b3480156106e557600080fd5b5061031d6106f4366004612395565b611072565b34801561070557600080fd5b5061031d610714366004612395565b6110c1565b34801561072557600080fd5b506102d0610734366004612319565b6110ce565b34801561074557600080fd5b5061033e6109c481565b34801561075b57600080fd5b5061033e61076a36600461247b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b3480156107a157600080fd5b506102d06107b0366004612432565b6110f1565b3480156107c157600080fd5b5061033e600881565b6107d261117e565b600d819055601154600f546109c491906107ec90846124ca565b6107f691906124ca565b11156108495760405162461bcd60e51b815260206004820152601560248201527f546f74616c20666565206973206f76657220323525000000000000000000000060448201526064015b60405180910390fd5b50565b6060600a805461085b906124dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610887906124dd565b80156108d45780601f106108a9576101008083540402835291602001916108d4565b820191906000526020600020905b8154815290600101906020018083116108b757829003601f168201915b5050505050905090565b60006108eb3384846111d8565b5060015b92915050565b6108fd61117e565b60178054911515600160a01b0260ff60a01b19909216919091179055565b6000610928848484611331565b61097a843361097585604051806060016040528060288152602001612665602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611606565b6111d8565b5060019392505050565b60006008548211156109fe5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201527f65666c656374696f6e73000000000000000000000000000000000000000000006064820152608401610840565b6000610a08611632565b9050610a148382611655565b9392505050565b610a2361117e565b6001600160a01b03811660009081526005602052604090205460ff16610a8b5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610840565b60005b600654811015610bc557816001600160a01b031660068281548110610ab557610ab5612517565b6000918252602090912001546001600160a01b031603610bb35760068054610adf9060019061252d565b81548110610aef57610aef612517565b600091825260209091200154600680546001600160a01b039092169183908110610b1b57610b1b612517565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610b8057610b80612540565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190555050565b80610bbd81612556565b915050610a8e565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916108eb9185906109759086611661565b3360008181526005602052604090205460ff1615610c855760405162461bcd60e51b815260206004820152602c60248201527f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460448201527f6869732066756e6374696f6e00000000000000000000000000000000000000006064820152608401610840565b6000610c908361166d565b5050506001600160a01b038616600090815260016020526040902054939450610cbe939250849150506116c8565b6001600160a01b038316600090815260016020526040902055600854610ce490826116c8565b600855600954610cf49084611661565b600955505050565b610d0461117e565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600754831115610d7c5760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401610840565b81610d9c576000610d8c8461166d565b509496506108ef95505050505050565b6000610da78461166d565b509396506108ef95505050505050565b610dbf61117e565b6001600160a01b03811660009081526005602052604090205460ff1615610e285760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610840565b6001600160a01b03811660009081526001602052604090205415610e82576001600160a01b038116600090815260016020526040902054610e6890610984565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b6001600160a01b03811660009081526005602052604081205460ff1615610f3257506001600160a01b031660009081526002602052604090205490565b6001600160a01b0382166000908152600160205260409020546108ef90610984565b610f5c61117e565b610f6660006116d4565b565b610f7061117e565b610f90612710610f8a6005610f8460075490565b90611731565b90611655565b8110156110055760405162461bcd60e51b815260206004820152603860248201527f537761706261636b20616d6f756e742073686f756c64206265206174206c656160448201527f737420302e303525206f6620746f74616c20737570706c7900000000000000006064820152608401610840565b60168190556040518181527ff7edd1a72d399eb95c56c07c5a26f00a9096735269c96c75caa8fc4e15bcd5d29060200160405180910390a150565b61104861117e565b600f819055601154600d546109c491906107ec9084906124ca565b6060600b805461085b906124dd565b60006108eb33846109758560405180606001604052806025815260200161268d602591393360009081526003602090815260408083206001600160a01b038d1684529091529020549190611606565b60006108eb338484611331565b6110d661117e565b6011819055600f54600d546109c49183916107ec91906124ca565b6110f961117e565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610840565b610849816116d4565b6000546001600160a01b03163314610f665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610840565b6001600160a01b0383166112535760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0382166112cf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166113ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610840565b6001600160a01b0382166114295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610840565b6000811161149f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e207a65726f00000000000000000000000000000000000000000000006064820152608401610840565b601754600160a01b900460ff1615611539576017546040517f487608580000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301526044820184905290911690634876085890606401600060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b505050505b600061154430610ef5565b601654909150811080159081906115655750601554600160a01b900460ff16155b801561157f57506014546001600160a01b03868116911614155b80156115945750601554600160a81b900460ff165b156115a75760165491506115a78261173d565b6001600160a01b03851660009081526004602052604090205460019060ff16806115e957506001600160a01b03851660009081526004602052604090205460ff165b156115f2575060005b6115fe868686846117e4565b505050505050565b6000818484111561162a5760405162461bcd60e51b81526004016108409190612332565b505050900390565b600080600061163f611984565b909250905061164e8282611655565b9250505090565b6000610a14828461256f565b6000610a1482846124ca565b60008060008060008060008060008060006116878c611b06565b935093509350935060008060006116a88f8787876116a3611632565b611b5b565b919f509d509b509599509397509195509350505050919395979092949650565b6000610a14828461252d565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610a148284612591565b6015805460ff60a01b1916600160a01b179055600061175d826002611655565b9050600061176b83836116c8565b90504761177783611bbd565b600061178347836116c8565b905061178f8382611d41565b60408051858152602081018390529081018490527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a150506015805460ff60a01b19169055505050565b8061180e5761180e600d8054600e55600f8054601055601180546012556000928390559082905555565b6001600160a01b03841660009081526005602052604090205460ff16801561184f57506001600160a01b03831660009081526005602052604090205460ff16155b156118645761185f848484611e0c565b611962565b6001600160a01b03841660009081526005602052604090205460ff161580156118a557506001600160a01b03831660009081526005602052604090205460ff165b156118b55761185f848484611f52565b6001600160a01b03841660009081526005602052604090205460ff161580156118f757506001600160a01b03831660009081526005602052604090205460ff16155b156119075761185f848484612011565b6001600160a01b03841660009081526005602052604090205460ff16801561194757506001600160a01b03831660009081526005602052604090205460ff165b156119575761185f84848461206b565b611962848484612011565b8061197e5761197e600e54600d55601054600f55601254601155565b50505050565b6008546007546000918291825b600654811015611ad6578260016000600684815481106119b3576119b3612517565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611a1e57508160026000600684815481106119f7576119f7612517565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611a3457600854600754945094505050509091565b611a7a6001600060068481548110611a4e57611a4e612517565b60009182526020808320909101546001600160a01b0316835282019290925260400190205484906116c8565b9250611ac26002600060068481548110611a9657611a96612517565b60009182526020808320909101546001600160a01b0316835282019290925260400190205483906116c8565b915080611ace81612556565b915050611991565b50600754600854611ae691611655565b821015611afd576008546007549350935050509091565b90939092509050565b6000806000806000611b17866120f4565b90506000611b2487612111565b90506000611b318861212e565b90506000611b4b82611b4585818d896116c8565b906116c8565b9993985091965094509092505050565b6000808080611b6a8986611731565b90506000611b788987611731565b90506000611b868988611731565b90506000611b948989611731565b90506000611ba882611b45858189896116c8565b949d949c50929a509298505050505050505050565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611bf257611bf2612517565b6001600160a01b03928316602091820292909201810191909152601354604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051919093169263ad5c46489260048083019391928290030181865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8891906125a8565b81600181518110611c9b57611c9b612517565b6001600160a01b039283166020918202929092010152601354611cc191309116846111d8565b6013546040517f791ac9470000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063791ac94790611d139085906000908690309042906004016125c5565b600060405180830381600087803b158015611d2d57600080fd5b505af11580156115fe573d6000803e3d6000fd5b601354611d599030906001600160a01b0316846111d8565b6013546040517ff305d71900000000000000000000000000000000000000000000000000000000815230600482015260248101849052600060448201819052606482015261dead60848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af1158015611de0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e059190612636565b5050505050565b6000806000806000806000611e208861166d565b9650965096509650965096509650611e6688600260008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b038b16600090815260026020908152604080832093909355600190522054611e9590886116c8565b6001600160a01b03808c1660009081526001602052604080822093909355908b1681522054611ec49087611661565b6001600160a01b038a16600090815260016020526040902055611ee682612164565b611eef816121ed565b611ef985846122f5565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051611f3e91815260200190565b60405180910390a350505050505050505050565b6000806000806000806000611f668861166d565b9650965096509650965096509650611fac87600160008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b03808c16600090815260016020908152604080832094909455918c16815260029091522054611fe29085611661565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611ec49087611661565b60008060008060008060006120258861166d565b9650965096509650965096509650611e9587600160008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b600080600080600080600061207f8861166d565b96509650965096509650965096506120c588600260008d6001600160a01b03166001600160a01b03168152602001908152602001600020546116c890919063ffffffff16565b6001600160a01b038b16600090815260026020908152604080832093909355600190522054611fac90886116c8565b60006108ef612710610f8a600d548561173190919063ffffffff16565b60006108ef612710610f8a600f548561173190919063ffffffff16565b6015546000906001600160a01b031661214957506000919050565b6108ef612710610f8a6011548561173190919063ffffffff16565b600061216e611632565b9050600061217c8383611731565b306000908152600160205260409020549091506121999082611661565b3060009081526001602090815260408083209390935560059052205460ff16156121e857306000908152600260205260409020546121d79084611661565b306000908152600260205260409020555b505050565b80156108495760006121fd611632565b9050600061220b8383611731565b6015546001600160a01b03166000908152600160205260409020549091506122339082611661565b601580546001600160a01b03908116600090815260016020908152604080832095909555925490911681526005909152205460ff16156122ae576015546001600160a01b03166000908152600260205260409020546122929084611661565b6015546001600160a01b03166000908152600260205260409020555b6015546001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161132491815260200190565b60085461230290836116c8565b6008556009546123129082611661565b6009555050565b60006020828403121561232b57600080fd5b5035919050565b600060208083528351808285015260005b8181101561235f57858101830151858201604001528201612343565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461084957600080fd5b600080604083850312156123a857600080fd5b82356123b381612380565b946020939093013593505050565b803580151581146123d157600080fd5b919050565b6000602082840312156123e857600080fd5b610a14826123c1565b60008060006060848603121561240657600080fd5b833561241181612380565b9250602084013561242181612380565b929592945050506040919091013590565b60006020828403121561244457600080fd5b8135610a1481612380565b6000806040838503121561246257600080fd5b82359150612472602084016123c1565b90509250929050565b6000806040838503121561248e57600080fd5b823561249981612380565b915060208301356124a981612380565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108ef576108ef6124b4565b600181811c908216806124f157607f821691505b60208210810361251157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b818103818111156108ef576108ef6124b4565b634e487b7160e01b600052603160045260246000fd5b600060018201612568576125686124b4565b5060010190565b60008261258c57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176108ef576108ef6124b4565b6000602082840312156125ba57600080fd5b8151610a1481612380565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156126155784516001600160a01b0316835293830193918301916001016125f0565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561264b57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122041e4fbe34c0f421596e40b3e93565fee2809dfd2381ba56d952550888413dcaf64736f6c63430008140033a2646970667358221220db24c42aee71396c91314c1b8f381461658175b19e1d3003b6f36d9635248f6d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2978,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3174,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2328,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "factoryManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2330,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2332,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2334,
        "contract": "@gempad/generatetokens/contracts/factories/AntibotLiquidityGeneratorTokenFactory.sol:AntibotLiquidityGeneratorTokenFactory",
        "label": "flatFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}