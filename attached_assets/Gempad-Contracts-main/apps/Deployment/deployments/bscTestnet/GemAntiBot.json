{
  "address": "0xFF314895Cb5E7470cBD138F5B8c0F19044DC1b3e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "Blacklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "Whitelist",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_blacklists",
          "type": "address[]"
        }
      ],
      "name": "addBlackLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_whitelists",
          "type": "address[]"
        }
      ],
      "name": "addWhiteLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "configs",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limitTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disableBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "preTransferTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrrentBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isConfigSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBlockLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onPreTransferCheck",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_whitelists",
          "type": "address[]"
        }
      ],
      "name": "removeWhiteLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_blacklists",
          "type": "address[]"
        }
      ],
      "name": "removeblackLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limitTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_disableBlock",
          "type": "uint256"
        }
      ],
      "name": "saveConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBlockLimit",
          "type": "uint256"
        }
      ],
      "name": "setMinBlockLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "token_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71535b55b1ba95f37beddbced3df6618e399fd151bd27cd1fb4a1593cbe24cef",
  "receipt": {
    "to": null,
    "from": "0x6D36409486efA4Cc32c0472Efa7871ED03b8BEd0",
    "contractAddress": "0xFF314895Cb5E7470cBD138F5B8c0F19044DC1b3e",
    "transactionIndex": 0,
    "gasUsed": "1067878",
    "logsBloom": "0x
    "blockHash": "0x3ad55cdc88863e9313e05d8aa7edaba69ab832c2bf00499c6132ef7167e43cf0",
    "transactionHash": "0x71535b55b1ba95f37beddbced3df6618e399fd151bd27cd1fb4a1593cbe24cef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 38674293,
        "transactionHash": "0x71535b55b1ba95f37beddbced3df6618e399fd151bd27cd1fb4a1593cbe24cef",
        "address": "0xFF314895Cb5E7470cBD138F5B8c0F19044DC1b3e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d36409486efa4cc32c0472efa7871ed03b8bed0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3ad55cdc88863e9313e05d8aa7edaba69ab832c2bf00499c6132ef7167e43cf0"
      }
    ],
    "blockNumber": 38674293,
    "cumulativeGasUsed": "1067878",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19bc0a812d989bd2b38ed640ae41bece",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_blacklists\",\"type\":\"address[]\"}],\"name\":\"addBlackLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"}],\"name\":\"addWhiteLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preTransferTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrrentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfigSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onPreTransferCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"}],\"name\":\"removeWhiteLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_blacklists\",\"type\":\"address[]\"}],\"name\":\"removeblackLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disableBlock\",\"type\":\"uint256\"}],\"name\":\"saveConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockLimit\",\"type\":\"uint256\"}],\"name\":\"setMinBlockLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBlackLists(address,address[])\":{\"params\":{\"_blacklists\":\"users\",\"_token\":\"address\"}},\"addWhiteLists(address,address[])\":{\"params\":{\"_token\":\"address\",\"_whitelists\":\"users\"}},\"getCurrrentBlock()\":{\"returns\":{\"_0\":\"uint256  the current block.\"}},\"onPreTransferCheck(address,address,uint256)\":{\"params\":{\"amount\":\".\",\"from\":\".\",\"to\":\".\"},\"returns\":{\"_0\":\"bool  .\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhiteLists(address,address[])\":{\"params\":{\"_token\":\"address\",\"_whitelists\":\"users\"}},\"removeblackLists(address,address[])\":{\"params\":{\"_blacklists\":\"users\",\"_token\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"saveConfig(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amountPerBlock\":\".\",\"_disableBlock\":\".\",\"_limitAmount\":\".\",\"_limitTime\":\".\",\"_pair\":\".\",\"_router\":\".\",\"_token\":\".\"}},\"setMinBlockLimit(uint256)\":{\"params\":{\"_minBlockLimit\":\".\"}},\"setTokenOwner(address)\":{\"details\":\"being called by token\",\"params\":{\"owner\":\"of token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBlackLists(address,address[])\":{\"notice\":\"add users to blacklist\"},\"addWhiteLists(address,address[])\":{\"notice\":\"add users to whitelist\"},\"onPreTransferCheck(address,address,uint256)\":{\"notice\":\"check for terms\"},\"removeWhiteLists(address,address[])\":{\"notice\":\"remove users from whitelist\"},\"removeblackLists(address,address[])\":{\"notice\":\"remove users from blacklist\"},\"saveConfig(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"set terms of token transfer\"},\"setMinBlockLimit(uint256)\":{\"notice\":\"minimum antiobot active time\"},\"setTokenOwner(address)\":{\"notice\":\"set the token owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/antibot/contracts/GemAntiBot.sol\":\"GemAntiBot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@gempad/antibot/contracts/GemAntiBot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\n\\r\\ncontract GemAntiBot is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    //min number of block requires for antibot\\r\\n    uint256 public minBlockLimit = 20;\\r\\n    struct Config {\\r\\n        address router;\\r\\n        address pair;\\r\\n        uint256 limitAmount;\\r\\n        uint256 amountPerBlock;\\r\\n        uint256 limitTime;\\r\\n        uint256 startBlock;\\r\\n        uint256 disableBlock;\\r\\n        uint256 preTransferTime;\\r\\n    }\\r\\n\\r\\n    mapping(address => address) public token_owner;\\r\\n    mapping(address => mapping(address => bool)) public whitelists;\\r\\n    mapping(address => mapping(address => bool)) public blacklists;\\r\\n    mapping(address => Config) public configs;\\r\\n    mapping(address => bool) public isConfigSet;\\r\\n\\r\\n    event Whitelist(address token, address[] users, bool status);\\r\\n    event Blacklist(address token, address[] users, bool status);\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice  set the token owner.\\r\\n     * @dev  being called by token\\r\\n     * @param   owner  of token\\r\\n     */\\r\\n    function setTokenOwner(address owner) public {\\r\\n        token_owner[msg.sender] = owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  add users to whitelist\\r\\n     * @param   _token  address\\r\\n     * @param   _whitelists  users\\r\\n     */\\r\\n    function addWhiteLists(address _token, address[] memory _whitelists) public {\\r\\n        require(token_owner[_token] == msg.sender, 'Not Owner');\\r\\n        for (uint256 i = 0; i < _whitelists.length; i++) {\\r\\n            whitelists[_token][_whitelists[i]] = true;\\r\\n        }\\r\\n\\r\\n        emit Whitelist(_token, _whitelists, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  add users to blacklist\\r\\n     * @param   _token  address\\r\\n     * @param   _blacklists  users\\r\\n     */\\r\\n    function addBlackLists(address _token, address[] memory _blacklists) public {\\r\\n        require(token_owner[_token] == msg.sender, 'Not Owner');\\r\\n        for (uint256 i = 0; i < _blacklists.length; i++) {\\r\\n            blacklists[_token][_blacklists[i]] = true;\\r\\n        }\\r\\n\\r\\n        emit Blacklist(_token, _blacklists, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  remove users from whitelist\\r\\n     * @param   _token  address\\r\\n     * @param   _whitelists  users\\r\\n     */\\r\\n    function removeWhiteLists(address _token, address[] memory _whitelists) public {\\r\\n        require(token_owner[_token] == msg.sender, 'Not Owner');\\r\\n        for (uint256 i = 0; i < _whitelists.length; i++) {\\r\\n            whitelists[_token][_whitelists[i]] = false;\\r\\n        }\\r\\n\\r\\n        emit Whitelist(_token, _whitelists, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  remove users from blacklist\\r\\n     * @param   _token  address\\r\\n     * @param   _blacklists  users\\r\\n     */\\r\\n    function removeblackLists(address _token, address[] memory _blacklists) public {\\r\\n        require(token_owner[_token] == msg.sender, 'Not Owner');\\r\\n        for (uint256 i = 0; i < _blacklists.length; i++) {\\r\\n            blacklists[_token][_blacklists[i]] = false;\\r\\n        }\\r\\n\\r\\n        emit Blacklist(_token, _blacklists, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  set terms of token transfer\\r\\n     * @param   _token  .\\r\\n     * @param   _router  .\\r\\n     * @param   _pair  .\\r\\n     * @param   _limitAmount  .\\r\\n     * @param   _amountPerBlock  .\\r\\n     * @param   _limitTime  .\\r\\n     * @param   _disableBlock  .\\r\\n     */\\r\\n    function saveConfig(\\r\\n        address _token,\\r\\n        address _router,\\r\\n        address _pair,\\r\\n        uint256 _limitAmount,\\r\\n        uint256 _amountPerBlock,\\r\\n        uint256 _limitTime,\\r\\n        uint256 _disableBlock\\r\\n    ) public {\\r\\n        require(token_owner[_token] == msg.sender, 'Not Owner');\\r\\n        require(_disableBlock >= minBlockLimit, 'Min disable limit is 20');\\r\\n        Config storage _config = configs[_token];\\r\\n        _config.router = _router;\\r\\n        _config.limitTime = _limitTime;\\r\\n        _config.limitAmount = _limitAmount;\\r\\n        _config.amountPerBlock = _amountPerBlock;\\r\\n        _config.pair = _pair;\\r\\n        _config.startBlock = block.number;\\r\\n        _config.disableBlock = block.number + _disableBlock;\\r\\n        isConfigSet[_token] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  check for terms\\r\\n     * @param   from  .\\r\\n     * @param   to  .\\r\\n     * @param   amount  .\\r\\n     * @return  bool  .\\r\\n     */\\r\\n    function onPreTransferCheck(address from, address to, uint256 amount) public returns (bool) {\\r\\n        Config storage _config = configs[msg.sender];\\r\\n        if (block.number >= _config.disableBlock) return true;\\r\\n        require(\\r\\n            whitelists[msg.sender][from] == true && whitelists[msg.sender][to] == true,\\r\\n            'Transfer between not whitelisted users'\\r\\n        );\\r\\n        require(\\r\\n            blacklists[msg.sender][from] != true && blacklists[msg.sender][to] != true,\\r\\n            'Transfer between blacklisted users'\\r\\n        );\\r\\n\\r\\n        uint256 currentLimitAmount = _config.limitAmount +\\r\\n            (block.number - _config.startBlock) *\\r\\n            _config.amountPerBlock;\\r\\n\\r\\n        require(amount > 0 && amount <= currentLimitAmount, 'Invalid Amount');\\r\\n        require(block.timestamp.sub(_config.preTransferTime) >= _config.limitTime, 'Not Transfer Time');\\r\\n        _config.preTransferTime = block.timestamp;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  minimum antiobot active time\\r\\n     * @param   _minBlockLimit  .\\r\\n     */\\r\\n    function setMinBlockLimit(uint256 _minBlockLimit) external onlyOwner {\\r\\n        require(_minBlockLimit >= 20, 'Min disable limit is 20');\\r\\n        minBlockLimit = _minBlockLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return  uint256  the current block.\\r\\n     */\\r\\n    function getCurrrentBlock() public view returns (uint256) {\\r\\n        return block.number;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xddaa67ebaf58640828d0dfdeddd8a49497d4fd8aa4e7e25769c691d129b2a88e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601460025534801561001557600080fd5b5061001f33610028565b60018055610078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61111d806100876000396000f3fe608060405234801561001057600080fd5b50600436106101355760003560e01c8063715018a6116100b2578063bbc3982411610081578063d175e24711610066578063d175e247146102ff578063f2fde38b14610312578063fce898781461032557600080fd5b8063bbc39824146102e3578063be67a142146102ec57600080fd5b8063715018a6146102a757806373119c2f146102af57806385ce3344146102bf5780638da5cb5b146102d257600080fd5b8063329ef04c1161010957806348760858116100ee5780634876085814610230578063594f918d14610243578063687510d61461026657600080fd5b8063329ef04c1461020a578063334af0c81461021d57600080fd5b80628486741461013a57806316b22e941461017d57806318e02bd9146101ab57806329a70532146101f7575b600080fd5b610168610148366004610e06565b600560209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61016861018b366004610e06565b600460209081526000928352604080842090915290825290205460ff1681565b6101f56101b9366004610e39565b336000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6101f5610205366004610e6a565b6103ca565b6101f5610218366004610e6a565b6104e3565b6101f561022b366004610f42565b6105ed565b61016861023e366004610faa565b61073b565b610168610251366004610e39565b60076020526000908152604090205460ff1681565b61028f610274366004610e39565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610174565b6101f5610a0a565b435b604051908152602001610174565b6101f56102cd366004610e6a565b610a1e565b6000546001600160a01b031661028f565b6102b160025481565b6101f56102fa366004610e6a565b610b26565b6101f561030d366004610fe6565b610c30565b6101f5610320366004610e39565b610c8e565b610384610333366004610e39565b6006602081905260009182526040909120805460018201546002830154600384015460048501546005860154968601546007909601546001600160a01b039586169795909416959294919390929088565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015260a084015260c083015260e082015261010001610174565b6001600160a01b038281166000908152600360205260409020541633146104245760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b60448201526064015b60405180910390fd5b60005b81518110156104a2576001600160a01b03831660009081526004602052604081208351829085908590811061045e5761045e610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061049a8161102b565b915050610427565b507f1214c14e7b9401eed7a8f53252e63357621ed442a8217862110cd8dcb3d6ff74828260006040516104d793929190611044565b60405180910390a15050565b6001600160a01b038281166000908152600360205260409020541633146105385760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b81518110156105b8576001600160a01b038316600090815260046020526040812083516001929085908590811061057457610574610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806105b08161102b565b91505061053b565b507f1214c14e7b9401eed7a8f53252e63357621ed442a8217862110cd8dcb3d6ff74828260016040516104d793929190611044565b6001600160a01b038781166000908152600360205260409020541633146106425760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b6002548110156106945760405162461bcd60e51b815260206004820152601760248201527f4d696e2064697361626c65206c696d6974206973203230000000000000000000604482015260640161041b565b6001600160a01b038781166000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff199081168984161782556004820185905560028201879055600382018690556001820180549091169288169290921790915543600582018190556107099083906110aa565b6006909101555050506001600160a01b039093166000908152600760205260409020805460ff19166001179055505050565b3360009081526006602081905260408220908101544310610760576001915050610a03565b3360009081526004602090815260408083206001600160a01b038916845290915290205460ff16151560011480156107c057503360009081526004602090815260408083206001600160a01b038816845290915290205460ff1615156001145b6108325760405162461bcd60e51b815260206004820152602660248201527f5472616e73666572206265747765656e206e6f742077686974656c697374656460448201527f2075736572730000000000000000000000000000000000000000000000000000606482015260840161041b565b3360009081526005602090815260408083206001600160a01b038916845290915290205460ff16151560011480159061089457503360009081526005602090815260408083206001600160a01b038816845290915290205460ff161515600114155b6109065760405162461bcd60e51b815260206004820152602260248201527f5472616e73666572206265747765656e20626c61636b6c69737465642075736560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015260840161041b565b6000816003015482600501544361091d91906110bd565b61092791906110d0565b826002015461093691906110aa565b90506000841180156109485750808411155b6109945760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420416d6f756e74000000000000000000000000000000000000604482015260640161041b565b600482015460078301546109a9904290610d1e565b10156109f75760405162461bcd60e51b815260206004820152601160248201527f4e6f74205472616e736665722054696d65000000000000000000000000000000604482015260640161041b565b50426007909101555060015b9392505050565b610a12610d33565b610a1c6000610d8d565b565b6001600160a01b03828116600090815260036020526040902054163314610a735760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b8151811015610af1576001600160a01b038316600090815260056020526040812083518290859085908110610aad57610aad610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ae98161102b565b915050610a76565b507fab277a8e804be6591e4c17675214635e4db41816ad42301f8daba34aeff350c7828260006040516104d793929190611044565b6001600160a01b03828116600090815260036020526040902054163314610b7b5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b8151811015610bfb576001600160a01b0383166000908152600560205260408120835160019290859085908110610bb757610bb7610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610bf38161102b565b915050610b7e565b507fab277a8e804be6591e4c17675214635e4db41816ad42301f8daba34aeff350c7828260016040516104d793929190611044565b610c38610d33565b6014811015610c895760405162461bcd60e51b815260206004820152601760248201527f4d696e2064697361626c65206c696d6974206973203230000000000000000000604482015260640161041b565b600255565b610c96610d33565b6001600160a01b038116610d125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161041b565b610d1b81610d8d565b50565b6000610d2a82846110bd565b90505b92915050565b6000546001600160a01b03163314610a1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041b565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610e0157600080fd5b919050565b60008060408385031215610e1957600080fd5b610e2283610dea565b9150610e3060208401610dea565b90509250929050565b600060208284031215610e4b57600080fd5b610d2a82610dea565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610e7d57600080fd5b610e8683610dea565b915060208084013567ffffffffffffffff80821115610ea457600080fd5b818601915086601f830112610eb857600080fd5b813581811115610eca57610eca610e54565b8060051b604051601f19603f83011681018181108582111715610eef57610eef610e54565b604052918252848201925083810185019189831115610f0d57600080fd5b938501935b82851015610f3257610f2385610dea565b84529385019392850192610f12565b8096505050505050509250929050565b600080600080600080600060e0888a031215610f5d57600080fd5b610f6688610dea565b9650610f7460208901610dea565b9550610f8260408901610dea565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600060608486031215610fbf57600080fd5b610fc884610dea565b9250610fd660208501610dea565b9150604084013590509250925092565b600060208284031215610ff857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161103d5761103d611015565b5060010190565b6000606082016001600160a01b0380871684526020606081860152828751808552608087019150828901945060005b81811015611091578551851683529483019491830191600101611073565b5050809450505050508215156040830152949350505050565b80820180821115610d2d57610d2d611015565b81810381811115610d2d57610d2d611015565b8082028115828204841417610d2d57610d2d61101556fea2646970667358221220a921a9f8699b235342dbe2a0bb966bac06bc8448e33ab1a2292b1c16b8d9816664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101355760003560e01c8063715018a6116100b2578063bbc3982411610081578063d175e24711610066578063d175e247146102ff578063f2fde38b14610312578063fce898781461032557600080fd5b8063bbc39824146102e3578063be67a142146102ec57600080fd5b8063715018a6146102a757806373119c2f146102af57806385ce3344146102bf5780638da5cb5b146102d257600080fd5b8063329ef04c1161010957806348760858116100ee5780634876085814610230578063594f918d14610243578063687510d61461026657600080fd5b8063329ef04c1461020a578063334af0c81461021d57600080fd5b80628486741461013a57806316b22e941461017d57806318e02bd9146101ab57806329a70532146101f7575b600080fd5b610168610148366004610e06565b600560209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61016861018b366004610e06565b600460209081526000928352604080842090915290825290205460ff1681565b6101f56101b9366004610e39565b336000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6101f5610205366004610e6a565b6103ca565b6101f5610218366004610e6a565b6104e3565b6101f561022b366004610f42565b6105ed565b61016861023e366004610faa565b61073b565b610168610251366004610e39565b60076020526000908152604090205460ff1681565b61028f610274366004610e39565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610174565b6101f5610a0a565b435b604051908152602001610174565b6101f56102cd366004610e6a565b610a1e565b6000546001600160a01b031661028f565b6102b160025481565b6101f56102fa366004610e6a565b610b26565b6101f561030d366004610fe6565b610c30565b6101f5610320366004610e39565b610c8e565b610384610333366004610e39565b6006602081905260009182526040909120805460018201546002830154600384015460048501546005860154968601546007909601546001600160a01b039586169795909416959294919390929088565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015260a084015260c083015260e082015261010001610174565b6001600160a01b038281166000908152600360205260409020541633146104245760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b60448201526064015b60405180910390fd5b60005b81518110156104a2576001600160a01b03831660009081526004602052604081208351829085908590811061045e5761045e610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061049a8161102b565b915050610427565b507f1214c14e7b9401eed7a8f53252e63357621ed442a8217862110cd8dcb3d6ff74828260006040516104d793929190611044565b60405180910390a15050565b6001600160a01b038281166000908152600360205260409020541633146105385760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b81518110156105b8576001600160a01b038316600090815260046020526040812083516001929085908590811061057457610574610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806105b08161102b565b91505061053b565b507f1214c14e7b9401eed7a8f53252e63357621ed442a8217862110cd8dcb3d6ff74828260016040516104d793929190611044565b6001600160a01b038781166000908152600360205260409020541633146106425760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b6002548110156106945760405162461bcd60e51b815260206004820152601760248201527f4d696e2064697361626c65206c696d6974206973203230000000000000000000604482015260640161041b565b6001600160a01b038781166000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff199081168984161782556004820185905560028201879055600382018690556001820180549091169288169290921790915543600582018190556107099083906110aa565b6006909101555050506001600160a01b039093166000908152600760205260409020805460ff19166001179055505050565b3360009081526006602081905260408220908101544310610760576001915050610a03565b3360009081526004602090815260408083206001600160a01b038916845290915290205460ff16151560011480156107c057503360009081526004602090815260408083206001600160a01b038816845290915290205460ff1615156001145b6108325760405162461bcd60e51b815260206004820152602660248201527f5472616e73666572206265747765656e206e6f742077686974656c697374656460448201527f2075736572730000000000000000000000000000000000000000000000000000606482015260840161041b565b3360009081526005602090815260408083206001600160a01b038916845290915290205460ff16151560011480159061089457503360009081526005602090815260408083206001600160a01b038816845290915290205460ff161515600114155b6109065760405162461bcd60e51b815260206004820152602260248201527f5472616e73666572206265747765656e20626c61636b6c69737465642075736560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015260840161041b565b6000816003015482600501544361091d91906110bd565b61092791906110d0565b826002015461093691906110aa565b90506000841180156109485750808411155b6109945760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420416d6f756e74000000000000000000000000000000000000604482015260640161041b565b600482015460078301546109a9904290610d1e565b10156109f75760405162461bcd60e51b815260206004820152601160248201527f4e6f74205472616e736665722054696d65000000000000000000000000000000604482015260640161041b565b50426007909101555060015b9392505050565b610a12610d33565b610a1c6000610d8d565b565b6001600160a01b03828116600090815260036020526040902054163314610a735760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b8151811015610af1576001600160a01b038316600090815260056020526040812083518290859085908110610aad57610aad610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ae98161102b565b915050610a76565b507fab277a8e804be6591e4c17675214635e4db41816ad42301f8daba34aeff350c7828260006040516104d793929190611044565b6001600160a01b03828116600090815260036020526040902054163314610b7b5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b604482015260640161041b565b60005b8151811015610bfb576001600160a01b0383166000908152600560205260408120835160019290859085908110610bb757610bb7610fff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610bf38161102b565b915050610b7e565b507fab277a8e804be6591e4c17675214635e4db41816ad42301f8daba34aeff350c7828260016040516104d793929190611044565b610c38610d33565b6014811015610c895760405162461bcd60e51b815260206004820152601760248201527f4d696e2064697361626c65206c696d6974206973203230000000000000000000604482015260640161041b565b600255565b610c96610d33565b6001600160a01b038116610d125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161041b565b610d1b81610d8d565b50565b6000610d2a82846110bd565b90505b92915050565b6000546001600160a01b03163314610a1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041b565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610e0157600080fd5b919050565b60008060408385031215610e1957600080fd5b610e2283610dea565b9150610e3060208401610dea565b90509250929050565b600060208284031215610e4b57600080fd5b610d2a82610dea565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610e7d57600080fd5b610e8683610dea565b915060208084013567ffffffffffffffff80821115610ea457600080fd5b818601915086601f830112610eb857600080fd5b813581811115610eca57610eca610e54565b8060051b604051601f19603f83011681018181108582111715610eef57610eef610e54565b604052918252848201925083810185019189831115610f0d57600080fd5b938501935b82851015610f3257610f2385610dea565b84529385019392850192610f12565b8096505050505050509250929050565b600080600080600080600060e0888a031215610f5d57600080fd5b610f6688610dea565b9650610f7460208901610dea565b9550610f8260408901610dea565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600060608486031215610fbf57600080fd5b610fc884610dea565b9250610fd660208501610dea565b9150604084013590509250925092565b600060208284031215610ff857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161103d5761103d611015565b5060010190565b6000606082016001600160a01b0380871684526020606081860152828751808552608087019150828901945060005b81811015611091578551851683529483019491830191600101611073565b5050809450505050508215156040830152949350505050565b80820180821115610d2d57610d2d611015565b81810381811115610d2d57610d2d611015565b8082028115828204841417610d2d57610d2d61101556fea2646970667358221220a921a9f8699b235342dbe2a0bb966bac06bc8448e33ab1a2292b1c16b8d9816664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBlackLists(address,address[])": {
        "params": {
          "_blacklists": "users",
          "_token": "address"
        }
      },
      "addWhiteLists(address,address[])": {
        "params": {
          "_token": "address",
          "_whitelists": "users"
        }
      },
      "getCurrrentBlock()": {
        "returns": {
          "_0": "uint256  the current block."
        }
      },
      "onPreTransferCheck(address,address,uint256)": {
        "params": {
          "amount": ".",
          "from": ".",
          "to": "."
        },
        "returns": {
          "_0": "bool  ."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhiteLists(address,address[])": {
        "params": {
          "_token": "address",
          "_whitelists": "users"
        }
      },
      "removeblackLists(address,address[])": {
        "params": {
          "_blacklists": "users",
          "_token": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "saveConfig(address,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amountPerBlock": ".",
          "_disableBlock": ".",
          "_limitAmount": ".",
          "_limitTime": ".",
          "_pair": ".",
          "_router": ".",
          "_token": "."
        }
      },
      "setMinBlockLimit(uint256)": {
        "params": {
          "_minBlockLimit": "."
        }
      },
      "setTokenOwner(address)": {
        "details": "being called by token",
        "params": {
          "owner": "of token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBlackLists(address,address[])": {
        "notice": "add users to blacklist"
      },
      "addWhiteLists(address,address[])": {
        "notice": "add users to whitelist"
      },
      "onPreTransferCheck(address,address,uint256)": {
        "notice": "check for terms"
      },
      "removeWhiteLists(address,address[])": {
        "notice": "remove users from whitelist"
      },
      "removeblackLists(address,address[])": {
        "notice": "remove users from blacklist"
      },
      "saveConfig(address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "set terms of token transfer"
      },
      "setMinBlockLimit(uint256)": {
        "notice": "minimum antiobot active time"
      },
      "setTokenOwner(address)": {
        "notice": "set the token owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25676,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26518,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1464,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "minBlockLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1485,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "token_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1491,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "whitelists",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1497,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "blacklists",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1502,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "configs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Config)1481_storage)"
      },
      {
        "astId": 1506,
        "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
        "label": "isConfigSet",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Config)1481_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GemAntiBot.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)1481_storage"
      },
      "t_struct(Config)1481_storage": {
        "encoding": "inplace",
        "label": "struct GemAntiBot.Config",
        "members": [
          {
            "astId": 1466,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1468,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "pair",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1470,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "limitAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1472,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "amountPerBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1474,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "limitTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1476,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "startBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1478,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "disableBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1480,
            "contract": "@gempad/antibot/contracts/GemAntiBot.sol:GemAntiBot",
            "label": "preTransferTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}