{
  "address": "0xFefF0998606dAF39bBAA11Dd3728a2C63DB37039",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLpToken",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        }
      ],
      "name": "LockAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "LockDescriptionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LockOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAt",
          "type": "uint256"
        }
      ],
      "name": "LockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUnlockDate",
          "type": "uint256"
        }
      ],
      "name": "LockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LockVested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLpToken",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TGE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycleShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        }
      ],
      "name": "VestingLockAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allLpTokenLockedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allNormalTokenLockedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeLockInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newUnlockDate",
          "type": "uint256"
        }
      ],
      "name": "editLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "editLockDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getCumulativeLpTokenLockInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadVestingLock.CumulativeLockInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCumulativeLpTokenLockInfoAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadVestingLock.CumulativeLockInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getCumulativeNormalTokenLockInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadVestingLock.CumulativeLockInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCumulativeNormalTokenLockInfoAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GempadVestingLock.CumulativeLockInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLockAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "getLockById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getLocksForToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLockCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLpToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lpLockCountForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "lpLockForUserAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lpLocksForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLpToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tgeDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleBps",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "multipleVestingLock",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "normalLockCountForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "normalLockForUserAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "normalLocksForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tgeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct GempadVestingLock.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "renounceLockOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalLockCountForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalLockCountForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenLockedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferLockOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLpToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleBps",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "vestingLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "withdrawableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2283581db2e3e518a01a21fef7fee364d0774b3d56a1f7d00cf47d261c6a7a31",
  "receipt": {
    "to": null,
    "from": "0x7Ac7401634e963E015812b58e2e6a0eD2a2a8D0d",
    "contractAddress": "0xFefF0998606dAF39bBAA11Dd3728a2C63DB37039",
    "transactionIndex": 100,
    "gasUsed": "3683241",
    "logsBloom": "0x
    "blockHash": "0xdc3911d923838894457e49cb8d6081f3195e5cd35c79ee418d972f99bd271b4c",
    "transactionHash": "0x2283581db2e3e518a01a21fef7fee364d0774b3d56a1f7d00cf47d261c6a7a31",
    "logs": [],
    "blockNumber": 37067400,
    "cumulativeGasUsed": "13969082",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b78ade38807ca558e7678e66ca695f61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"LockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"LockDescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LockOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"LockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TGE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycleShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"VestingLockAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allLpTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNormalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeLockInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"editLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"editLockDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeLpTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadVestingLock.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCumulativeLpTokenLockInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadVestingLock.CumulativeLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadVestingLock.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GempadVestingLock.CumulativeLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLockById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getLocksForToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lpLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lpLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lpLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"multipleVestingLock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"normalLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GempadVestingLock.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"renounceLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalLockCountForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"vestingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gempad/locker/contracts/GempadVestingLock.sol\":\"GempadVestingLock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@gempad/locker/contracts/GempadVestingLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IGempadVestingLock.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../utils/FullMath.sol\\\";\\r\\n\\r\\ncontract GempadVestingLock is IGempadVestingLock, Pausable {\\r\\n    using Address for address payable;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 id;\\r\\n        address token;\\r\\n        address owner;\\r\\n        uint256 amount;\\r\\n        uint256 lockDate;\\r\\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\\r\\n        uint256 tgeBps; // In bips. Is 0 for normal locks\\r\\n        uint256 cycle; // Is 0 for normal locks\\r\\n        uint256 cycleBps; // In bips. Is 0 for normal locks\\r\\n        uint256 unlockedAmount;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct CumulativeLockInfo {\\r\\n        address token;\\r\\n        address factory;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 private constant ID_PADDING = 1_000_000;\\r\\n\\r\\n    Lock[] private _locks;\\r\\n    mapping(address => EnumerableSet.UintSet) private _userLpLockIds;\\r\\n    mapping(address => EnumerableSet.UintSet) private _userNormalLockIds;\\r\\n\\r\\n    EnumerableSet.AddressSet private _lpLockedTokens;\\r\\n    EnumerableSet.AddressSet private _normalLockedTokens;\\r\\n    mapping(address => CumulativeLockInfo) public cumulativeLockInfo;\\r\\n    mapping(address => EnumerableSet.UintSet) private _tokenToLockIds;\\r\\n\\r\\n    event LockAdded(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        bool isLpToken,\\r\\n        uint256 unlockDate\\r\\n    );\\r\\n    event VestingLockAdded(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        bool isLpToken,\\r\\n        uint256 TGE,\\r\\n        uint256 cycleShare,\\r\\n        uint256 interval,\\r\\n        uint256 unlockDate\\r\\n    );\\r\\n    event LockUpdated(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    );\\r\\n    event LockRemoved(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 unlockedAt\\r\\n    );\\r\\n    event LockVested(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 total,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event LockDescriptionChanged(uint256 lockId);\\r\\n    event LockOwnerChanged(uint256 lockId, address owner, address newOwner);\\r\\n\\r\\n    modifier validLock(uint256 lockId) {\\r\\n        _getActualIndex(lockId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external override returns (uint256 id) {\\r\\n        require(\\r\\n            unlockDate > block.timestamp,\\r\\n            \\\"Unlock date should be in the future\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\r\\n        id = _createLock(\\r\\n            owner,\\r\\n            token,\\r\\n            isLpToken,\\r\\n            amount,\\r\\n            unlockDate,\\r\\n            0,\\r\\n            0,\\r\\n            0,\\r\\n            description\\r\\n        );\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit LockAdded(id, token, owner, amount,isLpToken, unlockDate);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function vestingLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external override returns (uint256 id) {\\r\\n        require(tgeDate > block.timestamp, \\\"TGE date should be in the future\\\");\\r\\n        require(cycle > 0, \\\"Invalid cycle\\\");\\r\\n        require(tgeBps > 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\r\\n        require(cycleBps > 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\r\\n        require(\\r\\n            tgeBps + cycleBps <= 10_000,\\r\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\r\\n        id = _createLock(\\r\\n            owner,\\r\\n            token,\\r\\n            isLpToken,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit VestingLockAdded(id, token, owner, amount, isLpToken, tgeBps, cycleBps, cycle, tgeDate);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external override returns (uint256[] memory) {\\r\\n        require(owners.length == amounts.length, \\\"Length mismatched\\\");\\r\\n        require(tgeDate > block.timestamp, \\\"TGE date should be in the future\\\");\\r\\n        require(cycle > 0, \\\"Invalid cycle\\\");\\r\\n        require(tgeBps > 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\r\\n        require(cycleBps > 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\r\\n        require(\\r\\n            tgeBps + cycleBps <= 10_000,\\r\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\r\\n        );\\r\\n        return\\r\\n            _multipleVestingLock(\\r\\n                owners,\\r\\n                amounts,\\r\\n                token,\\r\\n                isLpToken,\\r\\n                [tgeDate, tgeBps, cycle, cycleBps],\\r\\n                description\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256[4] memory vestingSettings, // avoid stack too deep\\r\\n        string memory description\\r\\n    ) internal returns (uint256[] memory) {\\r\\n        uint256 sumAmount = _sumAmount(amounts);\\r\\n        uint256 count = owners.length;\\r\\n        uint256[] memory ids = new uint256[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            ids[i] = _createLock(\\r\\n                owners[i],\\r\\n                token,\\r\\n                isLpToken,\\r\\n                amounts[i],\\r\\n                vestingSettings[0], // TGE date\\r\\n                vestingSettings[1], // TGE bps\\r\\n                vestingSettings[2], // cycle\\r\\n                vestingSettings[3], // cycle bps\\r\\n                description\\r\\n            );\\r\\n            emit VestingLockAdded(\\r\\n                ids[i],\\r\\n                token,\\r\\n                owners[i],\\r\\n                amounts[i],\\r\\n                isLpToken,\\r\\n                vestingSettings[1], // TGE bps\\r\\n                vestingSettings[3], // cycle bps\\r\\n                vestingSettings[2], // cycle\\r\\n                vestingSettings[0] // TGE date\\r\\n            );\\r\\n        }\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            sumAmount\\r\\n        );\\r\\n        return ids;\\r\\n    }\\r\\n\\r\\n    function _sumAmount(uint256[] calldata amounts)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            if (amounts[i] == 0) {\\r\\n                revert(\\\"Amount cant be zero\\\");\\r\\n            }\\r\\n            sum += amounts[i];\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    function _createLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) internal returns (uint256 id) {\\r\\n        if (isLpToken) {\\r\\n            address possibleFactoryAddress = _parseFactoryAddress(token);\\r\\n            id = _lockLpToken(\\r\\n                owner,\\r\\n                token,\\r\\n                possibleFactoryAddress,\\r\\n                amount,\\r\\n                tgeDate,\\r\\n                tgeBps,\\r\\n                cycle,\\r\\n                cycleBps,\\r\\n                description\\r\\n            );\\r\\n        } else {\\r\\n            id = _lockNormalToken(\\r\\n                owner,\\r\\n                token,\\r\\n                amount,\\r\\n                tgeDate,\\r\\n                tgeBps,\\r\\n                cycle,\\r\\n                cycleBps,\\r\\n                description\\r\\n            );\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function _lockLpToken(\\r\\n        address owner,\\r\\n        address token,\\r\\n        address factory,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private returns (uint256 id) {\\r\\n        id = _registerLock(\\r\\n            owner,\\r\\n            token,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _userLpLockIds[owner].add(id);\\r\\n        _lpLockedTokens.add(token);\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\r\\n        if (tokenInfo.token == address(0)) {\\r\\n            tokenInfo.token = token;\\r\\n            tokenInfo.factory = factory;\\r\\n        }\\r\\n        tokenInfo.amount = tokenInfo.amount + amount;\\r\\n\\r\\n        _tokenToLockIds[token].add(id);\\r\\n    }\\r\\n\\r\\n    function _lockNormalToken(\\r\\n        address owner,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private returns (uint256 id) {\\r\\n        id = _registerLock(\\r\\n            owner,\\r\\n            token,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _userNormalLockIds[owner].add(id);\\r\\n        _normalLockedTokens.add(token);\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\r\\n        if (tokenInfo.token == address(0)) {\\r\\n            tokenInfo.token = token;\\r\\n            tokenInfo.factory = address(0);\\r\\n        }\\r\\n        tokenInfo.amount = tokenInfo.amount + amount;\\r\\n\\r\\n        _tokenToLockIds[token].add(id);\\r\\n    }\\r\\n\\r\\n    function _registerLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private whenNotPaused returns (uint256 id) {\\r\\n        id = _locks.length + ID_PADDING;\\r\\n        Lock memory newLock = Lock({\\r\\n            id: id,\\r\\n            token: token,\\r\\n            owner: owner,\\r\\n            amount: amount,\\r\\n            lockDate: block.timestamp,\\r\\n            tgeDate: tgeDate,\\r\\n            tgeBps: tgeBps,\\r\\n            cycle: cycle,\\r\\n            cycleBps: cycleBps,\\r\\n            unlockedAmount: 0,\\r\\n            description: description\\r\\n        });\\r\\n        _locks.push(newLock);\\r\\n    }\\r\\n\\r\\n    function unlock(uint256 lockId) external override validLock(lockId) {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n\\r\\n        if (userLock.tgeBps > 0) {\\r\\n            _vestingUnlock(userLock);\\r\\n        } else {\\r\\n            _normalUnlock(userLock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _normalUnlock(Lock storage userLock) internal {\\r\\n        require(\\r\\n            block.timestamp >= userLock.tgeDate,\\r\\n            \\\"It is not time to unlock\\\"\\r\\n        );\\r\\n        require(userLock.unlockedAmount == 0, \\\"Nothing to unlock\\\");\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (isLpToken) {\\r\\n            _userLpLockIds[msg.sender].remove(userLock.id);\\r\\n        } else {\\r\\n            _userNormalLockIds[msg.sender].remove(userLock.id);\\r\\n        }\\r\\n\\r\\n        uint256 unlockAmount = userLock.amount;\\r\\n\\r\\n        if (tokenInfo.amount <= unlockAmount) {\\r\\n            tokenInfo.amount = 0;\\r\\n        } else {\\r\\n            tokenInfo.amount = tokenInfo.amount - unlockAmount;\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount == 0) {\\r\\n            if (isLpToken) {\\r\\n                _lpLockedTokens.remove(userLock.token);\\r\\n            } else {\\r\\n                _normalLockedTokens.remove(userLock.token);\\r\\n            }\\r\\n        }\\r\\n        userLock.unlockedAmount = unlockAmount;\\r\\n\\r\\n        _tokenToLockIds[userLock.token].remove(userLock.id);\\r\\n\\r\\n        IERC20(userLock.token).safeTransfer(msg.sender, unlockAmount);\\r\\n\\r\\n        emit LockRemoved(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            msg.sender,\\r\\n            unlockAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _vestingUnlock(Lock storage userLock) internal {\\r\\n        uint256 withdrawable = _withdrawableTokens(userLock);\\r\\n        uint256 newTotalUnlockAmount = userLock.unlockedAmount + withdrawable;\\r\\n        require(\\r\\n            withdrawable > 0 && newTotalUnlockAmount <= userLock.amount,\\r\\n            \\\"Nothing to unlock\\\"\\r\\n        );\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (newTotalUnlockAmount == userLock.amount) {\\r\\n            if (isLpToken) {\\r\\n                _userLpLockIds[msg.sender].remove(userLock.id);\\r\\n            } else {\\r\\n                _userNormalLockIds[msg.sender].remove(userLock.id);\\r\\n            }\\r\\n            _tokenToLockIds[userLock.token].remove(userLock.id);\\r\\n            emit LockRemoved(\\r\\n                userLock.id,\\r\\n                userLock.token,\\r\\n                msg.sender,\\r\\n                newTotalUnlockAmount,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount <= withdrawable) {\\r\\n            tokenInfo.amount = 0;\\r\\n        } else {\\r\\n            tokenInfo.amount = tokenInfo.amount - withdrawable;\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount == 0) {\\r\\n            if (isLpToken) {\\r\\n                _lpLockedTokens.remove(userLock.token);\\r\\n            } else {\\r\\n                _normalLockedTokens.remove(userLock.token);\\r\\n            }\\r\\n        }\\r\\n        userLock.unlockedAmount = newTotalUnlockAmount;\\r\\n\\r\\n        IERC20(userLock.token).safeTransfer(userLock.owner, withdrawable);\\r\\n\\r\\n        emit LockVested(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            msg.sender,\\r\\n            withdrawable,\\r\\n            userLock.amount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawableTokens(uint256 lockId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Lock memory userLock = getLockById(lockId);\\r\\n        return _withdrawableTokens(userLock);\\r\\n    }\\r\\n\\r\\n    function _withdrawableTokens(Lock memory userLock)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (userLock.amount == 0) return 0;\\r\\n        if (userLock.unlockedAmount >= userLock.amount) return 0;\\r\\n        if (block.timestamp < userLock.tgeDate) return 0;\\r\\n        if (userLock.cycle == 0) return 0;\\r\\n\\r\\n        uint256 tgeReleaseAmount = (userLock.amount * userLock.tgeBps) / 10_000;\\r\\n        uint256 cycleReleaseAmount = FullMath.mulDiv(\\r\\n            userLock.amount,\\r\\n            userLock.cycleBps,\\r\\n            10_000\\r\\n        );\\r\\n        uint256 currentTotal = 0;\\r\\n        if (block.timestamp >= userLock.tgeDate) {\\r\\n            currentTotal =\\r\\n                (((block.timestamp - userLock.tgeDate) / userLock.cycle) *\\r\\n                    cycleReleaseAmount) +\\r\\n                tgeReleaseAmount; // Truncation is expected here\\r\\n        }\\r\\n        uint256 withdrawable = 0;\\r\\n        if (currentTotal > userLock.amount) {\\r\\n            withdrawable = userLock.amount - userLock.unlockedAmount;\\r\\n        } else {\\r\\n            withdrawable = currentTotal - userLock.unlockedAmount;\\r\\n        }\\r\\n        return withdrawable;\\r\\n    }\\r\\n\\r\\n    function editLock(\\r\\n        uint256 lockId,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    ) external override validLock(lockId) {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n        require(userLock.unlockedAmount == 0, \\\"Lock was unlocked\\\");\\r\\n\\r\\n        if (newUnlockDate > 0) {\\r\\n            require(\\r\\n                newUnlockDate >= userLock.tgeDate &&\\r\\n                    newUnlockDate > block.timestamp,\\r\\n                \\\"New unlock time should not be before old unlock time or current time\\\"\\r\\n            );\\r\\n            userLock.tgeDate = newUnlockDate;\\r\\n        }\\r\\n\\r\\n        if (newAmount > 0) {\\r\\n            require(\\r\\n                newAmount >= userLock.amount,\\r\\n                \\\"New amount should not be less than current amount\\\"\\r\\n            );\\r\\n\\r\\n            uint256 diff = newAmount - userLock.amount;\\r\\n\\r\\n            if (diff > 0) {\\r\\n                userLock.amount = newAmount;\\r\\n                CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n                    userLock.token\\r\\n                ];\\r\\n                tokenInfo.amount = tokenInfo.amount + diff;\\r\\n                _safeTransferFromEnsureExactAmount(\\r\\n                    userLock.token,\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    diff\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LockUpdated(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            userLock.owner,\\r\\n            userLock.amount,\\r\\n            userLock.tgeDate\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function editLockDescription(uint256 lockId, string memory description)\\r\\n        external\\r\\n        validLock(lockId)\\r\\n    {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n        userLock.description = description;\\r\\n        emit LockDescriptionChanged(lockId);\\r\\n    }\\r\\n\\r\\n    function transferLockOwnership(uint256 lockId, address newOwner)\\r\\n        public\\r\\n        validLock(lockId)\\r\\n    {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        address currentOwner = userLock.owner;\\r\\n        require(\\r\\n            currentOwner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n\\r\\n        userLock.owner = newOwner;\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (isLpToken) {\\r\\n            _userLpLockIds[currentOwner].remove(lockId);\\r\\n            _userLpLockIds[newOwner].add(lockId);\\r\\n        } else {\\r\\n            _userNormalLockIds[currentOwner].remove(lockId);\\r\\n            _userNormalLockIds[newOwner].add(lockId);\\r\\n        }\\r\\n\\r\\n        emit LockOwnerChanged(lockId, currentOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceLockOwnership(uint256 lockId) external {\\r\\n        transferLockOwnership(lockId, address(0));\\r\\n    }\\r\\n\\r\\n    function _safeTransferFromEnsureExactAmount(\\r\\n        address token,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 oldRecipientBalance = IERC20(token).balanceOf(recipient);\\r\\n        IERC20(token).safeTransferFrom(sender, recipient, amount);\\r\\n        uint256 newRecipientBalance = IERC20(token).balanceOf(recipient);\\r\\n        require(\\r\\n            newRecipientBalance - oldRecipientBalance == amount,\\r\\n            \\\"Not enough token was transfered\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTotalLockCount() external view returns (uint256) {\\r\\n        // Returns total lock count, regardless of whether it has been unlocked or not\\r\\n        return _locks.length;\\r\\n    }\\r\\n\\r\\n    function getLockAt(uint256 index) external view returns (Lock memory) {\\r\\n        return _locks[index];\\r\\n    }\\r\\n\\r\\n    function getLockById(uint256 lockId) public view returns (Lock memory) {\\r\\n        return _locks[_getActualIndex(lockId)];\\r\\n    }\\r\\n\\r\\n    function allLpTokenLockedCount() public view returns (uint256) {\\r\\n        return _lpLockedTokens.length();\\r\\n    }\\r\\n\\r\\n    function allNormalTokenLockedCount() public view returns (uint256) {\\r\\n        return _normalLockedTokens.length();\\r\\n    }\\r\\n\\r\\n    function getCumulativeLpTokenLockInfoAt(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo memory)\\r\\n    {\\r\\n        return cumulativeLockInfo[_lpLockedTokens.at(index)];\\r\\n    }\\r\\n\\r\\n    function getCumulativeNormalTokenLockInfoAt(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo memory)\\r\\n    {\\r\\n        return cumulativeLockInfo[_normalLockedTokens.at(index)];\\r\\n    }\\r\\n\\r\\n    function getCumulativeLpTokenLockInfo(uint256 start, uint256 end)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo[] memory)\\r\\n    {\\r\\n        if (end >= _lpLockedTokens.length()) {\\r\\n            end = _lpLockedTokens.length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            lockInfo[currentIndex] = cumulativeLockInfo[_lpLockedTokens.at(i)];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return lockInfo;\\r\\n    }\\r\\n\\r\\n    function getCumulativeNormalTokenLockInfo(uint256 start, uint256 end)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo[] memory)\\r\\n    {\\r\\n        if (end >= _normalLockedTokens.length()) {\\r\\n            end = _normalLockedTokens.length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            lockInfo[currentIndex] = cumulativeLockInfo[\\r\\n                _normalLockedTokens.at(i)\\r\\n            ];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return lockInfo;\\r\\n    }\\r\\n\\r\\n    function totalTokenLockedCount() external view returns (uint256) {\\r\\n        return allLpTokenLockedCount() + allNormalTokenLockedCount();\\r\\n    }\\r\\n\\r\\n    function lpLockCountForUser(address user) public view returns (uint256) {\\r\\n        return _userLpLockIds[user].length();\\r\\n    }\\r\\n\\r\\n    function lpLocksForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock[] memory)\\r\\n    {\\r\\n        uint256 length = _userLpLockIds[user].length();\\r\\n        Lock[] memory userLocks = new Lock[](length);\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            userLocks[i] = getLockById(_userLpLockIds[user].at(i));\\r\\n        }\\r\\n        return userLocks;\\r\\n    }\\r\\n\\r\\n    function lpLockForUserAtIndex(address user, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock memory)\\r\\n    {\\r\\n        require(lpLockCountForUser(user) > index, \\\"Invalid index\\\");\\r\\n        return getLockById(_userLpLockIds[user].at(index));\\r\\n    }\\r\\n\\r\\n    function normalLockCountForUser(address user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _userNormalLockIds[user].length();\\r\\n    }\\r\\n\\r\\n    function normalLocksForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock[] memory)\\r\\n    {\\r\\n        uint256 length = _userNormalLockIds[user].length();\\r\\n        Lock[] memory userLocks = new Lock[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            userLocks[i] = getLockById(_userNormalLockIds[user].at(i));\\r\\n        }\\r\\n        return userLocks;\\r\\n    }\\r\\n\\r\\n    function normalLockForUserAtIndex(address user, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock memory)\\r\\n    {\\r\\n        require(normalLockCountForUser(user) > index, \\\"Invalid index\\\");\\r\\n        return getLockById(_userNormalLockIds[user].at(index));\\r\\n    }\\r\\n\\r\\n    function totalLockCountForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return normalLockCountForUser(user) + lpLockCountForUser(user);\\r\\n    }\\r\\n\\r\\n    function totalLockCountForToken(address token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _tokenToLockIds[token].length();\\r\\n    }\\r\\n\\r\\n    function getLocksForToken(\\r\\n        address token,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) public view returns (Lock[] memory) {\\r\\n        if (end >= _tokenToLockIds[token].length()) {\\r\\n            end = _tokenToLockIds[token].length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        Lock[] memory locks = new Lock[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            locks[currentIndex] = getLockById(_tokenToLockIds[token].at(i));\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return locks;\\r\\n    }\\r\\n\\r\\n    function _getActualIndex(uint256 lockId) internal view returns (uint256) {\\r\\n        if (lockId < ID_PADDING) {\\r\\n            revert(\\\"Invalid lock id\\\");\\r\\n        }\\r\\n        uint256 actualIndex = lockId - ID_PADDING;\\r\\n        require(actualIndex < _locks.length, \\\"Invalid lock id\\\");\\r\\n        return actualIndex;\\r\\n    }\\r\\n\\r\\n    function _parseFactoryAddress(address token)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        address possibleFactoryAddress;\\r\\n        try IUniswapV2Pair(token).factory() returns (address factory) {\\r\\n            possibleFactoryAddress = factory;\\r\\n        } catch {\\r\\n            revert(\\\"This token is not a LP token\\\");\\r\\n        }\\r\\n        require(\\r\\n            possibleFactoryAddress != address(0) &&\\r\\n                _isValidLpToken(token, possibleFactoryAddress),\\r\\n            \\\"This token is not a LP token.\\\"\\r\\n        );\\r\\n        return possibleFactoryAddress;\\r\\n    }\\r\\n\\r\\n    function _isValidLpToken(address token, address factory)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n        address factoryPair = IUniswapV2Factory(factory).getPair(\\r\\n            pair.token0(),\\r\\n            pair.token1()\\r\\n        );\\r\\n        return factoryPair == token;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x346fe4cbf5c47f986d9b8200582b9ffd5b4dc0a7675c47cdee06521fa32309d8\",\"license\":\"MIT\"},\"@gempad/locker/interfaces/IGempadVestingLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IGempadVestingLock {\\r\\n    function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external returns (uint256 lockId);\\r\\n\\r\\n    function vestingLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external returns (uint256 lockId);\\r\\n\\r\\n    function multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function unlock(uint256 lockId) external;\\r\\n\\r\\n    function editLock(\\r\\n        uint256 lockId,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xd48a5c37a4ae9a96947f3f7d78b15214fda577a924db51be1b3ac72404ac9e39\",\"license\":\"MIT\"},\"@gempad/locker/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(\\r\\n    address indexed token0,\\r\\n    address indexed token1,\\r\\n    address pair,\\r\\n    uint256\\r\\n  );\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (address pair);\\r\\n\\r\\n  function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n  function allPairsLength() external view returns (uint256);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    returns (address pair);\\r\\n\\r\\n  function setFeeTo(address) external;\\r\\n\\r\\n  function setFeeToSetter(address) external;\\r\\n}\",\"keccak256\":\"0x62cc1fb46924a0f43f69539be4daa4ff80a59085a559f582743cfa4a25ea6603\",\"license\":\"MIT\"},\"@gempad/locker/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n  event Burn(\\r\\n    address indexed sender,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint256 amount0In,\\r\\n    uint256 amount1In,\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function kLast() external view returns (uint256);\\r\\n\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0x7639b5512281b9072d03aeae3b0acb582a86fdedd2c43a0ce021014595b74340\",\"license\":\"MIT\"},\"@gempad/locker/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amountA,\\r\\n      uint256 amountB,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint256 amountTokenDesired,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n      uint256 amountToken,\\r\\n      uint256 amountETH,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountOut(\\r\\n    uint256 amountIn,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountOut);\\r\\n\\r\\n  function getAmountIn(\\r\\n    uint256 amountOut,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountIn);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory amounts);\\r\\n}\",\"keccak256\":\"0x264f0e69edefea44168c60e29e28118aa5f04001f1d83995e6dd2b7371427504\",\"license\":\"MIT\"},\"@gempad/locker/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n}\",\"keccak256\":\"0x028869e32b2a032b9fe7848534d3cb2218ca5804d81ef3a8a8a35e9a612adc8b\",\"license\":\"MIT\"},\"@gempad/locker/utils/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint256 prod0; // Least significant 256 bits of the product\\r\\n    uint256 prod1; // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod0 := mul(a, b)\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    uint256 remainder;\\r\\n    assembly {\\r\\n      remainder := mulmod(a, b, denominator)\\r\\n    }\\r\\n    // Subtract 256 bit number from 512 bit number\\r\\n    assembly {\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    unchecked {\\r\\n      uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the precoditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x9276402c057a9eaa125bd2db174772105df94b4d6240e82ffdfba62732ee98ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15622,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10375,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_locks",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Lock)10361_storage)dyn_storage"
      },
      {
        "astId": 10380,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_userLpLockIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UintSet)18026_storage)"
      },
      {
        "astId": 10385,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_userNormalLockIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UintSet)18026_storage)"
      },
      {
        "astId": 10388,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_lpLockedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)17869_storage"
      },
      {
        "astId": 10391,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_normalLockedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)17869_storage"
      },
      {
        "astId": 10396,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "cumulativeLockInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(CumulativeLockInfo)10368_storage)"
      },
      {
        "astId": 10401,
        "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
        "label": "_tokenToLockIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(UintSet)18026_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Lock)10361_storage)dyn_storage": {
        "base": "t_struct(Lock)10361_storage",
        "encoding": "dynamic_array",
        "label": "struct GempadVestingLock.Lock[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(CumulativeLockInfo)10368_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GempadVestingLock.CumulativeLockInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CumulativeLockInfo)10368_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)18026_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)18026_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)17869_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 17868,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)17554_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CumulativeLockInfo)10368_storage": {
        "encoding": "inplace",
        "label": "struct GempadVestingLock.CumulativeLockInfo",
        "members": [
          {
            "astId": 10363,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10365,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "factory",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10367,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Lock)10361_storage": {
        "encoding": "inplace",
        "label": "struct GempadVestingLock.Lock",
        "members": [
          {
            "astId": 10340,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10342,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10344,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10346,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10348,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "lockDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10350,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "tgeDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10352,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "tgeBps",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10354,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "cycle",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10356,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "cycleBps",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 10358,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "unlockedAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 10360,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "description",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Set)17554_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 17549,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 17553,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)18026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 18025,
            "contract": "@gempad/locker/contracts/GempadVestingLock.sol:GempadVestingLock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)17554_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}