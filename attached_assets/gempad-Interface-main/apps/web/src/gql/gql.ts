/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    '\n    mutation addTitleToLock($txHash: String!, $title: String!) {\n        addTitleToLock(txHash: $txHash, title: $title)\n    }\n':
        types.AddTitleToLockDocument,
    '\n    query LiquidityLockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        token0 {\n                            symbol\n                        }\n                        token1 {\n                            symbol\n                        }\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        id\n                        name\n                        symbol\n                        decimals\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n':
        types.LiquidityLockRecordsDocument,
    '\n    query LaunchpadDetail($address: String) {\n        launchPads(where: { contractAddress_eq: $address }) {\n            id\n            name\n            totalSaleAmount\n            totalSellTokens\n            updatedAt\n            userHardCap\n            affiliateReward\n            chainId\n            contractAddress\n            createdAt\n            decreaseInterval\n            endPrice\n            endTime\n            finalizeTime\n            fundToken {\n                decimals\n                id\n                symbol\n                name\n                isNative\n              }\n            hardCap\n            investedAmount\n            investors\n            isAffiliate\n            isAutoListing\n            listingRate\n            isMaxLimit\n            liquidityAdded\n            liquidityDetails {\n            id\n            liquidityAdded\n            liquidityPercent\n            lockTime\n            locker\n            router\n            }\n            listingPrice\n            lockTime\n            locker\n            maxBuyLimit\n            minBuyLimit\n            metadata {\n            audit\n            contractAddress\n            id\n            kyc\n            socials {\n                description\n                facebookUrl\n                githubUrl\n                logoUrl\n                redditUrl\n                telegramUrl\n                twitterUrl\n                webUrl\n                youtubeUrl\n            }\n            }\n            owner {\n            id\n            }\n            publicSaleTime\n            router\n            sellPrice\n            sellRate\n            softCap\n            startPrice\n            startTime\n            token {\n            id\n            chainId\n            decimals\n            name\n            symbol\n            totalSupply\n            }\n            vestingDetails {\n            cycleInterval\n            cyclePercent\n            id\n            isVestingEnable\n            tgePercent\n            }\n        }\n    }\n':
        types.LaunchpadDetailDocument,
    '\n    query getAllLaunchpadsAdmin(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetAllLaunchpadsAdminDocument,
    '\n    mutation addKycAuditToLaunchpad($contractAddress: String!, $kyc: String!, $audit: String!) {\n        addKycAuditToLaunchpad(contractAddress: $contractAddress, kyc: $kyc, audit: $audit)\n    }\n':
        types.AddKycAuditToLaunchpadDocument,
    '\nquery getWhiteBlackList ($id: String) {\n  antibots(where: {id_eq: $id}) {\n    id\n    blacklist\n    whitelist\n  }\n}':
        types.GetWhiteBlackListDocument,
    '\n    mutation addMetadataToAirdrop(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToAirdrop(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n':
        types.AddMetadataToAirdropDocument,
    '\n    mutation editAirdropMetadata(\n        $contractAddress: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        editAirdropMetadata(\n            contractAddress: $contractAddress\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n':
        types.EditAirdropMetadataDocument,
    '\nquery EditAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      \n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n        }\n      \n    }\n  }\n':
        types.EditAirdropDocument,
    '\n    query getAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetAirdropsDocument,
    '\n    query getAirdropsByMe($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: String) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {owner: {id_eq: $owner}}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetAirdropsByMeDocument,
    '\n    query getMyAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: [String]) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {allocatedUsers_containsAny: $owner}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetMyAirdropsDocument,
    '\nquery GetAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      id\n      status\n      tge\n      name\n      isVesting\n      isCancelled\n      isEnded\n      interval\n      cycle\n      createdAt\n      contractAddress\n      startTime\n      chainId\n      updatedAt\n      totalTokens\n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n    }\n      allocations {\n        user\n        amount\n      }\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n      owner {\n        id\n      }\n    }\n  }\n':
        types.GetAirdropDocument,
    '\nquery getAirdropsAggrigation {\n    aggregations {\n      totalAirdropsLaunched\n      totalParticipantsAirdrops\n    }\n  }\n':
        types.GetAirdropsAggrigationDocument,
    '\n    mutation addMetadataToLaunchpad(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToLaunchpad(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n':
        types.AddMetadataToLaunchpadDocument,
    '\n    query getAllLaunchpadsLeaderboard(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $startTime: BigInt!\n        $endTime: BigInt!\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: {\n                startTime_gte: $startTime\n                endTime_lte: $endTime\n            }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    investedAmount\n                    chainId\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    fundToken {\n                        decimals\n                        id\n                        symbol\n                        name\n                        isNative\n                      }\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetAllLaunchpadsLeaderboardDocument,
    '\nquery getGemTokens ($limit: Int!) {\n    gemlaunchTokens(limit: $limit, orderBy: createdAt_DESC) {\n        id\n        name\n        symbol\n        image\n        chainId\n    }\n  }\n  \n':
        types.GetGemTokensDocument,
    '\nquery getLatestPools($limit: Int!) {\n  launchPads (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    token {\n      symbol\n    }\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n':
        types.GetLatestPoolsDocument,
    '\nquery getPrivateSales($limit: Int!) {\n  privateSales (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    tokenSymbol\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n':
        types.GetPrivateSalesDocument,
    '\n    query RecordsLockConnection($lockId: String!, $orderBy: [LockOrderByInput!] = id_ASC) {\n        locks(orderBy: $orderBy, where: { id_eq: $lockId }) {\n            id\n            token {\n                id\n                name\n                symbol\n                decimals\n                tokenLockedInUsd\n                isLiquidityToken\n                token0 {\n                    symbol\n                }\n                token1 {\n                    symbol\n                }\n            }\n            amount\n            owner {\n                id\n            }\n            unlockDate\n            status\n            depositDate\n            interval\n            cycleShare\n            tge\n            title\n        }\n    }\n':
        types.RecordsLockConnectionDocument,
    '\n    query LockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        decimals\n                        name\n                        symbol\n                        id\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n':
        types.LockRecordsDocument,
    '\n    mutation addMetadataToPrivateSale(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToPrivateSale(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n':
        types.AddMetadataToPrivateSaleDocument,
    '\n    query getHomeAggregation {\n        aggregations {\n            fundedProjects\n            uniqueParticipants\n            raisedContributionNative\n            raisedContributionUSDC\n            raisedContributionUSDT\n            \n        }\n    }\n  \n':
        types.GetHomeAggregationDocument,
    '\nquery getStats {\n    aggregations {\n      uniqueParticipants\n      fundedProjects\n      tokenLockedInUsd\n      raisedContributionNative\n      raisedContributionUSDC\n      raisedContributionUSDT\n    }\n  }\n  \n':
        types.GetStatsDocument,
    '\n    query MyQuery(\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n        $searchTerm: String\n        $isLpToken: Boolean\n        $ownerAddress: String\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: {\n                token: { isLiquidityToken_eq: $isLpToken, id_containsInsensitive: $searchTerm }\n                owner: {id_containsInsensitive: $ownerAddress}\n            }\n        ) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                node {\n                    amount\n                    token {\n                        id\n                        decimals\n                        name\n                        symbol\n                    }\n                    id\n                    owner {\n                        id\n                    }\n                }\n            }\n        }\n    }\n':
        types.MyQueryDocument,
    '\n    query getLaunchpads {\n        launchPads {\n            id\n            endTime\n            hardCap\n            finalizeTime\n            isAffiliate\n            isAutoListing\n            contractAddress\n            liquidityAdded\n            liquidityPercent\n            listingPrice\n            lockTime\n            locker\n            minBuyLimit\n            name\n            publicSaleTime\n            sellPrice\n            router\n            softCap\n            startTime\n            vestingDetails {\n                cycleInterval\n                cyclePercent\n                id\n                isVestingEnable\n                tgePercent\n            }\n            token {\n                totalSupply\n                symbol\n                name\n                id\n                decimals\n            }\n            owner {\n                id\n            }\n            maxBuyLimit\n            metadata {\n                socials {\n                    telegramUrl\n                    description\n                    facebookUrl\n                    githubUrl\n                    logoUrl\n                    redditUrl\n                    twitterUrl\n                    webUrl\n                    youtubeUrl\n                }\n                id\n            }\n        }\n    }\n':
        types.GetLaunchpadsDocument,
    '\n    query getAllLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                    \n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    \n                    \n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    \n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetAllLaunchpadsDocument,
    '\n    query getMyLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n        $ownerId: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}, owner: {id_eq: $ownerId}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n':
        types.GetMyLaunchpadsDocument,
    '\n    query GetAllPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n':
        types.GetAllPrivateSalesDocument,
    '\n    query GetMyPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n        $owner: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm, owner_eq: $owner }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n':
        types.GetMyPrivateSalesDocument,
    '\n    query GetMyContributionPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $owner: [String]\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { investors_containsAny: $owner, tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n':
        types.GetMyContributionPrivateSalesDocument,
    '\n    query GetSinglePrivateSale($id: String) {\n        privateSales(where: { id_eq: $id }) {\n            cycleInterval\n            cyclePercent\n            endTime\n            owner\n            finalizeTime\n            hardcap\n            id\n            initialRelease\n            isWhitelist\n            maxBuyLimit\n            minBuyLimit\n            name\n            publicSaleTime\n            softcap\n            startTime\n            currency\n            depositedAmount\n            whitelistUsers\n            metadata {\n                socials {\n                    logoUrl\n                    webUrl\n                    facebookUrl\n                    twitterUrl\n                    githubUrl\n                    telegramUrl\n                    redditUrl\n                    youtubeUrl\n                    description\n                }\n            }\n        }\n    }\n':
        types.GetSinglePrivateSaleDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation addTitleToLock($txHash: String!, $title: String!) {\n        addTitleToLock(txHash: $txHash, title: $title)\n    }\n',
): (typeof documents)['\n    mutation addTitleToLock($txHash: String!, $title: String!) {\n        addTitleToLock(txHash: $txHash, title: $title)\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query LiquidityLockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        token0 {\n                            symbol\n                        }\n                        token1 {\n                            symbol\n                        }\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        id\n                        name\n                        symbol\n                        decimals\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n',
): (typeof documents)['\n    query LiquidityLockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        token0 {\n                            symbol\n                        }\n                        token1 {\n                            symbol\n                        }\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        id\n                        name\n                        symbol\n                        decimals\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query LaunchpadDetail($address: String) {\n        launchPads(where: { contractAddress_eq: $address }) {\n            id\n            name\n            totalSaleAmount\n            totalSellTokens\n            updatedAt\n            userHardCap\n            affiliateReward\n            chainId\n            contractAddress\n            createdAt\n            decreaseInterval\n            endPrice\n            endTime\n            finalizeTime\n            fundToken {\n                decimals\n                id\n                symbol\n                name\n                isNative\n              }\n            hardCap\n            investedAmount\n            investors\n            isAffiliate\n            isAutoListing\n            listingRate\n            isMaxLimit\n            liquidityAdded\n            liquidityDetails {\n            id\n            liquidityAdded\n            liquidityPercent\n            lockTime\n            locker\n            router\n            }\n            listingPrice\n            lockTime\n            locker\n            maxBuyLimit\n            minBuyLimit\n            metadata {\n            audit\n            contractAddress\n            id\n            kyc\n            socials {\n                description\n                facebookUrl\n                githubUrl\n                logoUrl\n                redditUrl\n                telegramUrl\n                twitterUrl\n                webUrl\n                youtubeUrl\n            }\n            }\n            owner {\n            id\n            }\n            publicSaleTime\n            router\n            sellPrice\n            sellRate\n            softCap\n            startPrice\n            startTime\n            token {\n            id\n            chainId\n            decimals\n            name\n            symbol\n            totalSupply\n            }\n            vestingDetails {\n            cycleInterval\n            cyclePercent\n            id\n            isVestingEnable\n            tgePercent\n            }\n        }\n    }\n',
): (typeof documents)['\n    query LaunchpadDetail($address: String) {\n        launchPads(where: { contractAddress_eq: $address }) {\n            id\n            name\n            totalSaleAmount\n            totalSellTokens\n            updatedAt\n            userHardCap\n            affiliateReward\n            chainId\n            contractAddress\n            createdAt\n            decreaseInterval\n            endPrice\n            endTime\n            finalizeTime\n            fundToken {\n                decimals\n                id\n                symbol\n                name\n                isNative\n              }\n            hardCap\n            investedAmount\n            investors\n            isAffiliate\n            isAutoListing\n            listingRate\n            isMaxLimit\n            liquidityAdded\n            liquidityDetails {\n            id\n            liquidityAdded\n            liquidityPercent\n            lockTime\n            locker\n            router\n            }\n            listingPrice\n            lockTime\n            locker\n            maxBuyLimit\n            minBuyLimit\n            metadata {\n            audit\n            contractAddress\n            id\n            kyc\n            socials {\n                description\n                facebookUrl\n                githubUrl\n                logoUrl\n                redditUrl\n                telegramUrl\n                twitterUrl\n                webUrl\n                youtubeUrl\n            }\n            }\n            owner {\n            id\n            }\n            publicSaleTime\n            router\n            sellPrice\n            sellRate\n            softCap\n            startPrice\n            startTime\n            token {\n            id\n            chainId\n            decimals\n            name\n            symbol\n            totalSupply\n            }\n            vestingDetails {\n            cycleInterval\n            cyclePercent\n            id\n            isVestingEnable\n            tgePercent\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getAllLaunchpadsAdmin(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getAllLaunchpadsAdmin(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation addKycAuditToLaunchpad($contractAddress: String!, $kyc: String!, $audit: String!) {\n        addKycAuditToLaunchpad(contractAddress: $contractAddress, kyc: $kyc, audit: $audit)\n    }\n',
): (typeof documents)['\n    mutation addKycAuditToLaunchpad($contractAddress: String!, $kyc: String!, $audit: String!) {\n        addKycAuditToLaunchpad(contractAddress: $contractAddress, kyc: $kyc, audit: $audit)\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getWhiteBlackList ($id: String) {\n  antibots(where: {id_eq: $id}) {\n    id\n    blacklist\n    whitelist\n  }\n}',
): (typeof documents)['\nquery getWhiteBlackList ($id: String) {\n  antibots(where: {id_eq: $id}) {\n    id\n    blacklist\n    whitelist\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation addMetadataToAirdrop(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToAirdrop(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n',
): (typeof documents)['\n    mutation addMetadataToAirdrop(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToAirdrop(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation editAirdropMetadata(\n        $contractAddress: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        editAirdropMetadata(\n            contractAddress: $contractAddress\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n',
): (typeof documents)['\n    mutation editAirdropMetadata(\n        $contractAddress: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        editAirdropMetadata(\n            contractAddress: $contractAddress\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery EditAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      \n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n        }\n      \n    }\n  }\n',
): (typeof documents)['\nquery EditAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      \n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n        }\n      \n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getAirdropsByMe($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: String) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {owner: {id_eq: $owner}}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getAirdropsByMe($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: String) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {owner: {id_eq: $owner}}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getMyAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: [String]) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {allocatedUsers_containsAny: $owner}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getMyAirdrops($first: Int, $after: String, $orderBy: [AirdropOrderByInput!]!, $owner: [String]) {\n        airdropsConnection(first: $first, after: $after, orderBy: $orderBy, where: {allocatedUsers_containsAny: $owner}) {\n            totalCount\n            edges {\n                node {\n                    contractAddress\n                    name\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                    token {\n                        name\n                        decimals\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery GetAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      id\n      status\n      tge\n      name\n      isVesting\n      isCancelled\n      isEnded\n      interval\n      cycle\n      createdAt\n      contractAddress\n      startTime\n      chainId\n      updatedAt\n      totalTokens\n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n    }\n      allocations {\n        user\n        amount\n      }\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n      owner {\n        id\n      }\n    }\n  }\n',
): (typeof documents)['\nquery GetAirdrop($contractAddress: String!) {\n    airdrops(where: {contractAddress_eq: $contractAddress}) {\n      id\n      status\n      tge\n      name\n      isVesting\n      isCancelled\n      isEnded\n      interval\n      cycle\n      createdAt\n      contractAddress\n      startTime\n      chainId\n      updatedAt\n      totalTokens\n      metadata {\n        socials {\n            logoUrl\n            webUrl\n            facebookUrl\n            twitterUrl\n            githubUrl\n            telegramUrl\n            redditUrl\n            youtubeUrl\n            description\n        }\n    }\n      allocations {\n        user\n        amount\n      }\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n      owner {\n        id\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getAirdropsAggrigation {\n    aggregations {\n      totalAirdropsLaunched\n      totalParticipantsAirdrops\n    }\n  }\n',
): (typeof documents)['\nquery getAirdropsAggrigation {\n    aggregations {\n      totalAirdropsLaunched\n      totalParticipantsAirdrops\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation addMetadataToLaunchpad(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToLaunchpad(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n',
): (typeof documents)['\n    mutation addMetadataToLaunchpad(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToLaunchpad(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getAllLaunchpadsLeaderboard(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $startTime: BigInt!\n        $endTime: BigInt!\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: {\n                startTime_gte: $startTime\n                endTime_lte: $endTime\n            }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    investedAmount\n                    chainId\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    fundToken {\n                        decimals\n                        id\n                        symbol\n                        name\n                        isNative\n                      }\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getAllLaunchpadsLeaderboard(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $startTime: BigInt!\n        $endTime: BigInt!\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: {\n                startTime_gte: $startTime\n                endTime_lte: $endTime\n            }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    isAutoListing\n                    liquidityAdded\n                    liquidityPercent\n                    listingPrice\n                    lockTime\n                    locker\n                    minBuyLimit\n                    investedAmount\n                    chainId\n                    name\n                    publicSaleTime\n                    sellPrice\n                    router\n                    softCap\n                    startTime\n                    fundToken {\n                        decimals\n                        id\n                        symbol\n                        name\n                        isNative\n                      }\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getGemTokens ($limit: Int!) {\n    gemlaunchTokens(limit: $limit, orderBy: createdAt_DESC) {\n        id\n        name\n        symbol\n        image\n        chainId\n    }\n  }\n  \n',
): (typeof documents)['\nquery getGemTokens ($limit: Int!) {\n    gemlaunchTokens(limit: $limit, orderBy: createdAt_DESC) {\n        id\n        name\n        symbol\n        image\n        chainId\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getLatestPools($limit: Int!) {\n  launchPads (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    token {\n      symbol\n    }\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n',
): (typeof documents)['\nquery getLatestPools($limit: Int!) {\n  launchPads (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    token {\n      symbol\n    }\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getPrivateSales($limit: Int!) {\n  privateSales (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    tokenSymbol\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n',
): (typeof documents)['\nquery getPrivateSales($limit: Int!) {\n  privateSales (limit: $limit, orderBy: createdAt_DESC){\n    id\n    name\n    chainId\n    contractAddress\n    tokenSymbol\n    metadata {\n      socials {\n        logoUrl\n      }\n    }\n  }\n}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query RecordsLockConnection($lockId: String!, $orderBy: [LockOrderByInput!] = id_ASC) {\n        locks(orderBy: $orderBy, where: { id_eq: $lockId }) {\n            id\n            token {\n                id\n                name\n                symbol\n                decimals\n                tokenLockedInUsd\n                isLiquidityToken\n                token0 {\n                    symbol\n                }\n                token1 {\n                    symbol\n                }\n            }\n            amount\n            owner {\n                id\n            }\n            unlockDate\n            status\n            depositDate\n            interval\n            cycleShare\n            tge\n            title\n        }\n    }\n',
): (typeof documents)['\n    query RecordsLockConnection($lockId: String!, $orderBy: [LockOrderByInput!] = id_ASC) {\n        locks(orderBy: $orderBy, where: { id_eq: $lockId }) {\n            id\n            token {\n                id\n                name\n                symbol\n                decimals\n                tokenLockedInUsd\n                isLiquidityToken\n                token0 {\n                    symbol\n                }\n                token1 {\n                    symbol\n                }\n            }\n            amount\n            owner {\n                id\n            }\n            unlockDate\n            status\n            depositDate\n            interval\n            cycleShare\n            tge\n            title\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query LockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        decimals\n                        name\n                        symbol\n                        id\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n',
): (typeof documents)['\n    query LockRecords(\n        $tokenAddress: String!\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: { token: { id_eq: $tokenAddress } }\n        ) {\n            edges {\n                node {\n                    id\n                    tge\n                    interval\n                    cycleShare\n                    owner {\n                        id\n                    }\n                    token {\n                        tokenLocked\n                        tokenLockedCount\n                        tokenLockedInUsd\n                        decimals\n                        name\n                        symbol\n                        id\n                    }\n                    status\n                    amount\n                    unlockDate\n                }\n            }\n            totalCount\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    mutation addMetadataToPrivateSale(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToPrivateSale(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n',
): (typeof documents)['\n    mutation addMetadataToPrivateSale(\n        $txHash: String!\n        $logoUrl: String!\n        $webUrl: String!\n        $facebookUrl: String\n        $twitterUrl: String\n        $githubUrl: String\n        $telegramUrl: String\n        $redditUrl: String\n        $youtubeUrl: String\n        $description: String\n    ) {\n        addMetadataToPrivateSale(\n            txHash: $txHash\n            logoUrl: $logoUrl\n            webUrl: $webUrl\n            facebookUrl: $facebookUrl\n            twitterUrl: $twitterUrl\n            githubUrl: $githubUrl\n            telegramUrl: $telegramUrl\n            redditUrl: $redditUrl\n            youtubeUrl: $youtubeUrl\n            description: $description\n        )\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getHomeAggregation {\n        aggregations {\n            fundedProjects\n            uniqueParticipants\n            raisedContributionNative\n            raisedContributionUSDC\n            raisedContributionUSDT\n            \n        }\n    }\n  \n',
): (typeof documents)['\n    query getHomeAggregation {\n        aggregations {\n            fundedProjects\n            uniqueParticipants\n            raisedContributionNative\n            raisedContributionUSDC\n            raisedContributionUSDT\n            \n        }\n    }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\nquery getStats {\n    aggregations {\n      uniqueParticipants\n      fundedProjects\n      tokenLockedInUsd\n      raisedContributionNative\n      raisedContributionUSDC\n      raisedContributionUSDT\n    }\n  }\n  \n',
): (typeof documents)['\nquery getStats {\n    aggregations {\n      uniqueParticipants\n      fundedProjects\n      tokenLockedInUsd\n      raisedContributionNative\n      raisedContributionUSDC\n      raisedContributionUSDT\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query MyQuery(\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n        $searchTerm: String\n        $isLpToken: Boolean\n        $ownerAddress: String\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: {\n                token: { isLiquidityToken_eq: $isLpToken, id_containsInsensitive: $searchTerm }\n                owner: {id_containsInsensitive: $ownerAddress}\n            }\n        ) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                node {\n                    amount\n                    token {\n                        id\n                        decimals\n                        name\n                        symbol\n                    }\n                    id\n                    owner {\n                        id\n                    }\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query MyQuery(\n        $after: String\n        $first: Int\n        $orderBy: [LockOrderByInput!] = id_DESC\n        $searchTerm: String\n        $isLpToken: Boolean\n        $ownerAddress: String\n    ) {\n        locksConnection(\n            after: $after\n            first: $first\n            orderBy: $orderBy\n            where: {\n                token: { isLiquidityToken_eq: $isLpToken, id_containsInsensitive: $searchTerm }\n                owner: {id_containsInsensitive: $ownerAddress}\n            }\n        ) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                node {\n                    amount\n                    token {\n                        id\n                        decimals\n                        name\n                        symbol\n                    }\n                    id\n                    owner {\n                        id\n                    }\n                }\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getLaunchpads {\n        launchPads {\n            id\n            endTime\n            hardCap\n            finalizeTime\n            isAffiliate\n            isAutoListing\n            contractAddress\n            liquidityAdded\n            liquidityPercent\n            listingPrice\n            lockTime\n            locker\n            minBuyLimit\n            name\n            publicSaleTime\n            sellPrice\n            router\n            softCap\n            startTime\n            vestingDetails {\n                cycleInterval\n                cyclePercent\n                id\n                isVestingEnable\n                tgePercent\n            }\n            token {\n                totalSupply\n                symbol\n                name\n                id\n                decimals\n            }\n            owner {\n                id\n            }\n            maxBuyLimit\n            metadata {\n                socials {\n                    telegramUrl\n                    description\n                    facebookUrl\n                    githubUrl\n                    logoUrl\n                    redditUrl\n                    twitterUrl\n                    webUrl\n                    youtubeUrl\n                }\n                id\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getLaunchpads {\n        launchPads {\n            id\n            endTime\n            hardCap\n            finalizeTime\n            isAffiliate\n            isAutoListing\n            contractAddress\n            liquidityAdded\n            liquidityPercent\n            listingPrice\n            lockTime\n            locker\n            minBuyLimit\n            name\n            publicSaleTime\n            sellPrice\n            router\n            softCap\n            startTime\n            vestingDetails {\n                cycleInterval\n                cyclePercent\n                id\n                isVestingEnable\n                tgePercent\n            }\n            token {\n                totalSupply\n                symbol\n                name\n                id\n                decimals\n            }\n            owner {\n                id\n            }\n            maxBuyLimit\n            metadata {\n                socials {\n                    telegramUrl\n                    description\n                    facebookUrl\n                    githubUrl\n                    logoUrl\n                    redditUrl\n                    twitterUrl\n                    webUrl\n                    youtubeUrl\n                }\n                id\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getAllLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                    \n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    \n                    \n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    \n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getAllLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                    \n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    \n                    \n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    \n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query getMyLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n        $ownerId: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}, owner: {id_eq: $ownerId}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n',
): (typeof documents)['\n    query getMyLaunchpads(\n        $first: Int\n        $after: String\n        $orderBy: [LaunchPadOrderByInput!]!\n        $searchTerm: String\n        $ownerId: String\n    ) {\n        launchPadsConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { token: {symbol_containsInsensitive: $searchTerm}, owner: {id_eq: $ownerId}  }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    endTime\n                    hardCap\n                    finalizeTime\n                    contractAddress\n                    isAffiliate\n                    affiliateReward\n                    isAutoListing\n                     liquidityDetails {\n                        id\n                        liquidityAdded\n                        liquidityPercent\n                        lockTime\n                        locker\n                        router\n                        }\n                    listingPrice\n                    minBuyLimit\n                    name\n                    publicSaleTime\n                    sellPrice\n                    softCap\n                    startTime\n                    vestingDetails {\n                        cycleInterval\n                        cyclePercent\n                        id\n                        isVestingEnable\n                        tgePercent\n                    }\n                    token {\n                        totalSupply\n                        symbol\n                        name\n                        id\n                        decimals\n                    }\n                    owner {\n                        id\n                    }\n                    maxBuyLimit\n                    metadata {\n                        kyc\n                        audit\n                        socials {\n                            telegramUrl\n                            description\n                            facebookUrl\n                            githubUrl\n                            logoUrl\n                            redditUrl\n                            twitterUrl\n                            webUrl\n                            youtubeUrl\n                        }\n                    }\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetAllPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetAllPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetMyPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n        $owner: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm, owner_eq: $owner }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetMyPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $searchTerm: String\n        $owner: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { tokenSymbol_containsInsensitive: $searchTerm, owner_eq: $owner }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetMyContributionPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $owner: [String]\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { investors_containsAny: $owner, tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetMyContributionPrivateSales(\n        $first: Int\n        $after: String\n        $orderBy: [PrivateSaleOrderByInput!]!\n        $owner: [String]\n        $searchTerm: String\n    ) {\n        privateSalesConnection(\n            first: $first\n            after: $after\n            orderBy: $orderBy\n            where: { investors_containsAny: $owner, tokenSymbol_containsInsensitive: $searchTerm }\n        ) {\n            totalCount\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n\n            edges {\n                node {\n                    id\n                    initialRelease\n                    currency\n                    metadata {\n                        socials {\n                            logoUrl\n                        }\n                    }\n                }\n            }\n        }\n    }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
    source: '\n    query GetSinglePrivateSale($id: String) {\n        privateSales(where: { id_eq: $id }) {\n            cycleInterval\n            cyclePercent\n            endTime\n            owner\n            finalizeTime\n            hardcap\n            id\n            initialRelease\n            isWhitelist\n            maxBuyLimit\n            minBuyLimit\n            name\n            publicSaleTime\n            softcap\n            startTime\n            currency\n            depositedAmount\n            whitelistUsers\n            metadata {\n                socials {\n                    logoUrl\n                    webUrl\n                    facebookUrl\n                    twitterUrl\n                    githubUrl\n                    telegramUrl\n                    redditUrl\n                    youtubeUrl\n                    description\n                }\n            }\n        }\n    }\n',
): (typeof documents)['\n    query GetSinglePrivateSale($id: String) {\n        privateSales(where: { id_eq: $id }) {\n            cycleInterval\n            cyclePercent\n            endTime\n            owner\n            finalizeTime\n            hardcap\n            id\n            initialRelease\n            isWhitelist\n            maxBuyLimit\n            minBuyLimit\n            name\n            publicSaleTime\n            softcap\n            startTime\n            currency\n            depositedAmount\n            whitelistUsers\n            metadata {\n                socials {\n                    logoUrl\n                    webUrl\n                    facebookUrl\n                    twitterUrl\n                    githubUrl\n                    telegramUrl\n                    redditUrl\n                    youtubeUrl\n                    description\n                }\n            }\n        }\n    }\n'];

export function gql(source: string) {
    return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
    TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
